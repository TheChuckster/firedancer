#include "json_lex.h"

struct fd_web_replier;
void fd_web_replier_reply(struct fd_web_replier* replier, const char* out, uint out_sz);
struct fd_iovec {
  void  *iov_base;    /* Starting address */
  ulong  iov_len;     /* Number of bytes to transfer */
};
void fd_web_replier_reply_iov(struct fd_web_replier* replier, const struct fd_iovec* vec, uint nvec);
void fd_web_replier_error(struct fd_web_replier* replier, const char* message);
char* fd_web_replier_temp_copy(struct fd_web_replier* replier, const char* text, ulong sz);

char* fd_web_replier_encode_base58(struct fd_web_replier* replier, const void* data, ulong sz, ulong* out_sz);
char* fd_web_replier_encode_base64(struct fd_web_replier* replier, const void* data, ulong sz, ulong* out_sz);

// Data structure describing a "path" to a value in json data. This is
// basically a path through the syntax tree. A path element can be one
// of the following:
//   object member:  (JSON_TOKEN_LBRACE<<16) | keyword_id
//   array member:   (JSON_TOKEN_LBRACKET<<16) | index
//   string value:   (JSON_TOKEN_STRING<<16)
//   int value:      (JSON_TOKEN_INTEGER<<16)
//   float value:    (JSON_TOKEN_FLOAT<<16)
//   boolean value:  (JSON_TOKEN_BOOL<<16)
//   null value:     (JSON_TOKEN_NULL<<16)
// keyword ids are generated by json_keyword(...) in keywords.h
#define JSON_MAX_PATH 8
struct json_path {
    uint len;
    uint elems[JSON_MAX_PATH];
};

// Represents the result of parsing a json data structure. Each leaf
// value (string, number, boolean, etc) gets an entry in the values
// list. The complete paths to those values are provided. This
// structure is optimized for quickly finding values at predetermined
// paths. It is compact and efficient.
#define JSON_MAX_PATHS 32
struct json_values {
    // Number of leaf values
    uint num_values;
    struct {
        // Path to data
        struct json_path path;
        // Offset and size of data value in buffer
        ulong data_offset;
        ulong data_sz;
    } values[JSON_MAX_PATHS];
    // Dynamic buffer containing all data
    char* buf;
    ulong buf_sz;
    ulong buf_alloc;
    char buf_init[2048];
};

// Initialize a json_values
void json_values_new(struct json_values* values);

// Destroy a json_values
void json_values_delete(struct json_values* values);

// Add a parsed value to a json_values
void json_add_value(struct json_values* values, struct json_path* path, const void* data, ulong data_sz);

// Retrieve a value at a given path. A NULL is returned if the path
// isn't found
const void* json_get_value(struct json_values* values, const uint* path, uint path_sz, ulong* data_sz);

// Dump the values and paths to stdout
void json_values_printout(struct json_values* values);
