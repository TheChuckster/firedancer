int test_1175(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_decode_bail::old_behavior";
  test.test_nonce = 470;
  test.test_number =1175;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111UmKcwVZszSyTRucygwyzTenHRon64AFUpo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 14, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1176(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_decode_bail::old_behavior";
  test.test_nonce = 473;
  test.test_number =1176;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111UmKcwVZszSyTRucygwyzTenHRon64AFUpo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111VAfDvbsAhdSLFLm4iNKJwn454K32mPqK99",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Vote111111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 14, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1177(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[1] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[10] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[11] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[12] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[13] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[14] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[15] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[16] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[17] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[18] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[19] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[20] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[29] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[30] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[31] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[32] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[36] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[42] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[43] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[44] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[45] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[46] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_decode_bail::old_behavior";
  test.test_nonce = 454;
  test.test_number =1177;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 4, 14, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 77;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1178(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[1] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[10] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[11] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[12] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[13] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[14] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[15] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[16] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[17] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[18] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[19] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[20] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[29] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[30] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[31] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[32] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[36] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[42] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[43] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[44] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[45] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[46] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_decode_bail::old_behavior";
  test.test_nonce = 462;
  test.test_number =1178;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111UmKcwVZszSyTRucygwyzTenHRon64AFUpo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 14, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1179(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[1] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[10] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[11] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[12] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[13] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[14] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[15] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[16] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[17] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[18] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[19] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[20] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[29] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[30] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[31] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[32] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[36] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[42] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[43] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[44] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[45] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[46] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_decode_bail::old_behavior";
  test.test_nonce = 476;
  test.test_number =1179;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111UmKcwVZszSyTRucygwyzTenHRon64AFUpo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111VAfDvbsAhdSLFLm4iNKJwn454K32mPqK99",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Vote111111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 70, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 14, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1180(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 247;
  test.test_number =1180;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111T9yD14Nj9j7xAB4dbGeiX9h8unkKDDv9ZR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1181(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 272;
  test.test_number =1181;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1182(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 200;
  test.test_number =1182;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111T9yD14Nj9j7xAB4dbGeiX9h8unkKDDv9ZR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1183(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 225;
  test.test_number =1183;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1184(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 263;
  test.test_number =1184;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111XagqqFetxiDb9wbartKDrXgnqLah2oLK3D",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1185(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 308;
  test.test_number =1185;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1186(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 333;
  test.test_number =1186;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111XagqqFetxiDb9wbartKDrXgnqLah2oLK3D",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1187(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 354;
  test.test_number =1187;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1188(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 282;
  test.test_number =1188;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111XagqqFetxiDb9wbartKDrXgnqLah2oLK3D",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 147;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1189(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 321;
  test.test_number =1189;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 81;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1190(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 345;
  test.test_number =1190;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111XagqqFetxiDb9wbartKDrXgnqLah2oLK3D",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 76, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 147;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1191(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[4] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[10] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[18] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[22] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(drop_merkle_shreds);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 366;
  test.test_number =1191;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 81;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1192(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 264;
  test.test_number =1192;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111T9yD14Nj9j7xAB4dbGeiX9h8unkKDDv9ZR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 147;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1193(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 283;
  test.test_number =1193;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 81;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1194(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 213;
  test.test_number =1194;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111T9yD14Nj9j7xAB4dbGeiX9h8unkKDDv9ZR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 65, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 147;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1195(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::new_behavior";
  test.test_nonce = 231;
  test.test_number =1195;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 8, 255, 255, 255, 255, 255, 255, 255, 255};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 81;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1196(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 2;
  test.disable_feature = fd_alloca(1U, 2);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[1] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::old_behavior";
  test.test_nonce = 245;
  test.test_number =1196;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111TxeQyGyJa63ho3Loe7KMVQEiAoGCdh5pC7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1197(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 2;
  test.disable_feature = fd_alloca(1U, 2);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[1] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::old_behavior";
  test.test_nonce = 266;
  test.test_number =1197;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1198(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::old_behavior";
  test.test_nonce = 201;
  test.test_number =1198;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111TxeQyGyJa63ho3Loe7KMVQEiAoGCdh5pC7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1199(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_process_instruction_error_ordering::old_behavior";
  test.test_nonce = 223;
  test.test_number =1199;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 116, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 189;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
