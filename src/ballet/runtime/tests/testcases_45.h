int test_1100(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[1] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[2] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[3] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[8] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[16] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[17] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[18] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[20] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[23] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[27] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[31] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[37] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[38] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[39] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[40] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[41] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[46] = fd_feature_offset(concurrent_replay_of_forks);
  test.test_name = "stake_instruction::tests::test_staked_split_destination_minimum_balance::old_behavior";
  test.test_nonce = 398;
  test.test_number =1100;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111Wn1ds34KYMHqX5KQp3eatH9DaL4ocLAeQX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073707268735UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 42, 221, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 84, 186, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111XBMEr9McFXkiLWTVqTyuNQR1CqKkKZkUis",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 59, 248, 34, 21, 196, 41, 25, 254, 242, 117, 183, 101, 212, 155, 27, 113, 7, 212, 141, 218, 189, 240, 173, 223, 165, 142, 248, 40, 128, 124, 141, 42, 4, 158, 230, 1, 131, 231, 16, 71, 165, 132, 114, 120, 24, 104, 168, 77, 59, 200, 226, 191, 17, 68, 92, 18, 15, 92, 109, 138, 15, 201, 26, 212, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1101(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[1] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[2] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[3] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[8] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[16] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[17] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[18] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[20] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[23] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[27] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[31] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[37] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[38] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[39] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[40] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[41] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[46] = fd_feature_offset(concurrent_replay_of_forks);
  test.test_name = "stake_instruction::tests::test_staked_split_destination_minimum_balance::old_behavior";
  test.test_nonce = 460;
  test.test_number =1101;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111Wn1ds34KYMHqX5KQp3eatH9DaL4ocLAeQX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073709551615UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 42, 221, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 42, 221, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111XBMEr9McFXkiLWTVqTyuNQR1CqKkKZkUis",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 16, 157, 240, 133, 84, 146, 63, 175, 189, 12, 128, 132, 108, 81, 199, 114, 31, 114, 61, 81, 154, 188, 166, 3, 153, 239, 198, 234, 219, 23, 151, 153, 155, 133, 196, 69, 54, 80, 141, 52, 31, 148, 131, 52, 162, 128, 0, 102, 165, 205, 217, 34, 8, 135, 158, 233, 166, 141, 200, 242, 100, 229, 75, 69, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1102(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_staked_split_destination_minimum_balance::old_behavior";
  test.test_nonce = 390;
  test.test_number =1102;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111YPN3oUFUP59LnoskuiyrpnEN6M6aTGVyfu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073707268734UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 42, 221, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 84, 186, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111YnhenaYm6FcDcF1qw9KBJuW9irMXAW5ozF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 102, 255, 244, 158, 12, 246, 51, 177, 55, 253, 163, 158, 235, 183, 82, 109, 146, 105, 167, 0, 175, 182, 135, 221, 54, 22, 54, 37, 20, 115, 247, 77, 250, 243, 152, 200, 182, 183, 59, 205, 25, 83, 153, 70, 46, 213, 108, 139, 252, 28, 195, 171, 134, 145, 74, 35, 77, 16, 117, 246, 91, 253, 239, 248, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 78, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 79, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1103(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[1] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[2] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[3] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[8] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[16] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[17] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[18] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[20] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[22] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[23] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[27] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[31] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[37] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[38] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[39] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[40] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[41] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[46] = fd_feature_offset(concurrent_replay_of_forks);
  test.test_name = "stake_instruction::tests::test_staked_split_destination_minimum_balance::old_behavior";
  test.test_nonce = 439;
  test.test_number =1103;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111Wn1ds34KYMHqX5KQp3eatH9DaL4ocLAeQX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 18446744073709551615UL;
test_acc->result_lamports = 18446744073707268734UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 42, 221, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 254, 84, 186, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111XBMEr9McFXkiLWTVqTyuNQR1CqKkKZkUis",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 175, 162, 56, 201, 236, 7, 179, 173, 28, 35, 22, 139, 240, 249, 47, 249, 188, 133, 118, 235, 48, 228, 195, 33, 139, 254, 116, 97, 155, 153, 43, 250, 179, 139, 2, 91, 6, 4, 129, 204, 5, 157, 170, 94, 210, 201, 52, 197, 10, 84, 167, 162, 55, 115, 151, 87, 207, 130, 228, 216, 42, 251, 24, 97, 1, 0, 1, 3, 0, 0, 0, 0, 0, 0, 0, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1104(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[1] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[3] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[7] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[13] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[14] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[25] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[26] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[27] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[30] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[33] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[34] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[35] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[39] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[45] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(compact_vote_state_updates);
  test.test_name = "stake_instruction::tests::test_stake_get_minimum_delegation::new_behavior";
  test.test_nonce = 132;
  test.test_number =1104;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111NKuyBkoGdZZSLyPbJEetheRhMjezgQv9mH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 13, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1105(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_get_minimum_delegation::new_behavior";
  test.test_nonce = 169;
  test.test_number =1105;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111NKuyBkoGdZZSLyPbJEetheRhMjezgQv9mH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 13, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1106(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_get_minimum_delegation::old_behavior";
  test.test_nonce = 171;
  test.test_number =1106;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111NjFaAs6ZLk2KAQXgKezDBmhUzEuwPeVz5d",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 13, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1107(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[4] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[5] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[6] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[7] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[8] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[9] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[10] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[11] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[17] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[18] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[19] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[20] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[21] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[22] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[23] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[24] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[33] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[34] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[35] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[39] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[46] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.test_name = "stake_instruction::tests::test_stake_get_minimum_delegation::old_behavior";
  test.test_nonce = 158;
  test.test_number =1107;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111NjFaAs6ZLk2KAQXgKezDBmhUzEuwPeVz5d",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 0, 54, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 13, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1108(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 233;
  test.test_number =1108;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FmwyArjV9pQM136ZQSG3qEqbTng593brT3hvLFf2LnMu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1109(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 281;
  test.test_number =1109;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FmwyArjV9pQM136ZQSG3qEqbTng593brT3hvLFf2LnMu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1110(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 296;
  test.test_number =1110;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FmwyArjV9pQM136ZQSG3qEqbTng593brT3hvLFf2LnMu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1111(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 317;
  test.test_number =1111;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FmwyArjV9pQM136ZQSG3qEqbTng593brT3hvLFf2LnMu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 201;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 201;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1112(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 323;
  test.test_number =1112;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FmwyArjV9pQM136ZQSG3qEqbTng593brT3hvLFf2LnMu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 199;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 199;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 219, 135, 83, 89, 221, 163, 121, 70, 63, 214, 148, 218, 149, 59, 202, 191, 252, 48, 191, 0, 46, 203, 45, 249, 112, 38, 234, 161, 205, 251, 211, 216, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 163, 4, 11, 156, 255, 6, 252, 89, 62, 243, 66, 220, 172, 204, 57, 106, 38, 174, 27, 139, 158, 35, 57, 1, 188, 245, 115, 160, 202, 108, 92, 104};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1113(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 206;
  test.test_number =1113;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JBvyEpXGVozuwzqnvS5KGmuX55ULMsWJQHcD9U2s1jiJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 204, 14, 222, 119, 182, 239, 211, 7, 179, 52, 204, 40, 121, 255, 164, 28, 211, 195, 9, 67, 165, 131, 202, 111, 227, 89, 27, 16, 99, 198, 80, 157};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1114(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 238;
  test.test_number =1114;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JBvyEpXGVozuwzqnvS5KGmuX55ULMsWJQHcD9U2s1jiJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 204, 14, 222, 119, 182, 239, 211, 7, 179, 52, 204, 40, 121, 255, 164, 28, 211, 195, 9, 67, 165, 131, 202, 111, 227, 89, 27, 16, 99, 198, 80, 157};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1115(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 270;
  test.test_number =1115;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JBvyEpXGVozuwzqnvS5KGmuX55ULMsWJQHcD9U2s1jiJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 204, 14, 222, 119, 182, 239, 211, 7, 179, 52, 204, 40, 121, 255, 164, 28, 211, 195, 9, 67, 165, 131, 202, 111, 227, 89, 27, 16, 99, 198, 80, 157};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1116(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 283;
  test.test_number =1116;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JBvyEpXGVozuwzqnvS5KGmuX55ULMsWJQHcD9U2s1jiJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 201;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 201;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 204, 14, 222, 119, 182, 239, 211, 7, 179, 52, 204, 40, 121, 255, 164, 28, 211, 195, 9, 67, 165, 131, 202, 111, 227, 89, 27, 16, 99, 198, 80, 157};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1117(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "stake_instruction::tests::test_stake_initialize::new_behavior";
  test.test_nonce = 305;
  test.test_number =1117;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JBvyEpXGVozuwzqnvS5KGmuX55ULMsWJQHcD9U2s1jiJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 199;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 199;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 255, 99, 130, 109, 215, 150, 32, 186, 245, 12, 30, 81, 149, 6, 65, 17, 12, 57, 38, 169, 191, 62, 89, 170, 238, 176, 103, 30, 20, 136, 82, 195, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 204, 14, 222, 119, 182, 239, 211, 7, 179, 52, 204, 40, 121, 255, 164, 28, 211, 195, 9, 67, 165, 131, 202, 111, 227, 89, 27, 16, 99, 198, 80, 157};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1118(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[6] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 278;
  test.test_number =1118;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9VeZJE4mGRLaZt9DdBaGshLVeJKTG8wxu5rTHYyJemW2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 144, 118, 109, 132, 233, 103, 71, 249, 11, 200, 224, 95, 185, 57, 158, 223, 247, 5, 128, 52, 206, 188, 186, 197, 39, 92, 215, 99, 244, 56, 195};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1119(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[6] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 298;
  test.test_number =1119;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9VeZJE4mGRLaZt9DdBaGshLVeJKTG8wxu5rTHYyJemW2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 144, 118, 109, 132, 233, 103, 71, 249, 11, 200, 224, 95, 185, 57, 158, 223, 247, 5, 128, 52, 206, 188, 186, 197, 39, 92, 215, 99, 244, 56, 195};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1120(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[6] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 313;
  test.test_number =1120;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9VeZJE4mGRLaZt9DdBaGshLVeJKTG8wxu5rTHYyJemW2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 144, 118, 109, 132, 233, 103, 71, 249, 11, 200, 224, 95, 185, 57, 158, 223, 247, 5, 128, 52, 206, 188, 186, 197, 39, 92, 215, 99, 244, 56, 195};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1121(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[6] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 334;
  test.test_number =1121;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9VeZJE4mGRLaZt9DdBaGshLVeJKTG8wxu5rTHYyJemW2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 201;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 201;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 144, 118, 109, 132, 233, 103, 71, 249, 11, 200, 224, 95, 185, 57, 158, 223, 247, 5, 128, 52, 206, 188, 186, 197, 39, 92, 215, 99, 244, 56, 195};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1122(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[6] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 347;
  test.test_number =1122;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9VeZJE4mGRLaZt9DdBaGshLVeJKTG8wxu5rTHYyJemW2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 199;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 199;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {153, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 126, 52, 57, 70, 2, 64, 252, 237, 204, 69, 220, 242, 134, 96, 12, 215, 4, 6, 158, 149, 20, 111, 24, 242, 17, 58, 25, 182, 30, 182, 199, 91, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 56, 144, 118, 109, 132, 233, 103, 71, 249, 11, 200, 224, 95, 185, 57, 158, 223, 247, 5, 128, 52, 206, 188, 186, 197, 39, 92, 215, 99, 244, 56, 195};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1123(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 182;
  test.test_number =1123;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HD11ZVE7824S4Ja7c6cCDvB4zncZWnuvKoxNXJLDN9PN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 84, 57, 196, 13, 113, 69, 150, 117, 19, 200, 86, 122, 238, 226, 124, 249, 184, 28, 122, 155, 237, 6, 78, 96, 8, 65, 215, 67, 88, 249, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 84, 57, 196, 13, 113, 69, 150, 117, 19, 200, 86, 122, 238, 226, 124, 249, 184, 28, 122, 155, 237, 6, 78, 96, 8, 65, 215, 67, 88, 249, 201};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1124(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_initialize::old_behavior";
  test.test_nonce = 188;
  test.test_number =1124;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HD11ZVE7824S4Ja7c6cCDvB4zncZWnuvKoxNXJLDN9PN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 84, 57, 196, 13, 113, 69, 150, 117, 19, 200, 86, 122, 238, 226, 124, 249, 184, 28, 122, 155, 237, 6, 78, 96, 8, 65, 215, 67, 88, 249, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 84, 57, 196, 13, 113, 69, 150, 117, 19, 200, 86, 122, 238, 226, 124, 249, 184, 28, 122, 155, 237, 6, 78, 96, 8, 65, 215, 67, 88, 249, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 116, 0, 0, 0, 0, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 240, 205, 248, 176, 241, 7, 238, 203, 109, 19, 236, 46, 254, 247, 30, 143, 234, 102, 101, 162, 94, 69, 67, 30, 163, 252, 37, 22, 112, 172, 211, 89, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 114, 84, 57, 196, 13, 113, 69, 150, 117, 19, 200, 86, 122, 238, 226, 124, 249, 184, 28, 122, 155, 237, 6, 78, 96, 8, 65, 215, 67, 88, 249, 201};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
