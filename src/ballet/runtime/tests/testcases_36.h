int test_875(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 332;
  test.test_number =875;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 123, 14, 229, 150, 225, 142, 8, 134, 103, 119, 152, 85, 18, 207, 52, 194, 167, 32, 159, 143, 216, 249, 132, 240, 49, 33, 166, 33, 88, 139, 207, 240, 222, 49, 248, 135, 230, 163, 67, 122, 255, 16, 103, 8, 34, 117, 187, 252, 115, 80, 149, 193, 131, 179, 177, 128, 194, 152, 80, 122, 220, 143, 15, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_876(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 83;
  test.test_number =876;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 210, 100, 47, 22, 109, 157, 109, 93, 206, 26, 59, 102, 124, 168, 175, 125, 44, 36, 167, 204, 217, 216, 162, 29, 142, 127, 25, 116, 159, 57, 75, 162, 1, 172, 85, 43, 106, 166, 42, 212, 32, 172, 175, 61, 123, 20, 112, 57, 235, 120, 49, 21, 136, 109, 24, 78, 178, 194, 83, 11, 45, 88, 110, 54, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_877(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 137;
  test.test_number =877;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 94, 225, 117, 110, 227, 96, 185, 103, 51, 30, 72, 30, 117, 108, 42, 115, 240, 232, 184, 248, 166, 164, 66, 14, 211, 150, 89, 117, 148, 24, 170, 223, 155, 97, 152, 50, 173, 172, 159, 228, 113, 153, 202, 52, 131, 203, 172, 125, 149, 72, 233, 4, 69, 68, 126, 207, 96, 253, 242, 64, 118, 192, 236, 216, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_878(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 167;
  test.test_number =878;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 114, 239, 33, 75, 52, 171, 122, 214, 124, 194, 90, 197, 223, 50, 178, 199, 42, 193, 199, 34, 188, 196, 28, 18, 55, 223, 161, 216, 220, 45, 3, 175, 50, 170, 243, 63, 243, 94, 108, 42, 10, 58, 139, 124, 194, 242, 161, 140, 181, 9, 43, 153, 157, 194, 217, 168, 223, 40, 218, 59, 85, 11, 133, 50, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_879(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 221;
  test.test_number =879;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 51, 216, 78, 203, 236, 180, 79, 48, 236, 136, 237, 45, 82, 255, 12, 182, 14, 14, 49, 21, 125, 98, 234, 232, 195, 114, 14, 127, 130, 144, 62, 156, 20, 229, 235, 109, 64, 104, 110, 192, 173, 241, 98, 236, 68, 243, 197, 206, 205, 143, 38, 108, 81, 222, 22, 185, 45, 242, 12, 191, 76, 141, 123, 119, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_880(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 267;
  test.test_number =880;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 11, 53, 218, 214, 133, 58, 43, 230, 21, 21, 208, 192, 192, 99, 90, 137, 238, 111, 114, 81, 29, 96, 230, 209, 222, 79, 252, 74, 246, 26, 17, 40, 213, 15, 68, 113, 218, 223, 95, 225, 117, 58, 79, 57, 186, 18, 102, 202, 118, 49, 17, 231, 104, 11, 62, 245, 234, 2, 178, 150, 173, 85, 118, 107, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_881(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 304;
  test.test_number =881;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 61, 221, 56, 14, 127, 197, 166, 231, 165, 203, 86, 243, 141, 84, 253, 145, 224, 22, 108, 188, 241, 214, 86, 25, 213, 221, 131, 165, 202, 118, 115, 40, 180, 219, 79, 70, 62, 186, 79, 174, 145, 47, 246, 76, 31, 198, 25, 143, 251, 203, 229, 123, 139, 217, 182, 181, 152, 231, 82, 53, 179, 217, 96, 205, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_882(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 137;
  test.test_number =882;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 47, 152, 75, 73, 116, 190, 101, 134, 65, 132, 36, 122, 108, 156, 224, 163, 217, 48, 96, 253, 178, 129, 139, 223, 15, 92, 233, 187, 247, 220, 107, 30, 48, 184, 120, 222, 21, 252, 114, 47, 130, 188, 113, 93, 156, 221, 46, 71, 68, 23, 214, 160, 239, 31, 39, 64, 109, 3, 184, 63, 60, 190, 35, 171, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_883(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 203;
  test.test_number =883;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 113, 18, 130, 84, 14, 94, 91, 25, 220, 81, 73, 8, 64, 30, 131, 229, 22, 95, 31, 197, 215, 141, 231, 161, 20, 38, 115, 224, 119, 197, 2, 8, 188, 44, 182, 232, 125, 5, 104, 179, 199, 250, 180, 218, 32, 201, 87, 146, 178, 112, 59, 148, 248, 170, 154, 66, 182, 168, 65, 49, 92, 13, 100, 77, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_884(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 269;
  test.test_number =884;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 227, 236, 238, 131, 27, 165, 190, 96, 217, 120, 42, 49, 20, 7, 62, 100, 205, 234, 59, 94, 71, 181, 154, 177, 81, 205, 232, 97, 137, 36, 203, 130, 211, 177, 175, 52, 146, 111, 224, 166, 51, 110, 218, 34, 93, 11, 73, 19, 254, 110, 149, 17, 145, 109, 33, 60, 151, 218, 148, 65, 173, 161, 249, 20, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_885(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 314;
  test.test_number =885;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 225, 132, 244, 27, 98, 144, 182, 6, 87, 244, 136, 216, 110, 104, 66, 35, 84, 194, 6, 149, 218, 190, 53, 30, 64, 90, 185, 51, 156, 86, 48, 8, 228, 41, 156, 108, 139, 156, 253, 14, 23, 229, 250, 84, 35, 193, 16, 221, 151, 95, 12, 101, 197, 167, 107, 197, 86, 84, 241, 159, 38, 173, 135, 77, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_886(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 348;
  test.test_number =886;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 30, 17, 119, 166, 216, 18, 122, 240, 182, 238, 124, 155, 104, 31, 195, 49, 70, 89, 115, 195, 191, 126, 5, 91, 56, 178, 191, 50, 208, 28, 89, 244, 22, 51, 26, 218, 86, 188, 186, 208, 49, 136, 54, 214, 18, 174, 197, 118, 36, 216, 159, 110, 105, 221, 24, 3, 252, 90, 9, 24, 30, 102, 240, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_887(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 151;
  test.test_number =887;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 55, 4, 231, 166, 200, 69, 107, 112, 125, 35, 52, 153, 218, 24, 75, 11, 2, 111, 22, 81, 46, 177, 87, 46, 18, 34, 138, 3, 214, 188, 247, 49, 212, 27, 158, 181, 169, 186, 132, 168, 202, 248, 62, 82, 107, 16, 76, 210, 223, 255, 201, 247, 153, 167, 127, 129, 60, 53, 26, 169, 171, 252, 153, 38, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_888(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 187;
  test.test_number =888;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 15, 96, 33, 113, 208, 39, 134, 50, 229, 163, 226, 247, 194, 125, 96, 150, 85, 243, 246, 115, 69, 93, 3, 238, 206, 38, 82, 194, 138, 151, 180, 73, 229, 89, 116, 176, 200, 59, 235, 39, 163, 33, 173, 213, 137, 143, 138, 23, 1, 254, 93, 200, 116, 146, 5, 229, 161, 15, 206, 72, 144, 195, 206, 1, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_889(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 252;
  test.test_number =889;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 68, 7, 247, 13, 168, 168, 44, 216, 134, 161, 153, 100, 137, 198, 182, 232, 166, 205, 113, 162, 253, 15, 145, 200, 98, 150, 149, 119, 122, 226, 63, 23, 238, 121, 155, 10, 251, 64, 8, 136, 35, 130, 46, 93, 39, 144, 172, 253, 127, 144, 9, 116, 241, 33, 79, 57, 249, 213, 147, 187, 29, 137, 113, 124, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_890(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 287;
  test.test_number =890;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 218, 225, 201, 145, 254, 28, 23, 84, 73, 92, 206, 72, 215, 100, 69, 96, 140, 219, 232, 241, 230, 206, 191, 128, 142, 177, 209, 166, 245, 146, 165, 252, 103, 117, 72, 239, 101, 133, 86, 173, 11, 231, 130, 3, 147, 74, 45, 167, 105, 206, 54, 210, 140, 18, 191, 5, 92, 117, 3, 210, 228, 152, 41, 40, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_891(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 308;
  test.test_number =891;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r7fKmhv5tMUK6mpis4zfpVXm7GR1agRay8abznFeJHK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FgvX5XeawTTCytH6F8p9vG7bSmABWGZrfmnerfHjKHXG",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 77, 129, 152, 116, 82, 216, 148, 177, 135, 29, 141, 115, 37, 146, 250, 40, 151, 111, 16, 243, 237, 77, 15, 116, 21, 120, 112, 161, 252, 105, 153, 176, 102, 100, 188, 131, 234, 198, 32, 168, 222, 95, 43, 17, 147, 143, 34, 200, 63, 23, 177, 32, 218, 214, 169, 242, 191, 130, 14, 88, 164, 182, 114, 119, 1, 0, 1, 3, 86, 223, 108, 244, 250, 191, 159, 237, 53, 147, 166, 211, 183, 249, 200, 44, 51, 68, 170, 184, 178, 191, 64, 148, 106, 68, 238, 230, 76, 173, 87, 30, 218, 61, 200, 61, 31, 234, 14, 237, 180, 142, 254, 30, 150, 150, 191, 139, 160, 15, 22, 213, 7, 245, 51, 221, 142, 139, 3, 16, 103, 55, 165, 139, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_892(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[5] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[6] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[17] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[18] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[23] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[26] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[39] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 199;
  test.test_number =892;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r4jQfE9eoKkSqs8Ct7qVn6SwRVu8tL1uqTgFbt7vks5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FuwyCFMbYTVQmX1ohcWcZrnBdQUtR6Znwjm4FULjrWYT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 201, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 190, 207, 167, 21, 227, 184, 115, 32, 168, 140, 48, 52, 136, 148, 168, 201, 211, 38, 189, 254, 11, 98, 115, 15, 95, 22, 68, 150, 79, 103, 120, 232, 130, 249, 175, 255, 143, 55, 162, 143, 93, 113, 215, 28, 78, 108, 30, 97, 238, 131, 139, 216, 62, 94, 160, 172, 111, 53, 135, 138, 5, 123, 25, 32, 1, 0, 1, 3, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 221, 147, 248, 247, 182, 190, 200, 93, 192, 17, 100, 70, 74, 166, 25, 151, 248, 236, 195, 109, 153, 232, 159, 29, 193, 54, 40, 171, 126, 138, 100, 28, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_893(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 273;
  test.test_number =893;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ArCxhTFRmHDrtkiAhHwHz1oXt7eCW3ZasgzJCyCR9Ee8",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "5jfpEmx62h5VcaZwcuDE3jjNnQ9NCYMbB2yPW7aYGuj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 43, 114, 246, 89, 26, 201, 74, 204, 187, 10, 146, 12, 215, 113, 36, 236, 88, 204, 249, 205, 208, 22, 213, 142, 24, 16, 42, 46, 114, 22, 226, 121, 105, 136, 61, 110, 109, 104, 163, 228, 37, 77, 215, 174, 214, 113, 127, 157, 67, 161, 220, 239, 248, 60, 165, 29, 150, 189, 105, 146, 120, 128, 182, 241, 1, 0, 1, 3, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 1, 54, 145, 200, 216, 163, 241, 171, 145, 39, 75, 24, 130, 100, 158, 17, 128, 251, 210, 90, 179, 117, 128, 244, 171, 100, 198, 50, 201, 173, 242, 246, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_894(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[5] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[6] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[17] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[18] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[23] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[26] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[39] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 109;
  test.test_number =894;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r4jQfE9eoKkSqs8Ct7qVn6SwRVu8tL1uqTgFbt7vks5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FuwyCFMbYTVQmX1ohcWcZrnBdQUtR6Znwjm4FULjrWYT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 24, 182, 172, 192, 144, 211, 171, 218, 160, 187, 86, 124, 80, 38, 210, 220, 239, 174, 30, 125, 16, 183, 135, 192, 69, 132, 175, 215, 83, 116, 138, 241, 120, 140, 233, 131, 191, 78, 207, 59, 63, 224, 237, 199, 250, 71, 88, 181, 55, 37, 105, 34, 64, 244, 101, 21, 43, 123, 1, 26, 58, 0, 214, 72, 1, 0, 1, 3, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 221, 147, 248, 247, 182, 190, 200, 93, 192, 17, 100, 70, 74, 166, 25, 151, 248, 236, 195, 109, 153, 232, 159, 29, 193, 54, 40, 171, 126, 138, 100, 28, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_895(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 183;
  test.test_number =895;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ArCxhTFRmHDrtkiAhHwHz1oXt7eCW3ZasgzJCyCR9Ee8",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "5jfpEmx62h5VcaZwcuDE3jjNnQ9NCYMbB2yPW7aYGuj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 62, 253, 165, 149, 21, 37, 144, 122, 145, 219, 13, 164, 159, 155, 188, 207, 46, 178, 232, 207, 169, 103, 2, 102, 220, 170, 220, 187, 107, 88, 52, 87, 189, 182, 129, 232, 35, 129, 154, 78, 240, 15, 58, 28, 155, 215, 10, 245, 36, 214, 105, 204, 58, 124, 240, 187, 165, 252, 213, 218, 179, 27, 251, 213, 1, 0, 1, 3, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 1, 54, 145, 200, 216, 163, 241, 171, 145, 39, 75, 24, 130, 100, 158, 17, 128, 251, 210, 90, 179, 117, 128, 244, 171, 100, 198, 50, 201, 173, 242, 246, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_896(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[5] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[6] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[17] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[18] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[23] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[26] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[39] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 242;
  test.test_number =896;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r4jQfE9eoKkSqs8Ct7qVn6SwRVu8tL1uqTgFbt7vks5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FuwyCFMbYTVQmX1ohcWcZrnBdQUtR6Znwjm4FULjrWYT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 177, 108, 152, 171, 190, 57, 184, 125, 99, 131, 7, 107, 55, 120, 148, 204, 192, 150, 20, 176, 124, 150, 51, 58, 205, 62, 129, 34, 236, 107, 159, 119, 73, 3, 22, 219, 183, 229, 81, 205, 213, 136, 43, 213, 210, 149, 60, 96, 98, 166, 184, 114, 57, 180, 10, 6, 247, 33, 44, 94, 88, 230, 139, 151, 1, 0, 1, 3, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 221, 147, 248, 247, 182, 190, 200, 93, 192, 17, 100, 70, 74, 166, 25, 151, 248, 236, 195, 109, 153, 232, 159, 29, 193, 54, 40, 171, 126, 138, 100, 28, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_897(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 315;
  test.test_number =897;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ArCxhTFRmHDrtkiAhHwHz1oXt7eCW3ZasgzJCyCR9Ee8",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "5jfpEmx62h5VcaZwcuDE3jjNnQ9NCYMbB2yPW7aYGuj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 191, 209, 180, 62, 115, 240, 87, 10, 21, 80, 193, 15, 166, 131, 233, 153, 18, 101, 165, 82, 210, 53, 168, 166, 59, 200, 168, 52, 169, 180, 212, 200, 41, 198, 65, 57, 73, 182, 48, 227, 46, 156, 82, 114, 137, 208, 248, 192, 197, 3, 225, 50, 94, 222, 241, 55, 86, 42, 164, 149, 224, 14, 135, 64, 1, 0, 1, 3, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 1, 54, 145, 200, 216, 163, 241, 171, 145, 39, 75, 24, 130, 100, 158, 17, 128, 251, 210, 90, 179, 117, 128, 244, 171, 100, 198, 50, 201, 173, 242, 246, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_898(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[5] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[6] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[17] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[18] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[23] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[26] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[31] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[39] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 168;
  test.test_number =898;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6r4jQfE9eoKkSqs8Ct7qVn6SwRVu8tL1uqTgFbt7vks5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FuwyCFMbYTVQmX1ohcWcZrnBdQUtR6Znwjm4FULjrWYT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 144, 165, 110, 38, 88, 186, 27, 86, 104, 19, 32, 1, 93, 186, 56, 166, 233, 216, 32, 89, 237, 144, 196, 78, 96, 213, 11, 112, 216, 196, 17, 40, 195, 77, 84, 187, 74, 226, 208, 241, 171, 90, 177, 22, 12, 9, 211, 139, 95, 192, 104, 74, 16, 208, 98, 251, 113, 20, 238, 254, 23, 237, 131, 203, 1, 0, 1, 3, 86, 220, 28, 245, 192, 156, 47, 152, 77, 82, 165, 242, 115, 213, 42, 176, 216, 32, 249, 45, 220, 124, 143, 41, 84, 95, 71, 63, 99, 43, 26, 108, 221, 147, 248, 247, 182, 190, 200, 93, 192, 17, 100, 70, 74, 166, 25, 151, 248, 236, 195, 109, 153, 232, 159, 29, 193, 54, 40, 171, 126, 138, 100, 28, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_899(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 216;
  test.test_number =899;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ArCxhTFRmHDrtkiAhHwHz1oXt7eCW3ZasgzJCyCR9Ee8",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "5jfpEmx62h5VcaZwcuDE3jjNnQ9NCYMbB2yPW7aYGuj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 178, 168, 154, 173, 228, 250, 30, 236, 132, 212, 127, 253, 38, 220, 75, 76, 94, 200, 207, 64, 54, 241, 139, 121, 114, 240, 133, 106, 125, 129, 59, 113, 144, 170, 156, 180, 179, 5, 161, 152, 182, 110, 187, 101, 239, 85, 71, 233, 138, 164, 36, 171, 120, 119, 157, 26, 117, 59, 162, 98, 244, 91, 81, 128, 1, 0, 1, 3, 146, 84, 42, 96, 167, 22, 229, 191, 163, 129, 127, 111, 76, 109, 0, 198, 178, 105, 44, 113, 245, 93, 221, 5, 143, 166, 165, 142, 204, 162, 116, 93, 1, 54, 145, 200, 216, 163, 241, 171, 145, 39, 75, 24, 130, 100, 158, 17, 128, 251, 210, 90, 179, 117, 128, 244, 171, 100, 198, 50, 201, 173, 242, 246, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
