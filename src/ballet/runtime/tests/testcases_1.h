int test_0(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[5] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[8] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[11] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[15] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[16] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[17] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[18] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[19] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[22] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[23] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[24] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[25] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[26] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[30] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[31] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[32] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[33] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[39] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[40] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[41] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[42] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[43] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[44] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[45] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[46] = fd_feature_offset(credits_auto_rewind);
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 3;
  test.test_number =0;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "J9QybVjRRmrVT6zuoqwLxy1SZeUndtu6b17fn1UMUP33",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 186, 209, 1, 137, 119, 189, 255, 254, 243, 64, 198, 227, 242, 165, 109, 38, 45, 19, 254, 25, 175, 4, 133, 17, 176, 198, 230, 77, 46, 7, 230, 190, 67, 152, 63, 132, 3, 29, 238, 92, 42, 220, 254, 218, 88, 130, 133, 155, 87, 110, 189, 171, 18, 229, 178, 237, 154, 29, 80, 243, 232, 76, 90, 102, 1, 0, 1, 2, 254, 190, 111, 7, 189, 171, 69, 99, 195, 111, 114, 178, 10, 156, 139, 110, 169, 22, 85, 224, 50, 191, 35, 234, 60, 146, 94, 42, 237, 165, 75, 102, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 0;
  test.test_number =1;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4ARkUCGV3cUe27wXBs8GcLPK283zcz9BGmBophmcri9b",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 240, 186, 204, 24, 168, 125, 172, 247, 134, 8, 47, 212, 100, 68, 60, 227, 127, 209, 74, 27, 184, 200, 88, 235, 171, 37, 203, 15, 180, 31, 53, 169, 183, 54, 98, 105, 121, 245, 173, 124, 250, 60, 89, 83, 163, 9, 69, 110, 134, 47, 63, 84, 164, 63, 158, 242, 143, 140, 42, 246, 250, 112, 89, 191, 1, 0, 1, 2, 46, 253, 69, 185, 232, 222, 76, 71, 237, 30, 115, 180, 243, 116, 145, 98, 158, 37, 245, 77, 241, 66, 23, 14, 191, 167, 205, 112, 85, 139, 192, 142, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_2(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[1] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[2] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[3] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[4] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[7] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[8] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[21] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[22] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[24] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[25] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[26] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[30] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[31] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[32] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[33] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[34] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[39] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[40] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[43] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 16;
  test.test_number =2;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111ogCyDbaRMvkdsHB3qfdyFYaG1WtRUAfdh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111112D1oxKts8YPdTJRG5FzxTNpMtWmq8hkVx3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111112cMQwSC9qirWGjZM6gLGwW69X22mqwLLGP",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 48, 224, 181, 127, 241, 226, 252, 97, 225, 157, 117, 180, 157, 196, 46, 99, 20, 58, 136, 36, 44, 64, 8, 1, 136, 81, 137, 213, 124, 120, 173, 94, 74, 183, 228, 74, 4, 73, 15, 165, 117, 29, 83, 234, 3, 143, 145, 115, 150, 238, 79, 70, 8, 207, 178, 66, 206, 83, 209, 119, 193, 173, 188, 112, 67, 158, 27, 233, 93, 16, 118, 74, 64, 43, 114, 52, 109, 37, 37, 93, 207, 218, 217, 160, 236, 177, 99, 39, 1, 133, 179, 90, 114, 125, 174, 145, 164, 100, 210, 96, 240, 113, 92, 176, 105, 147, 56, 174, 17, 45, 30, 85, 113, 153, 118, 1, 15, 120, 39, 33, 227, 77, 101, 135, 2, 113, 235, 213, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_3(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 13;
  test.test_number =3;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111ogCyDbaRMvkdsHB3qfdyFYaG1WtRUAfdh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111112D1oxKts8YPdTJRG5FzxTNpMtWmq8hkVx3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111112cMQwSC9qirWGjZM6gLGwW69X22mqwLLGP",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 178, 165, 159, 10, 217, 229, 157, 107, 151, 209, 33, 232, 95, 65, 171, 141, 36, 122, 144, 5, 199, 53, 102, 26, 106, 144, 74, 247, 152, 122, 237, 64, 9, 24, 39, 247, 120, 173, 57, 116, 196, 80, 169, 139, 42, 98, 212, 54, 24, 215, 138, 95, 132, 144, 243, 249, 46, 99, 239, 120, 65, 101, 170, 142, 161, 222, 242, 180, 18, 170, 119, 34, 7, 107, 219, 20, 1, 106, 196, 246, 174, 223, 146, 16, 56, 136, 74, 174, 235, 142, 3, 143, 28, 128, 51, 231, 136, 18, 7, 196, 144, 78, 141, 18, 27, 254, 7, 133, 247, 118, 159, 244, 88, 102, 174, 175, 219, 254, 214, 141, 113, 229, 65, 94, 130, 80, 89, 130, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_4(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[1] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[2] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[6] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[7] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[8] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[9] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[17] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[18] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[19] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[20] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[21] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[22] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[25] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[26] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[27] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[28] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[31] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[37] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[38] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[42] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[43] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[44] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[45] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[46] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 12;
  test.test_number =4;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7DECKteHDY3KcUpzYsPe7VBJzqoMigDBwSyUrFbGeKHB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 171, 145, 158, 41, 145, 81, 74, 173, 126, 220, 216, 252, 133, 33, 79, 237, 68, 202, 40, 1, 179, 189, 134, 118, 156, 224, 222, 14, 217, 216, 123, 210, 247, 132, 106, 245, 240, 6, 233, 216, 31, 174, 44, 240, 65, 24, 111, 116, 66, 51, 167, 80, 52, 129, 126, 17, 89, 7, 182, 6, 87, 19, 225, 187, 1, 0, 1, 2, 92, 72, 2, 222, 119, 150, 237, 107, 41, 80, 3, 55, 224, 105, 202, 25, 51, 248, 96, 79, 142, 72, 143, 129, 46, 178, 34, 21, 59, 188, 148, 42, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_5(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 3;
  test.test_number =5;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6pzHuYwj2SvrtuNkCgfuoAcV7oiyGmvv6d3QGtaBNCte",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 118, 188, 231, 202, 175, 29, 191, 126, 22, 40, 85, 20, 196, 184, 201, 114, 43, 76, 11, 200, 28, 13, 215, 212, 178, 81, 45, 97, 160, 231, 39, 99, 25, 107, 51, 99, 66, 39, 213, 34, 240, 139, 44, 176, 241, 230, 240, 215, 40, 162, 129, 131, 9, 58, 201, 202, 240, 88, 232, 109, 33, 119, 5, 36, 1, 0, 1, 2, 86, 149, 131, 41, 15, 150, 147, 81, 81, 238, 73, 163, 46, 2, 98, 13, 202, 211, 194, 21, 160, 247, 120, 186, 110, 133, 94, 42, 106, 194, 157, 7, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_6(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 16;
  test.test_number =6;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6pzHuYwj2SvrtuNkCgfuoAcV7oiyGmvv6d3QGtaBNCte",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111115q4EpJaTXAZWpCg3J2zppWGSZ46KXozzo9",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 37, 148, 242, 171, 82, 190, 219, 172, 174, 127, 147, 6, 191, 51, 59, 94, 158, 164, 184, 86, 241, 138, 245, 255, 182, 146, 188, 132, 216, 222, 114, 32, 24, 74, 53, 154, 187, 35, 38, 73, 166, 142, 182, 46, 143, 63, 121, 10, 114, 203, 157, 57, 66, 86, 33, 26, 10, 160, 254, 174, 31, 23, 46, 217, 117, 161, 238, 66, 91, 115, 149, 32, 83, 197, 0, 130, 19, 183, 98, 193, 57, 30, 182, 25, 157, 129, 247, 234, 223, 246, 190, 209, 28, 176, 179, 2, 241, 162, 111, 2, 35, 0, 158, 187, 130, 119, 91, 115, 128, 65, 152, 41, 148, 85, 248, 198, 122, 212, 81, 104, 88, 91, 146, 147, 205, 100, 159, 150, 2, 1, 1, 3, 86, 149, 131, 41, 15, 150, 147, 81, 81, 238, 73, 163, 46, 2, 98, 13, 202, 211, 194, 21, 160, 247, 120, 186, 110, 133, 94, 42, 106, 194, 157, 7, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_7(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[5] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[10] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[11] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[12] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[13] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[16] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[17] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[20] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[21] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[24] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[25] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[26] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[27] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[28] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[29] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[39] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[40] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[41] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[42] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[45] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[46] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 24;
  test.test_number =7;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7DECKteHDY3KcUpzYsPe7VBJzqoMigDBwSyUrFbGeKHB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117qkFjr4u54stuNNUR8fRF8dNhaP35yvANs",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 84, 162, 125, 163, 52, 72, 219, 195, 172, 30, 92, 203, 38, 139, 43, 2, 222, 23, 220, 8, 13, 167, 22, 82, 59, 92, 36, 144, 5, 228, 218, 71, 127, 210, 38, 154, 68, 157, 191, 144, 101, 119, 56, 115, 194, 151, 226, 253, 226, 9, 47, 98, 98, 91, 158, 94, 223, 7, 251, 30, 139, 107, 125, 123, 1, 159, 41, 150, 44, 179, 3, 192, 100, 37, 132, 175, 218, 130, 190, 95, 75, 104, 138, 189, 30, 81, 185, 50, 163, 165, 223, 48, 37, 188, 255, 157, 128, 106, 98, 139, 210, 161, 78, 84, 249, 143, 22, 46, 207, 226, 64, 220, 48, 93, 210, 19, 29, 150, 148, 236, 134, 69, 239, 7, 30, 202, 97, 170, 2, 1, 1, 3, 92, 72, 2, 222, 119, 150, 237, 107, 41, 80, 3, 55, 224, 105, 202, 25, 51, 248, 96, 79, 142, 72, 143, 129, 46, 178, 34, 21, 59, 188, 148, 42, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_8(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[3] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[4] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[12] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[13] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[14] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[17] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[18] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[21] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[22] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[23] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[30] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[34] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[39] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[40] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[41] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[42] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[43] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[44] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[45] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[46] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 0;
  test.test_number =8;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Bi64x32apnC2B5bS4LqX4reQUTGF2FU4Nnvie2qa2Q9u",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 116, 83, 55, 124, 131, 157, 69, 233, 233, 204, 8, 217, 72, 243, 63, 157, 239, 80, 255, 189, 124, 165, 183, 141, 108, 253, 183, 212, 55, 175, 12, 130, 214, 239, 25, 252, 164, 31, 82, 77, 115, 187, 39, 50, 198, 246, 89, 152, 90, 114, 180, 149, 120, 18, 230, 76, 24, 91, 174, 68, 135, 57, 176, 87, 1, 0, 1, 2, 159, 27, 105, 182, 54, 29, 227, 53, 210, 166, 138, 44, 63, 227, 148, 94, 236, 18, 97, 54, 95, 186, 174, 64, 146, 187, 187, 178, 105, 69, 137, 56, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_9(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[1] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[4] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[5] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[6] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[7] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[8] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[9] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[10] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[13] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[17] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[22] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[23] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[24] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[25] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[26] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[29] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[38] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[41] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[42] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[44] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[45] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[46] = fd_feature_offset(compact_vote_state_updates);
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 13;
  test.test_number =9;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 82;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_10(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 17;
  test.test_number =10;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 82;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_11(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 5;
  test.test_number =11;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7LKna1wLb4HtniSzCvmsbKDiU7qZA6fwgCmbJRWMjbtg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 155, 2, 220, 169, 244, 112, 181, 161, 142, 209, 136, 199, 15, 232, 96, 183, 69, 67, 47, 87, 144, 64, 156, 140, 179, 164, 155, 141, 244, 219, 158, 25, 118, 26, 94, 144, 140, 2, 66, 191, 93, 135, 92, 218, 79, 0, 53, 64, 201, 69, 178, 206, 166, 46, 33, 217, 213, 105, 182, 237, 238, 58, 176, 199, 1, 0, 1, 2, 94, 25, 101, 224, 228, 18, 5, 100, 197, 51, 238, 37, 39, 122, 40, 100, 184, 57, 134, 1, 96, 198, 121, 251, 169, 60, 75, 166, 79, 178, 179, 237, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_12(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[1] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[2] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[5] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[6] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[7] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[9] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[10] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[11] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[12] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[13] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[14] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[15] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[16] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[18] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[19] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[20] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[23] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[24] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[25] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[26] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[27] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[28] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[31] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[32] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[33] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[34] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[35] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[36] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[37] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[38] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[39] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[40] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[41] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[42] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[43] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[46] = fd_feature_offset(cap_accounts_data_len);
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 2;
  test.test_number =12;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AsAkUR8oZPZDDFBWm6ARfiUjh7YFALhjxbfCQnPJJwEX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 137, 82, 27, 155, 43, 238, 197, 26, 159, 181, 28, 188, 24, 237, 80, 27, 160, 241, 93, 44, 227, 87, 24, 248, 175, 176, 32, 94, 248, 43, 159, 164, 252, 208, 156, 54, 103, 107, 163, 204, 181, 117, 243, 204, 4, 134, 178, 157, 33, 91, 159, 41, 14, 254, 77, 240, 51, 149, 210, 109, 123, 28, 238, 39, 1, 0, 1, 2, 146, 147, 63, 34, 103, 31, 25, 101, 117, 186, 48, 21, 59, 3, 151, 125, 129, 82, 117, 171, 15, 162, 208, 43, 22, 81, 61, 82, 127, 110, 208, 224, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_13(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 4;
  test.test_number =13;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 124, 35, 246, 239, 127, 109, 18, 235, 37, 173, 131, 207, 125, 6, 185, 235, 157, 103, 81, 236, 167, 208, 17, 229, 218, 154, 196, 110, 24, 88, 72, 227, 173, 9, 248, 203, 218, 43, 153, 61, 94, 103, 33, 175, 55, 214, 83, 86, 217, 122, 213, 223, 17, 31, 238, 102, 65, 101, 215, 79, 224, 66, 15, 26, 1, 0, 1, 2, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_14(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[1] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[2] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[3] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[4] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[5] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[6] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[9] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[10] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[11] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[12] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[16] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[17] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[23] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[24] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[25] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[26] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[27] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[28] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[29] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[30] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[31] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[32] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[33] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[34] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[35] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[36] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[37] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[38] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[39] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[40] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[41] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[42] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[46] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 25;
  test.test_number =14;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AsAkUR8oZPZDDFBWm6ARfiUjh7YFALhjxbfCQnPJJwEX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111116EPqoQskEM2Pddp8KTL9JdYEBZMGF3aq7V",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 92, 204, 183, 214, 193, 197, 59, 227, 1, 16, 177, 35, 8, 0, 123, 35, 129, 47, 197, 215, 90, 205, 254, 244, 132, 199, 253, 235, 221, 94, 230, 16, 144, 106, 194, 127, 210, 76, 130, 160, 22, 101, 116, 161, 95, 26, 101, 195, 109, 240, 236, 187, 35, 252, 135, 118, 249, 129, 133, 2, 39, 228, 200, 188, 116, 107, 205, 225, 157, 24, 222, 154, 19, 59, 88, 109, 88, 188, 16, 73, 50, 122, 182, 67, 208, 50, 149, 62, 34, 89, 101, 8, 112, 126, 118, 134, 84, 65, 192, 90, 236, 77, 10, 201, 12, 193, 92, 223, 53, 0, 63, 10, 42, 32, 66, 154, 155, 211, 141, 42, 63, 157, 54, 168, 29, 186, 100, 120, 2, 1, 1, 3, 146, 147, 63, 34, 103, 31, 25, 101, 117, 186, 48, 21, 59, 3, 151, 125, 129, 82, 117, 171, 15, 162, 208, 43, 22, 81, 61, 82, 127, 110, 208, 224, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_15(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[1] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[2] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[3] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[4] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[8] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[13] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[14] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[15] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[20] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[21] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[22] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[26] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[29] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[32] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[33] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[34] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[36] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[37] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[46] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 15;
  test.test_number =15;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AsAkUR8oZPZDDFBWm6ARfiUjh7YFALhjxbfCQnPJJwEX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111116EPqoQskEM2Pddp8KTL9JdYEBZMGF3aq7V",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111115q4EpJaTXAZWpCg3J2zppWGSZ46KXozzo9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111116djSnXB2wXVGT4xDLsfTnkp1p4cCxHAfRq",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 214, 163, 140, 135, 133, 112, 220, 74, 238, 16, 222, 208, 19, 27, 141, 201, 83, 233, 181, 170, 67, 133, 1, 120, 234, 104, 11, 40, 184, 157, 147, 199, 224, 202, 137, 76, 226, 221, 160, 132, 212, 79, 35, 230, 100, 105, 106, 119, 144, 231, 83, 83, 46, 178, 37, 192, 34, 123, 182, 199, 65, 14, 35, 233, 93, 209, 59, 230, 141, 36, 125, 216, 198, 153, 6, 154, 59, 42, 252, 242, 205, 142, 246, 229, 95, 225, 235, 207, 73, 120, 40, 249, 64, 88, 163, 143, 143, 215, 29, 51, 127, 92, 227, 212, 51, 199, 223, 218, 5, 12, 251, 74, 157, 11, 90, 170, 247, 29, 158, 49, 26, 139, 6, 11, 95, 189, 131, 93, 152, 215, 38, 179, 242, 162, 242, 53, 27, 117, 103, 139, 174, 149, 200, 187, 252, 186, 87, 13, 15, 254, 249, 244, 139, 149, 158, 177, 21, 168, 142, 73, 162, 131, 106, 220, 35, 254, 227, 218, 18, 74, 62, 241, 68, 44, 4, 255, 181, 89, 168, 18, 49, 173, 2, 138, 39, 254, 140, 166, 200, 73, 161, 155, 3, 2, 1, 4, 146, 147, 63, 34, 103, 31, 25, 101, 117, 186, 48, 21, 59, 3, 151, 125, 129, 82, 117, 171, 15, 162, 208, 43, 22, 81, 61, 82, 127, 110, 208, 224, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_16(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 27;
  test.test_number =16;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 29, 3, 224, 104, 40, 100, 133, 95, 65, 181, 232, 165, 138, 125, 130, 243, 211, 60, 190, 11, 155, 69, 186, 56, 237, 111, 150, 147, 68, 129, 8, 29, 247, 237, 233, 46, 36, 136, 50, 121, 92, 9, 187, 159, 199, 0, 175, 107, 39, 232, 220, 48, 11, 40, 13, 23, 15, 222, 73, 172, 93, 249, 32, 24, 22, 26, 63, 55, 112, 132, 176, 226, 193, 236, 174, 94, 89, 103, 226, 162, 106, 171, 38, 236, 49, 177, 241, 144, 92, 73, 90, 186, 62, 245, 204, 173, 187, 161, 163, 102, 49, 170, 179, 140, 146, 40, 22, 3, 150, 252, 46, 90, 178, 212, 204, 110, 83, 182, 130, 139, 27, 208, 147, 106, 209, 195, 89, 175, 2, 1, 1, 3, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_17(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 18;
  test.test_number =17;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119rSGfPZLcyCGzY4uYEL1fkzJr6fke9qKxb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 24, 233, 195, 245, 97, 12, 209, 30, 67, 151, 151, 252, 195, 141, 31, 248, 196, 75, 134, 235, 193, 42, 4, 249, 184, 156, 53, 251, 195, 186, 5, 158, 186, 148, 83, 159, 240, 199, 93, 66, 160, 140, 131, 24, 31, 34, 152, 63, 19, 85, 201, 166, 168, 100, 101, 30, 233, 66, 124, 145, 143, 23, 220, 67, 191, 118, 5, 157, 59, 30, 5, 211, 115, 253, 87, 209, 239, 79, 193, 186, 219, 78, 82, 107, 96, 204, 229, 97, 148, 31, 188, 32, 232, 146, 140, 207, 164, 187, 173, 203, 177, 103, 199, 201, 74, 133, 137, 133, 130, 236, 61, 29, 211, 6, 33, 229, 227, 254, 128, 224, 10, 199, 224, 3, 44, 176, 174, 189, 70, 193, 198, 102, 111, 132, 177, 140, 21, 156, 96, 224, 105, 63, 192, 160, 180, 50, 69, 6, 130, 54, 44, 1, 95, 138, 127, 28, 117, 72, 87, 28, 255, 234, 69, 91, 159, 43, 117, 233, 244, 175, 123, 183, 81, 187, 130, 249, 107, 255, 82, 106, 185, 246, 252, 119, 125, 123, 84, 34, 210, 198, 149, 157, 3, 2, 1, 4, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_18(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[3] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[4] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[5] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[6] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[7] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[8] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[9] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[10] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[11] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[12] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[13] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[14] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[18] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[22] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[23] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[24] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[25] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[26] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[27] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[28] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[29] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[31] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[34] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[35] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[36] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[37] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[38] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[44] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[45] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[46] = fd_feature_offset(curve25519_syscall_enabled);
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 6;
  test.test_number =18;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "81fotDFihmt1p6r1AdmBNpL9aEBXtLWtRZu6jjBPBozW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 140, 101, 237, 69, 216, 190, 112, 94, 130, 253, 51, 87, 170, 40, 83, 89, 36, 234, 208, 30, 130, 254, 28, 175, 159, 84, 104, 167, 58, 121, 252, 26, 22, 173, 234, 82, 127, 109, 125, 42, 223, 92, 124, 201, 243, 83, 252, 119, 207, 239, 138, 196, 98, 12, 53, 31, 87, 143, 34, 129, 132, 103, 217, 71, 1, 0, 1, 2, 104, 45, 176, 111, 95, 246, 145, 244, 165, 226, 98, 118, 205, 110, 210, 195, 124, 241, 24, 181, 39, 130, 225, 87, 143, 130, 14, 3, 37, 227, 35, 47, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_19(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 2;
  test.test_number =19;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 16, 74, 250, 48, 123, 120, 235, 41, 206, 252, 6, 68, 169, 179, 218, 187, 178, 165, 202, 126, 66, 38, 205, 240, 93, 9, 37, 94, 224, 85, 230, 171, 148, 114, 44, 121, 58, 9, 80, 88, 57, 247, 234, 104, 174, 12, 166, 234, 67, 104, 245, 100, 200, 206, 162, 174, 1, 190, 227, 119, 132, 212, 190, 1, 0, 1, 2, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_20(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[1] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[2] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[6] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[7] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[8] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[9] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[10] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[11] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[12] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[14] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[17] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[18] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[20] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[23] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[24] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[29] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[30] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[31] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[34] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[35] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[36] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[37] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[39] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[40] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[41] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[44] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[45] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[46] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 30;
  test.test_number =20;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "81fotDFihmt1p6r1AdmBNpL9aEBXtLWtRZu6jjBPBozW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111119rSGfPZLcyCGzY4uYEL1fkzJr6fke9qKxb",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 176, 236, 93, 222, 157, 251, 39, 209, 124, 207, 68, 234, 23, 227, 170, 26, 124, 156, 185, 133, 50, 52, 22, 90, 199, 209, 217, 141, 162, 95, 91, 167, 26, 10, 66, 22, 126, 210, 189, 204, 84, 135, 164, 10, 125, 71, 226, 78, 62, 113, 86, 80, 254, 171, 151, 29, 2, 226, 195, 20, 45, 106, 97, 37, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 45, 176, 111, 95, 246, 145, 244, 165, 226, 98, 118, 205, 110, 210, 195, 124, 241, 24, 181, 39, 130, 225, 87, 143, 130, 14, 3, 37, 227, 35, 47, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 75, 2, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 311;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_21(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 30;
  test.test_number =21;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 202, 50, 5, 97, 31, 229, 167, 67, 250, 36, 156, 82, 226, 241, 92, 110, 210, 20, 117, 165, 17, 183, 127, 201, 73, 87, 40, 81, 68, 42, 71, 38, 220, 5, 116, 114, 37, 40, 253, 159, 197, 13, 77, 74, 92, 167, 246, 69, 141, 47, 129, 93, 47, 136, 74, 131, 234, 202, 79, 80, 20, 234, 76, 195, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 75, 2, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 311;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_22(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[1] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[4] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[8] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[12] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[15] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[16] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[17] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[18] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[19] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[20] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[23] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[24] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[25] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[26] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[27] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[28] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[29] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[30] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[34] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[39] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[40] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[42] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[43] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[44] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[45] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 19;
  test.test_number =22;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "81fotDFihmt1p6r1AdmBNpL9aEBXtLWtRZu6jjBPBozW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111119rSGfPZLcyCGzY4uYEL1fkzJr6fke9qKxb",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 113, 199, 129, 3, 231, 108, 191, 34, 31, 0, 216, 14, 239, 122, 46, 14, 241, 217, 220, 70, 102, 56, 64, 42, 197, 36, 28, 207, 244, 19, 10, 228, 241, 199, 55, 10, 137, 65, 54, 193, 216, 206, 178, 88, 26, 165, 221, 110, 251, 105, 52, 211, 199, 58, 125, 53, 121, 49, 215, 42, 58, 249, 19, 170, 25, 117, 216, 168, 19, 110, 65, 142, 82, 87, 127, 205, 136, 113, 181, 157, 187, 44, 176, 62, 21, 82, 56, 30, 141, 190, 134, 204, 91, 138, 247, 176, 178, 234, 61, 117, 200, 57, 7, 190, 124, 55, 123, 128, 244, 162, 14, 141, 180, 138, 177, 62, 59, 200, 147, 114, 166, 37, 251, 114, 119, 78, 50, 83, 151, 7, 242, 2, 133, 88, 146, 37, 133, 233, 51, 20, 61, 102, 180, 16, 178, 60, 117, 245, 153, 73, 88, 231, 171, 167, 34, 131, 6, 245, 41, 166, 58, 67, 38, 28, 241, 223, 89, 248, 224, 190, 147, 31, 235, 63, 135, 104, 17, 233, 147, 136, 242, 41, 97, 77, 124, 97, 247, 22, 172, 252, 178, 210, 3, 2, 1, 4, 104, 45, 176, 111, 95, 246, 145, 244, 165, 226, 98, 118, 205, 110, 210, 195, 124, 241, 24, 181, 39, 130, 225, 87, 143, 130, 14, 3, 37, 227, 35, 47, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_23(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[1] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[7] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[8] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[9] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[10] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[14] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[15] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[16] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[20] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[21] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[22] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[23] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[31] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[32] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[35] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[36] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[37] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[38] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[39] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[40] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[41] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[42] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[43] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[44] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[45] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[46] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 27;
  test.test_number =23;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "81fotDFihmt1p6r1AdmBNpL9aEBXtLWtRZu6jjBPBozW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111119rSGfPZLcyCGzY4uYEL1fkzJr6fke9qKxb",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 0, 136, 72, 249, 93, 52, 217, 179, 120, 20, 115, 107, 114, 60, 123, 48, 160, 75, 170, 32, 45, 180, 50, 109, 64, 181, 132, 252, 68, 6, 24, 183, 231, 179, 37, 183, 128, 213, 104, 184, 138, 192, 209, 121, 64, 50, 249, 53, 66, 119, 41, 208, 241, 154, 144, 219, 222, 231, 32, 103, 75, 161, 93, 234, 136, 83, 103, 83, 200, 89, 112, 105, 127, 144, 82, 71, 202, 246, 170, 91, 82, 102, 12, 64, 215, 125, 128, 117, 243, 183, 174, 42, 5, 153, 139, 20, 194, 159, 15, 158, 176, 169, 171, 82, 101, 107, 221, 63, 131, 85, 44, 234, 75, 202, 27, 255, 203, 248, 90, 248, 190, 70, 46, 206, 170, 44, 251, 195, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 45, 176, 111, 95, 246, 145, 244, 165, 226, 98, 118, 205, 110, 210, 195, 124, 241, 24, 181, 39, 130, 225, 87, 143, 130, 14, 3, 37, 227, 35, 47, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_24(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[2] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[3] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[8] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[10] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[14] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[15] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[16] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[17] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[18] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[21] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[22] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[23] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[24] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[25] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[26] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[29] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[30] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[31] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[33] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[34] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[38] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[40] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[41] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[42] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[43] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[44] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[45] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[46] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 31;
  test.test_number =24;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "81fotDFihmt1p6r1AdmBNpL9aEBXtLWtRZu6jjBPBozW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111AFmseVrdL9f9oyCzZefL9tG6UbvhMPRAGw",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111Bs8Haw3nAsWf5hmLfKzc6PMEzcxUCKkVYK",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 35, 155, 37, 28, 187, 53, 156, 8, 116, 231, 94, 246, 233, 52, 76, 215, 215, 108, 40, 73, 187, 121, 182, 46, 217, 222, 146, 58, 33, 13, 225, 52, 40, 89, 54, 180, 40, 32, 78, 77, 116, 255, 192, 206, 248, 226, 166, 63, 173, 83, 126, 127, 27, 78, 88, 89, 36, 120, 127, 62, 72, 215, 89, 137, 170, 192, 61, 111, 191, 189, 236, 76, 193, 98, 200, 63, 169, 33, 202, 196, 36, 248, 186, 29, 118, 233, 97, 240, 87, 223, 237, 142, 100, 10, 84, 156, 231, 61, 35, 188, 209, 71, 64, 19, 16, 175, 43, 149, 10, 9, 247, 110, 245, 199, 141, 56, 8, 195, 150, 18, 251, 131, 152, 19, 92, 25, 171, 252, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 104, 45, 176, 111, 95, 246, 145, 244, 165, 226, 98, 118, 205, 110, 210, 195, 124, 241, 24, 181, 39, 130, 225, 87, 143, 130, 14, 3, 37, 227, 35, 47, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
