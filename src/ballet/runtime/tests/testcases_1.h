int test_0(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 1;
  test.test_number =0;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4n6ygWgFwKNbWgsjyv7KShEcinMdKXiYxPqrVPYgmZ5F",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 228, 210, 61, 141, 15, 127, 51, 63, 104, 88, 177, 17, 74, 67, 194, 227, 170, 178, 28, 180, 105, 106, 237, 158, 168, 150, 28, 187, 71, 12, 151, 144, 1, 109, 176, 164, 154, 199, 150, 85, 97, 139, 73, 160, 63, 18, 180, 92, 57, 46, 223, 136, 94, 195, 69, 171, 119, 35, 212, 165, 77, 143, 250, 152, 1, 0, 1, 2, 56, 32, 244, 168, 191, 156, 217, 158, 124, 79, 36, 93, 241, 165, 170, 170, 243, 168, 27, 140, 98, 179, 221, 246, 212, 132, 103, 86, 69, 147, 224, 166, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 13;
  test.test_number =1;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111ogCyDbaRMvkdsHB3qfdyFYaG1WtRUAfdh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111114DhpssPJgSi1YU7hCMfYt1BJ334YgsffXm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111113R2cuenjG5nFubqX9Wzuukdin2YfGQVzu5",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 135, 148, 14, 56, 98, 38, 219, 79, 95, 138, 89, 168, 162, 204, 153, 8, 140, 131, 125, 126, 236, 111, 201, 227, 144, 21, 95, 151, 135, 164, 232, 46, 156, 18, 122, 152, 88, 55, 29, 90, 173, 73, 182, 77, 158, 221, 65, 108, 82, 201, 100, 46, 160, 249, 214, 122, 183, 118, 42, 128, 148, 176, 59, 63, 229, 240, 112, 245, 13, 118, 210, 171, 198, 140, 235, 107, 149, 43, 67, 193, 13, 51, 117, 202, 26, 162, 9, 28, 145, 216, 54, 25, 224, 235, 179, 118, 215, 122, 245, 235, 224, 70, 201, 117, 108, 1, 177, 197, 238, 211, 28, 98, 157, 22, 132, 159, 186, 43, 167, 225, 17, 53, 213, 1, 68, 3, 70, 94, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_2(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 2;
  test.test_number =2;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "CqMMkp1UQ2AjDWnuq5r6GwmXfqNf22GQP7CUgMbMNHQD",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 122, 0, 236, 4, 165, 60, 62, 50, 229, 255, 186, 54, 161, 240, 167, 140, 35, 126, 69, 6, 160, 106, 8, 216, 21, 3, 9, 108, 56, 210, 124, 48, 123, 210, 241, 65, 43, 140, 227, 75, 38, 132, 247, 55, 14, 245, 86, 1, 80, 33, 60, 157, 176, 33, 251, 196, 66, 148, 145, 157, 242, 220, 121, 75, 1, 0, 1, 2, 175, 211, 116, 39, 13, 117, 37, 8, 57, 206, 107, 169, 106, 177, 130, 181, 63, 21, 1, 62, 188, 244, 242, 191, 221, 110, 196, 85, 102, 26, 8, 202, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_3(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 14;
  test.test_number =3;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "CqMMkp1UQ2AjDWnuq5r6GwmXfqNf22GQP7CUgMbMNHQD",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111115q4EpJaTXAZWpCg3J2zppWGSZ46KXozzo9",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 117, 31, 80, 13, 76, 107, 163, 214, 100, 2, 153, 148, 142, 18, 76, 112, 150, 233, 154, 98, 136, 140, 166, 132, 27, 21, 23, 52, 227, 147, 20, 232, 250, 72, 193, 169, 126, 213, 220, 163, 40, 167, 46, 34, 111, 84, 25, 225, 140, 147, 252, 77, 239, 44, 22, 97, 96, 131, 151, 69, 57, 44, 132, 85, 6, 60, 63, 207, 200, 75, 116, 200, 144, 124, 184, 57, 154, 45, 85, 232, 73, 98, 168, 242, 214, 108, 114, 224, 79, 186, 249, 153, 61, 122, 99, 83, 190, 241, 109, 252, 95, 125, 26, 47, 80, 23, 27, 243, 126, 99, 249, 173, 119, 210, 89, 209, 245, 206, 57, 242, 159, 10, 94, 180, 229, 63, 10, 148, 2, 1, 1, 3, 175, 211, 116, 39, 13, 117, 37, 8, 57, 206, 107, 169, 106, 177, 130, 181, 63, 21, 1, 62, 188, 244, 242, 191, 221, 110, 196, 85, 102, 26, 8, 202, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_4(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 18;
  test.test_number =4;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 82;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_5(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 6;
  test.test_number =5;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgDqSd8rgMb7TV24ZMH1DzfTB9jrqjXrv9Q2hu76U5gi",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 32, 180, 43, 72, 152, 79, 111, 75, 94, 204, 30, 254, 91, 180, 146, 85, 168, 104, 89, 16, 122, 163, 216, 185, 49, 233, 19, 146, 213, 36, 29, 165, 199, 90, 179, 79, 79, 160, 141, 228, 143, 239, 38, 201, 203, 255, 3, 190, 131, 13, 116, 247, 191, 177, 121, 103, 145, 239, 14, 144, 113, 174, 155, 230, 1, 0, 1, 2, 143, 197, 88, 193, 108, 252, 175, 195, 254, 219, 57, 217, 118, 211, 235, 74, 51, 127, 161, 163, 142, 171, 166, 1, 155, 130, 82, 244, 164, 81, 250, 215, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_6(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 0;
  test.test_number =6;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 247, 224, 14, 84, 11, 190, 162, 7, 198, 59, 87, 143, 23, 64, 117, 114, 169, 117, 54, 242, 237, 109, 212, 130, 133, 25, 34, 139, 182, 129, 131, 51, 22, 138, 151, 62, 168, 56, 8, 21, 148, 32, 37, 239, 211, 17, 113, 79, 232, 202, 99, 145, 62, 50, 109, 168, 90, 169, 46, 30, 4, 69, 78, 89, 1, 0, 1, 2, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_7(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 26;
  test.test_number =7;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111116djSnXB2wXVGT4xDLsfTnkp1p4cCxHAfRq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 104, 118, 187, 106, 80, 205, 142, 206, 218, 7, 1, 107, 5, 173, 234, 8, 246, 103, 151, 15, 86, 218, 249, 39, 134, 92, 230, 58, 252, 218, 160, 7, 82, 124, 56, 81, 26, 234, 116, 164, 178, 53, 155, 219, 89, 92, 13, 127, 87, 96, 81, 201, 236, 124, 203, 191, 2, 211, 176, 159, 132, 228, 242, 125, 141, 77, 135, 249, 50, 95, 22, 129, 141, 230, 158, 199, 164, 119, 226, 174, 69, 191, 121, 170, 76, 203, 127, 219, 186, 252, 194, 94, 151, 146, 62, 82, 253, 101, 109, 3, 21, 57, 73, 134, 181, 124, 26, 9, 171, 92, 187, 8, 89, 86, 168, 60, 106, 173, 2, 129, 141, 17, 80, 209, 238, 22, 7, 3, 2, 1, 1, 3, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_8(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 16;
  test.test_number =8;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111116djSnXB2wXVGT4xDLsfTnkp1p4cCxHAfRq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117qkFjr4u54stuNNUR8fRF8dNhaP35yvANs",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 39, 87, 72, 5, 7, 76, 144, 159, 123, 128, 136, 242, 42, 240, 231, 167, 187, 255, 175, 248, 77, 250, 159, 54, 194, 107, 117, 50, 219, 157, 165, 245, 192, 4, 53, 220, 49, 60, 4, 12, 187, 253, 64, 232, 137, 150, 7, 86, 120, 132, 120, 123, 51, 85, 206, 93, 25, 128, 31, 112, 184, 125, 123, 128, 40, 55, 96, 54, 192, 247, 150, 111, 235, 48, 211, 143, 244, 127, 202, 141, 214, 237, 118, 168, 204, 79, 240, 253, 213, 140, 133, 0, 225, 193, 167, 201, 211, 87, 54, 66, 27, 12, 222, 217, 192, 224, 60, 182, 209, 213, 202, 183, 215, 15, 95, 81, 212, 39, 71, 160, 90, 131, 99, 49, 72, 24, 225, 28, 39, 45, 167, 168, 14, 153, 52, 218, 153, 79, 131, 231, 14, 75, 189, 64, 43, 179, 2, 193, 254, 211, 235, 233, 115, 93, 238, 103, 87, 18, 205, 20, 59, 200, 87, 66, 173, 161, 121, 165, 140, 55, 207, 17, 151, 19, 19, 88, 206, 110, 120, 216, 238, 121, 128, 197, 226, 124, 233, 249, 181, 223, 35, 31, 3, 2, 1, 4, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_9(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 3;
  test.test_number =9;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 144, 178, 192, 7, 39, 252, 138, 33, 22, 46, 120, 178, 6, 1, 70, 174, 98, 170, 46, 128, 112, 5, 180, 232, 155, 220, 167, 235, 216, 12, 109, 110, 170, 114, 110, 134, 219, 175, 143, 250, 242, 36, 236, 224, 41, 25, 57, 13, 216, 103, 233, 55, 65, 10, 247, 72, 4, 52, 66, 99, 143, 107, 26, 226, 1, 0, 1, 2, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_10(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 30;
  test.test_number =10;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 212, 28, 1, 51, 178, 91, 242, 183, 142, 219, 221, 199, 206, 122, 63, 209, 130, 172, 48, 1, 234, 60, 185, 76, 203, 62, 134, 155, 154, 170, 59, 139, 132, 214, 42, 83, 35, 179, 141, 109, 254, 21, 29, 152, 174, 56, 58, 253, 160, 36, 84, 247, 248, 235, 233, 171, 154, 19, 105, 36, 187, 221, 232, 42, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 75, 2, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 311;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_11(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 17;
  test.test_number =11;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 91, 107, 4, 9, 28, 185, 115, 44, 56, 80, 126, 97, 24, 173, 78, 127, 114, 103, 198, 142, 87, 108, 216, 113, 102, 228, 174, 16, 89, 231, 91, 33, 243, 135, 51, 97, 218, 149, 232, 32, 170, 48, 35, 63, 25, 158, 152, 18, 214, 226, 115, 131, 141, 216, 157, 67, 1, 135, 108, 90, 203, 177, 70, 208, 126, 174, 138, 252, 37, 128, 245, 159, 59, 70, 40, 59, 40, 242, 112, 24, 141, 112, 10, 195, 91, 89, 15, 225, 184, 193, 73, 13, 24, 35, 91, 2, 82, 183, 69, 119, 236, 20, 181, 134, 30, 181, 125, 84, 70, 227, 243, 241, 78, 93, 216, 99, 2, 247, 184, 68, 190, 148, 98, 56, 94, 150, 235, 149, 235, 95, 179, 214, 225, 140, 23, 150, 146, 139, 240, 38, 21, 135, 152, 20, 136, 176, 131, 246, 235, 136, 65, 230, 51, 21, 206, 129, 212, 24, 79, 154, 247, 207, 179, 209, 182, 251, 114, 243, 174, 52, 231, 203, 223, 195, 183, 27, 31, 189, 217, 153, 154, 83, 81, 185, 248, 91, 29, 218, 19, 155, 114, 92, 3, 2, 1, 4, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_12(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 27;
  test.test_number =12;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 219, 172, 46, 79, 84, 124, 233, 106, 201, 184, 90, 193, 167, 56, 161, 105, 22, 2, 166, 130, 27, 138, 124, 238, 141, 125, 16, 76, 113, 26, 202, 63, 113, 11, 194, 139, 44, 16, 140, 116, 149, 103, 141, 215, 171, 47, 116, 219, 80, 6, 59, 202, 107, 124, 154, 59, 52, 203, 44, 138, 151, 103, 202, 0, 42, 94, 89, 163, 241, 11, 51, 245, 45, 0, 75, 32, 99, 252, 124, 187, 24, 141, 161, 114, 65, 91, 237, 86, 15, 177, 153, 205, 11, 183, 229, 106, 191, 213, 38, 236, 56, 174, 8, 14, 34, 103, 141, 4, 167, 78, 169, 140, 186, 51, 44, 209, 247, 84, 68, 91, 10, 3, 113, 1, 136, 0, 213, 6, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_13(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 31;
  test.test_number =13;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111D596YFweJQuHY1BbjazZYmAbt8jJL2VzVM",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 36, 120, 76, 129, 212, 27, 17, 224, 92, 30, 93, 73, 246, 25, 47, 242, 234, 220, 151, 226, 34, 2, 181, 226, 70, 67, 119, 9, 149, 29, 209, 67, 185, 68, 155, 222, 7, 44, 12, 88, 105, 39, 139, 159, 101, 91, 236, 221, 120, 95, 20, 110, 136, 32, 62, 250, 250, 134, 227, 105, 153, 131, 86, 213, 241, 63, 161, 224, 235, 97, 192, 59, 189, 181, 91, 39, 133, 81, 236, 62, 233, 235, 10, 21, 9, 157, 246, 112, 154, 209, 218, 36, 33, 200, 142, 222, 234, 4, 68, 55, 13, 171, 196, 157, 150, 245, 140, 70, 60, 151, 59, 141, 44, 147, 140, 39, 251, 101, 71, 213, 112, 227, 171, 72, 67, 118, 152, 210, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_14(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 4;
  test.test_number =14;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 162, 12, 171, 91, 4, 1, 250, 13, 39, 174, 31, 47, 35, 134, 233, 166, 12, 219, 94, 123, 152, 50, 92, 11, 25, 65, 42, 137, 148, 111, 158, 162, 106, 52, 144, 202, 3, 186, 175, 194, 86, 79, 0, 241, 215, 193, 206, 116, 98, 4, 62, 78, 111, 79, 136, 161, 117, 234, 90, 129, 252, 158, 21, 250, 1, 0, 1, 2, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_15(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 29;
  test.test_number =15;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 155, 248, 35, 211, 18, 81, 208, 121, 186, 40, 69, 244, 198, 34, 3, 47, 114, 234, 37, 73, 7, 95, 216, 193, 201, 227, 235, 94, 76, 160, 34, 240, 67, 25, 194, 65, 219, 0, 125, 237, 109, 162, 214, 149, 144, 204, 132, 47, 175, 165, 244, 228, 172, 148, 15, 9, 77, 165, 223, 140, 21, 197, 89, 149, 1, 0, 1, 2, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 75, 2, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 245;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_16(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 15;
  test.test_number =16;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 155, 251, 75, 214, 105, 245, 43, 178, 140, 242, 110, 214, 126, 42, 22, 32, 137, 20, 11, 101, 92, 44, 223, 211, 42, 76, 121, 134, 180, 130, 248, 193, 168, 20, 162, 173, 215, 141, 78, 175, 247, 12, 117, 29, 96, 19, 255, 6, 149, 21, 160, 114, 3, 16, 25, 119, 219, 194, 67, 0, 101, 241, 135, 211, 149, 57, 103, 58, 165, 178, 201, 236, 244, 28, 73, 53, 138, 121, 15, 74, 21, 77, 234, 158, 45, 173, 14, 79, 186, 57, 239, 184, 25, 186, 239, 70, 86, 13, 201, 221, 215, 99, 30, 113, 176, 69, 175, 50, 137, 137, 115, 205, 225, 224, 224, 162, 166, 173, 187, 152, 158, 29, 81, 204, 181, 205, 124, 144, 2, 1, 1, 3, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_17(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 25;
  test.test_number =17;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 155, 229, 147, 68, 239, 159, 166, 48, 42, 74, 109, 203, 174, 8, 195, 56, 144, 107, 36, 183, 247, 100, 48, 185, 42, 188, 63, 204, 13, 119, 105, 26, 220, 135, 17, 134, 230, 185, 137, 243, 168, 111, 211, 169, 173, 62, 32, 71, 66, 106, 230, 84, 113, 214, 19, 16, 17, 149, 210, 92, 188, 91, 150, 123, 84, 114, 214, 153, 215, 191, 125, 150, 117, 75, 44, 144, 134, 169, 225, 20, 166, 241, 201, 78, 105, 3, 59, 52, 29, 85, 135, 65, 51, 180, 33, 206, 100, 191, 130, 132, 110, 122, 114, 239, 114, 44, 9, 96, 44, 127, 45, 252, 89, 163, 61, 177, 41, 8, 100, 138, 178, 216, 131, 206, 166, 39, 37, 88, 2, 1, 1, 3, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_18(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_create_ok";
  test.test_nonce = 5;
  test.test_number =18;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FvJmp1DdrNZmhyXeBAjAzd3HBun1421WgATyRrxrygii",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 77, 148, 38, 184, 40, 86, 56, 155, 21, 49, 106, 7, 139, 5, 209, 51, 243, 235, 246, 103, 50, 46, 45, 13, 212, 22, 200, 250, 45, 158, 23, 74, 49, 39, 57, 237, 222, 211, 150, 180, 11, 189, 238, 142, 194, 252, 239, 239, 165, 136, 106, 73, 12, 220, 250, 154, 137, 152, 201, 237, 40, 59, 183, 63, 1, 0, 1, 2, 221, 171, 126, 209, 144, 64, 146, 255, 243, 115, 115, 40, 65, 225, 59, 66, 217, 149, 143, 248, 233, 9, 37, 77, 168, 22, 131, 54, 152, 211, 190, 95, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_19(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 9;
  test.test_number =19;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FxN7F1UByWojiQciL2uuPiir1Qi8xcMDVwQr8X7Tto8m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 167, 98, 37, 221, 152, 147, 136, 224, 254, 244, 101, 227, 72, 151, 164, 107, 147, 199, 71, 201, 232, 205, 100, 191, 89, 36, 139, 102, 163, 195, 225, 124, 228, 178, 214, 39, 139, 123, 60, 248, 147, 45, 160, 13, 218, 121, 187, 249, 3, 247, 233, 145, 167, 223, 190, 18, 147, 65, 216, 238, 104, 87, 188, 187, 1, 0, 1, 2, 222, 50, 109, 140, 67, 18, 42, 244, 110, 216, 141, 169, 253, 14, 76, 211, 69, 15, 80, 41, 128, 23, 181, 26, 185, 236, 62, 88, 186, 35, 109, 146, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_20(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 20;
  test.test_number =20;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FxN7F1UByWojiQciL2uuPiir1Qi8xcMDVwQr8X7Tto8m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 222, 50, 109, 140, 67, 18, 42, 244, 110, 216, 141, 169, 253, 14, 76, 211, 69, 15, 80, 41, 128, 23, 181, 26, 185, 236, 62, 88, 186, 35, 109, 146, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 115;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_21(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 19;
  test.test_number =21;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4AxyPGZmfXuJNjLrkfL9TDXRW6JwnYoneArDdohStQ3z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 221, 186, 164, 4, 250, 38, 228, 147, 37, 2, 214, 180, 30, 184, 190, 146, 130, 233, 217, 147, 197, 204, 123, 171, 12, 19, 251, 18, 131, 126, 68, 211, 153, 43, 11, 8, 137, 84, 131, 51, 115, 232, 40, 123, 232, 233, 130, 254, 74, 232, 98, 167, 81, 24, 203, 105, 227, 131, 138, 35, 223, 221, 142, 187, 1, 0, 1, 2, 47, 32, 147, 113, 245, 159, 161, 113, 8, 168, 232, 8, 209, 124, 89, 142, 13, 7, 120, 159, 46, 103, 71, 197, 91, 71, 188, 23, 88, 188, 103, 241, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 293;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_22(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 8;
  test.test_number =22;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4AxyPGZmfXuJNjLrkfL9TDXRW6JwnYoneArDdohStQ3z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 30, 148, 164, 10, 223, 244, 229, 176, 26, 232, 97, 245, 35, 81, 38, 49, 125, 57, 223, 142, 181, 142, 49, 242, 88, 32, 93, 34, 22, 252, 189, 115, 197, 244, 123, 96, 53, 229, 254, 25, 40, 211, 14, 38, 99, 74, 212, 77, 27, 21, 16, 27, 119, 209, 200, 173, 9, 51, 213, 123, 154, 173, 59, 204, 1, 0, 1, 2, 47, 32, 147, 113, 245, 159, 161, 113, 8, 168, 232, 8, 209, 124, 89, 142, 13, 7, 120, 159, 46, 103, 71, 197, 91, 71, 188, 23, 88, 188, 103, 241, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_23(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 10;
  test.test_number =23;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "A2A9WaETNWxyJs5NFnr48My4KwBzKEjcKPwyBq4WbMci",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 210, 19, 232, 203, 65, 233, 73, 246, 184, 66, 249, 110, 200, 240, 1, 16, 177, 110, 51, 6, 234, 91, 241, 132, 145, 251, 195, 161, 96, 104, 217, 186, 79, 223, 198, 92, 159, 131, 188, 128, 253, 45, 242, 5, 70, 4, 85, 192, 88, 28, 162, 229, 68, 61, 147, 237, 243, 63, 229, 171, 245, 112, 226, 141, 1, 0, 1, 2, 134, 5, 26, 250, 10, 184, 62, 181, 232, 41, 229, 128, 192, 144, 17, 92, 180, 68, 246, 196, 164, 148, 3, 172, 101, 34, 5, 228, 52, 197, 228, 231, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_24(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 22;
  test.test_number =24;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "A2A9WaETNWxyJs5NFnr48My4KwBzKEjcKPwyBq4WbMci",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 211, 118, 227, 33, 211, 91, 167, 31, 78, 205, 97, 104, 5, 143, 223, 232, 117, 24, 177, 57, 36, 165, 194, 42, 34, 246, 254, 140, 175, 234, 70, 129, 35, 16, 244, 163, 58, 2, 188, 52, 183, 229, 126, 174, 142, 115, 15, 108, 104, 103, 231, 145, 55, 40, 116, 42, 89, 244, 104, 30, 180, 178, 143, 95, 1, 0, 1, 2, 134, 5, 26, 250, 10, 184, 62, 181, 232, 41, 229, 128, 192, 144, 17, 92, 180, 68, 246, 196, 164, 148, 3, 172, 101, 34, 5, 228, 52, 197, 228, 231, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
