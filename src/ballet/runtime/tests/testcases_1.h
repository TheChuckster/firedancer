int test_0(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 1;
  test.test_number =0;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4n6ygWgFwKNbWgsjyv7KShEcinMdKXiYxPqrVPYgmZ5F",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 197, 248, 43, 178, 81, 70, 216, 50, 253, 186, 29, 177, 115, 92, 207, 26, 241, 76, 45, 206, 60, 198, 66, 195, 81, 63, 245, 246, 195, 85, 225, 221, 150, 28, 220, 138, 158, 66, 241, 141, 79, 68, 28, 188, 63, 55, 197, 41, 61, 95, 48, 6, 28, 40, 48, 32, 164, 27, 87, 40, 173, 173, 150, 140, 1, 0, 1, 2, 56, 32, 244, 168, 191, 156, 217, 158, 124, 79, 36, 93, 241, 165, 170, 170, 243, 168, 27, 140, 98, 179, 221, 246, 212, 132, 103, 86, 69, 147, 224, 166, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 13;
  test.test_number =1;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111ogCyDbaRMvkdsHB3qfdyFYaG1WtRUAfdh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111114DhpssPJgSi1YU7hCMfYt1BJ334YgsffXm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111113R2cuenjG5nFubqX9Wzuukdin2YfGQVzu5",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 249, 13, 90, 47, 55, 177, 188, 45, 12, 169, 137, 242, 247, 162, 231, 193, 44, 25, 5, 120, 195, 221, 200, 225, 31, 166, 242, 120, 202, 204, 157, 116, 212, 194, 188, 32, 6, 91, 240, 128, 183, 158, 34, 190, 83, 35, 93, 96, 228, 227, 188, 173, 20, 169, 134, 205, 47, 37, 198, 131, 103, 210, 68, 167, 11, 52, 98, 217, 212, 196, 251, 140, 38, 223, 57, 39, 198, 200, 231, 175, 2, 179, 223, 250, 184, 141, 145, 6, 104, 31, 9, 28, 213, 103, 67, 135, 224, 145, 74, 26, 197, 7, 212, 55, 42, 229, 149, 1, 191, 111, 239, 91, 202, 190, 19, 83, 251, 226, 1, 74, 144, 124, 70, 104, 34, 32, 17, 105, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = -47;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_2(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 2;
  test.test_number =2;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "CqMMkp1UQ2AjDWnuq5r6GwmXfqNf22GQP7CUgMbMNHQD",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 193, 150, 139, 122, 19, 189, 250, 139, 1, 65, 37, 30, 236, 157, 206, 15, 142, 135, 101, 178, 79, 8, 79, 174, 37, 88, 65, 105, 254, 142, 86, 50, 107, 56, 180, 108, 219, 165, 75, 183, 30, 86, 167, 198, 234, 26, 177, 197, 99, 93, 220, 59, 107, 37, 56, 76, 56, 185, 35, 108, 20, 242, 85, 177, 1, 0, 1, 2, 175, 211, 116, 39, 13, 117, 37, 8, 57, 206, 107, 169, 106, 177, 130, 181, 63, 21, 1, 62, 188, 244, 242, 191, 221, 110, 196, 85, 102, 26, 8, 202, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_3(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 14;
  test.test_number =3;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "CqMMkp1UQ2AjDWnuq5r6GwmXfqNf22GQP7CUgMbMNHQD",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111115q4EpJaTXAZWpCg3J2zppWGSZ46KXozzo9",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 90, 115, 184, 42, 127, 63, 84, 158, 163, 2, 148, 11, 62, 147, 51, 35, 235, 97, 251, 241, 216, 82, 71, 113, 5, 85, 26, 113, 184, 163, 133, 78, 122, 129, 2, 2, 44, 87, 169, 117, 251, 225, 133, 244, 38, 117, 74, 103, 19, 193, 244, 195, 29, 137, 67, 238, 220, 255, 178, 32, 6, 130, 213, 188, 57, 113, 179, 179, 166, 204, 120, 156, 92, 53, 205, 96, 91, 96, 53, 112, 130, 188, 168, 253, 254, 35, 107, 197, 129, 230, 225, 183, 230, 171, 186, 229, 14, 175, 219, 10, 179, 196, 198, 160, 174, 148, 88, 121, 194, 219, 204, 78, 53, 48, 152, 226, 163, 55, 215, 43, 38, 247, 163, 35, 66, 170, 192, 103, 68, 140, 247, 83, 11, 51, 210, 159, 17, 99, 218, 95, 131, 246, 214, 188, 74, 13, 76, 35, 73, 219, 118, 2, 33, 8, 220, 220, 179, 74, 15, 173, 105, 158, 0, 22, 199, 216, 169, 8, 189, 25, 23, 66, 226, 193, 1, 34, 34, 98, 11, 159, 202, 215, 71, 9, 175, 80, 235, 205, 132, 143, 148, 2, 2, 1, 1, 3, 175, 211, 116, 39, 13, 117, 37, 8, 57, 206, 107, 169, 106, 177, 130, 181, 63, 21, 1, 62, 188, 244, 242, 191, 221, 110, 196, 85, 102, 26, 8, 202, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 440;
  test.expected_result = -2;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_4(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 18;
  test.test_number =4;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 82;
  test.expected_result = -20;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_5(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 6;
  test.test_number =5;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgDqSd8rgMb7TV24ZMH1DzfTB9jrqjXrv9Q2hu76U5gi",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 24, 73, 201, 136, 54, 11, 170, 123, 123, 43, 168, 103, 160, 34, 166, 39, 42, 198, 125, 135, 102, 13, 150, 84, 164, 230, 128, 164, 243, 114, 52, 117, 123, 202, 118, 117, 174, 25, 27, 252, 147, 90, 114, 158, 4, 244, 30, 125, 52, 245, 141, 93, 127, 194, 201, 42, 217, 60, 99, 31, 28, 60, 60, 71, 1, 0, 1, 2, 143, 197, 88, 193, 108, 252, 175, 195, 254, 219, 57, 217, 118, 211, 235, 74, 51, 127, 161, 163, 142, 171, 166, 1, 155, 130, 82, 244, 164, 81, 250, 215, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_6(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 0;
  test.test_number =6;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 49, 247, 140, 183, 2, 250, 79, 218, 67, 16, 216, 128, 148, 216, 83, 203, 34, 144, 132, 71, 154, 209, 128, 184, 35, 240, 218, 189, 60, 194, 245, 253, 100, 43, 182, 75, 40, 218, 132, 19, 155, 113, 63, 182, 248, 232, 206, 61, 96, 142, 10, 100, 76, 226, 218, 175, 229, 213, 151, 206, 121, 21, 112, 171, 1, 0, 1, 2, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_7(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 26;
  test.test_number =7;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111116djSnXB2wXVGT4xDLsfTnkp1p4cCxHAfRq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 160, 70, 190, 47, 116, 5, 244, 172, 209, 147, 5, 145, 149, 105, 72, 112, 109, 167, 38, 116, 97, 95, 119, 182, 16, 127, 145, 131, 106, 145, 198, 97, 190, 240, 142, 37, 2, 36, 31, 21, 21, 66, 150, 71, 186, 241, 61, 90, 40, 28, 78, 73, 103, 52, 198, 227, 151, 150, 229, 252, 116, 207, 8, 123, 37, 95, 242, 98, 182, 61, 40, 20, 136, 181, 213, 216, 205, 33, 221, 4, 161, 199, 44, 132, 91, 9, 64, 191, 90, 25, 48, 135, 93, 215, 251, 55, 196, 68, 203, 16, 127, 20, 23, 66, 170, 38, 34, 250, 192, 208, 251, 210, 96, 55, 248, 219, 70, 187, 169, 34, 11, 129, 63, 150, 86, 46, 50, 9, 231, 68, 122, 23, 118, 170, 172, 211, 255, 150, 15, 226, 58, 122, 133, 135, 126, 239, 135, 133, 85, 17, 225, 167, 57, 2, 11, 139, 192, 70, 203, 77, 74, 96, 45, 255, 62, 194, 88, 179, 81, 0, 255, 65, 243, 141, 108, 160, 76, 103, 78, 138, 255, 218, 106, 53, 94, 234, 191, 197, 236, 145, 194, 61, 2, 1, 1, 3, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 440;
  test.expected_result = -2;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_8(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 16;
  test.test_number =8;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2WChxzwwhmGBo3EukB5BfDkr4i1Yu9fsSkuTmnZFZ9Rr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111116djSnXB2wXVGT4xDLsfTnkp1p4cCxHAfRq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117qkFjr4u54stuNNUR8fRF8dNhaP35yvANs",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 180, 7, 18, 46, 236, 99, 208, 240, 13, 96, 36, 36, 89, 134, 107, 121, 109, 165, 99, 165, 207, 213, 218, 90, 172, 250, 94, 228, 60, 176, 87, 219, 227, 87, 161, 101, 114, 197, 225, 140, 143, 151, 246, 69, 29, 203, 167, 247, 1, 145, 149, 82, 205, 18, 11, 174, 17, 24, 147, 86, 117, 251, 232, 66, 234, 122, 79, 28, 198, 212, 72, 200, 6, 66, 234, 191, 230, 252, 83, 129, 138, 129, 222, 46, 56, 239, 180, 252, 66, 44, 57, 78, 217, 67, 59, 34, 207, 18, 240, 217, 69, 107, 225, 234, 119, 62, 53, 93, 164, 226, 126, 231, 11, 179, 117, 20, 25, 177, 177, 244, 10, 158, 140, 6, 49, 165, 158, 187, 252, 141, 231, 115, 47, 193, 49, 114, 69, 117, 237, 191, 103, 113, 221, 174, 237, 55, 59, 198, 244, 183, 126, 151, 94, 37, 209, 124, 194, 151, 173, 13, 50, 242, 19, 234, 110, 27, 84, 120, 61, 215, 30, 6, 69, 228, 14, 225, 229, 116, 253, 117, 193, 70, 96, 172, 27, 231, 42, 250, 134, 64, 121, 18, 3, 2, 1, 4, 22, 86, 196, 73, 137, 255, 137, 101, 171, 103, 65, 110, 238, 106, 85, 158, 163, 174, 119, 183, 231, 202, 104, 80, 191, 231, 252, 224, 63, 76, 91, 225, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_9(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 3;
  test.test_number =9;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 146, 243, 55, 58, 103, 215, 61, 140, 134, 251, 74, 35, 112, 163, 116, 235, 232, 189, 98, 243, 146, 124, 109, 155, 155, 4, 106, 98, 62, 105, 194, 33, 160, 155, 178, 31, 47, 213, 233, 111, 44, 135, 71, 16, 214, 23, 246, 28, 104, 12, 22, 92, 194, 68, 14, 227, 156, 190, 247, 202, 25, 226, 117, 246, 1, 0, 1, 2, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_10(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 30;
  test.test_number =10;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 99, 35, 118, 27, 201, 30, 237, 180, 6, 127, 134, 182, 104, 198, 239, 252, 177, 75, 42, 6, 140, 50, 57, 211, 33, 177, 20, 6, 221, 182, 154, 69, 227, 36, 49, 220, 103, 133, 200, 33, 184, 217, 187, 204, 223, 152, 177, 15, 152, 82, 111, 167, 176, 166, 213, 230, 108, 38, 27, 80, 131, 13, 224, 181, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 75, 2, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 311;
  test.expected_result = -8;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_11(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 17;
  test.test_number =11;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 111, 93, 146, 99, 202, 53, 40, 55, 34, 45, 223, 72, 202, 49, 119, 195, 33, 245, 112, 147, 189, 101, 51, 124, 186, 210, 140, 170, 248, 89, 235, 213, 227, 112, 64, 34, 92, 15, 19, 204, 229, 214, 27, 248, 241, 132, 207, 10, 12, 123, 151, 245, 150, 164, 223, 215, 173, 228, 106, 60, 35, 23, 177, 10, 52, 153, 180, 84, 80, 72, 10, 25, 245, 135, 48, 204, 87, 95, 103, 232, 130, 9, 36, 65, 32, 254, 53, 0, 92, 82, 106, 22, 246, 113, 195, 102, 241, 141, 254, 205, 246, 246, 200, 52, 41, 222, 199, 150, 153, 138, 138, 215, 200, 205, 34, 92, 240, 10, 58, 113, 99, 57, 26, 60, 234, 83, 77, 218, 167, 214, 165, 207, 10, 183, 153, 213, 50, 225, 29, 128, 165, 239, 95, 189, 170, 95, 4, 237, 98, 199, 162, 40, 19, 156, 255, 11, 133, 68, 50, 83, 198, 204, 5, 191, 92, 38, 51, 65, 137, 15, 111, 77, 225, 87, 225, 150, 179, 46, 120, 202, 212, 243, 4, 93, 32, 251, 182, 245, 0, 165, 229, 193, 3, 2, 1, 4, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_12(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 27;
  test.test_number =12;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 216, 122, 233, 234, 219, 97, 51, 114, 176, 219, 48, 125, 112, 39, 113, 36, 113, 110, 194, 247, 70, 248, 23, 27, 93, 218, 136, 131, 162, 111, 213, 128, 237, 106, 105, 168, 34, 27, 90, 148, 212, 39, 21, 186, 30, 40, 216, 27, 183, 75, 201, 133, 56, 202, 244, 129, 94, 3, 55, 5, 23, 18, 227, 107, 71, 92, 102, 67, 145, 69, 169, 219, 9, 116, 166, 219, 92, 195, 45, 217, 60, 166, 145, 100, 97, 11, 166, 96, 239, 19, 122, 169, 242, 155, 100, 230, 235, 91, 25, 47, 107, 98, 144, 34, 231, 206, 156, 237, 240, 14, 252, 159, 175, 74, 106, 202, 193, 244, 55, 199, 6, 101, 69, 195, 60, 207, 53, 24, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_13(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 31;
  test.test_number =13;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jfxyvZ8Q6y1sxMM5f2nY1ZZMDaBmWcbBrmKnPYG9nZm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111Af7Udc9v3L82dQM5b4zee1Xt77Be4czzbH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111D596YFweJQuHY1BbjazZYmAbt8jJL2VzVM",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 15, 38, 3, 222, 168, 203, 63, 235, 77, 144, 152, 237, 167, 2, 226, 86, 33, 3, 178, 222, 113, 138, 59, 185, 10, 120, 121, 134, 151, 192, 187, 20, 243, 188, 216, 207, 116, 124, 213, 18, 201, 241, 152, 61, 221, 22, 195, 141, 207, 206, 10, 174, 102, 151, 233, 254, 22, 43, 93, 191, 20, 5, 127, 130, 54, 12, 151, 164, 245, 12, 47, 13, 214, 58, 113, 88, 195, 30, 51, 76, 135, 120, 229, 243, 150, 135, 132, 45, 236, 239, 33, 196, 16, 128, 227, 222, 145, 217, 237, 237, 210, 96, 242, 177, 97, 89, 214, 91, 115, 79, 126, 176, 9, 138, 214, 217, 200, 145, 117, 157, 37, 16, 33, 53, 134, 231, 163, 131, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 240, 66, 179, 179, 201, 77, 221, 173, 240, 73, 120, 30, 230, 149, 99, 207, 45, 114, 157, 39, 227, 115, 243, 189, 198, 32, 186, 197, 15, 138, 80, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = -8;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_14(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 4;
  test.test_number =14;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 12, 30, 120, 100, 124, 147, 219, 200, 85, 158, 63, 111, 56, 188, 119, 181, 221, 79, 244, 91, 72, 116, 222, 42, 133, 171, 5, 20, 172, 52, 67, 248, 156, 157, 210, 232, 21, 58, 205, 135, 17, 85, 72, 111, 221, 135, 176, 151, 164, 111, 0, 145, 154, 11, 105, 177, 154, 190, 232, 231, 126, 0, 152, 221, 1, 0, 1, 2, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_15(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 29;
  test.test_number =15;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 202, 27, 236, 238, 220, 179, 122, 199, 227, 84, 50, 119, 72, 92, 238, 168, 58, 162, 137, 171, 6, 48, 32, 37, 79, 65, 47, 3, 125, 111, 209, 176, 75, 68, 46, 170, 148, 58, 124, 122, 0, 98, 127, 107, 52, 144, 52, 216, 86, 143, 111, 143, 234, 178, 96, 37, 214, 231, 158, 78, 220, 91, 220, 2, 1, 0, 1, 2, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 75, 2, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 245;
  test.expected_result = -8;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_16(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 15;
  test.test_number =16;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 49, 202, 71, 208, 164, 81, 29, 174, 72, 112, 116, 251, 238, 191, 140, 193, 95, 243, 2, 130, 123, 158, 234, 237, 65, 81, 42, 23, 5, 193, 41, 71, 197, 14, 116, 6, 74, 254, 97, 171, 156, 170, 213, 89, 187, 163, 1, 183, 86, 137, 62, 108, 127, 191, 69, 75, 12, 214, 117, 23, 33, 179, 152, 176, 111, 2, 37, 173, 19, 221, 162, 194, 15, 245, 159, 48, 115, 95, 65, 63, 162, 235, 47, 21, 95, 50, 211, 77, 251, 26, 19, 55, 52, 99, 20, 90, 78, 140, 245, 225, 43, 223, 69, 103, 196, 44, 44, 47, 71, 145, 212, 184, 5, 2, 147, 81, 90, 255, 116, 169, 49, 164, 34, 27, 62, 211, 130, 242, 2, 1, 1, 3, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_17(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 25;
  test.test_number =17;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "Hd13JG1zSsBT8iFbhWWYy2Yh3wUu4XBxpR7xzqkcXurt",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 31, 149, 196, 238, 4, 251, 11, 229, 230, 124, 222, 76, 130, 160, 29, 107, 162, 36, 46, 42, 159, 81, 18, 203, 154, 197, 11, 59, 0, 51, 243, 182, 255, 158, 115, 205, 113, 243, 169, 215, 230, 184, 93, 167, 4, 229, 110, 135, 73, 249, 15, 59, 237, 158, 205, 10, 2, 218, 236, 19, 120, 21, 253, 158, 82, 139, 65, 221, 144, 202, 78, 222, 79, 242, 80, 84, 54, 199, 31, 244, 137, 91, 225, 15, 141, 100, 169, 188, 12, 172, 133, 141, 254, 147, 157, 173, 71, 6, 180, 171, 66, 218, 3, 51, 249, 190, 172, 47, 15, 2, 49, 196, 115, 1, 102, 246, 86, 118, 198, 76, 228, 68, 207, 235, 247, 162, 53, 229, 2, 1, 1, 3, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 246, 243, 241, 218, 109, 7, 57, 143, 127, 27, 6, 123, 138, 28, 90, 69, 62, 181, 210, 80, 138, 106, 50, 186, 187, 78, 53, 146, 62, 203, 175, 221, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_18(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_create_ok";
  test.test_nonce = 5;
  test.test_number =18;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FvJmp1DdrNZmhyXeBAjAzd3HBun1421WgATyRrxrygii",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 75, 56, 16, 194, 64, 83, 141, 58, 69, 242, 35, 193, 142, 174, 206, 132, 76, 163, 89, 59, 158, 217, 5, 134, 35, 3, 96, 159, 86, 13, 24, 184, 63, 109, 199, 112, 61, 236, 83, 143, 153, 154, 208, 244, 189, 95, 57, 180, 184, 205, 0, 221, 4, 100, 184, 51, 231, 149, 216, 124, 250, 187, 104, 11, 1, 0, 1, 2, 221, 171, 126, 209, 144, 64, 146, 255, 243, 115, 115, 40, 65, 225, 59, 66, 217, 149, 143, 248, 233, 9, 37, 77, 168, 22, 131, 54, 152, 211, 190, 95, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_19(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 9;
  test.test_number =19;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FxN7F1UByWojiQciL2uuPiir1Qi8xcMDVwQr8X7Tto8m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 72, 41, 189, 133, 213, 163, 131, 128, 7, 61, 65, 84, 105, 93, 16, 180, 179, 120, 103, 149, 31, 49, 174, 143, 242, 176, 153, 238, 249, 218, 115, 123, 239, 179, 178, 232, 197, 172, 99, 13, 108, 86, 55, 118, 201, 44, 20, 13, 20, 43, 76, 87, 103, 93, 124, 134, 228, 144, 95, 220, 65, 230, 187, 187, 1, 0, 1, 2, 222, 50, 109, 140, 67, 18, 42, 244, 110, 216, 141, 169, 253, 14, 76, 211, 69, 15, 80, 41, 128, 23, 181, 26, 185, 236, 62, 88, 186, 35, 109, 146, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_20(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 20;
  test.test_number =20;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FxN7F1UByWojiQciL2uuPiir1Qi8xcMDVwQr8X7Tto8m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 222, 50, 109, 140, 67, 18, 42, 244, 110, 216, 141, 169, 253, 14, 76, 211, 69, 15, 80, 41, 128, 23, 181, 26, 185, 236, 62, 88, 186, 35, 109, 146, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 115;
  test.expected_result = -8;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_21(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 19;
  test.test_number =21;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4AxyPGZmfXuJNjLrkfL9TDXRW6JwnYoneArDdohStQ3z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 244, 182, 201, 183, 159, 39, 182, 154, 159, 85, 172, 111, 51, 145, 63, 20, 61, 23, 171, 232, 16, 90, 99, 70, 72, 16, 241, 126, 218, 100, 237, 59, 135, 83, 8, 119, 186, 214, 159, 166, 67, 86, 173, 33, 232, 201, 237, 31, 9, 23, 109, 200, 195, 26, 220, 155, 125, 85, 48, 178, 251, 93, 62, 189, 1, 0, 1, 2, 47, 32, 147, 113, 245, 159, 161, 113, 8, 168, 232, 8, 209, 124, 89, 142, 13, 7, 120, 159, 46, 103, 71, 197, 91, 71, 188, 23, 88, 188, 103, 241, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 293;
  test.expected_result = -3;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_22(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 8;
  test.test_number =22;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4AxyPGZmfXuJNjLrkfL9TDXRW6JwnYoneArDdohStQ3z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 91, 201, 127, 30, 75, 102, 8, 227, 32, 59, 10, 91, 235, 15, 121, 59, 223, 222, 168, 138, 207, 105, 3, 138, 222, 101, 157, 235, 172, 65, 134, 142, 66, 231, 12, 154, 157, 164, 130, 88, 227, 145, 148, 135, 34, 94, 148, 241, 49, 236, 37, 189, 18, 53, 19, 136, 127, 227, 94, 203, 13, 39, 151, 8, 1, 0, 1, 2, 47, 32, 147, 113, 245, 159, 161, 113, 8, 168, 232, 8, 209, 124, 89, 142, 13, 7, 120, 159, 46, 103, 71, 197, 91, 71, 188, 23, 88, 188, 103, 241, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_23(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 10;
  test.test_number =23;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "A2A9WaETNWxyJs5NFnr48My4KwBzKEjcKPwyBq4WbMci",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 88, 249, 225, 136, 246, 49, 77, 87, 119, 194, 23, 82, 241, 144, 107, 144, 180, 156, 37, 205, 110, 7, 66, 88, 60, 184, 197, 117, 140, 173, 249, 0, 201, 187, 244, 111, 144, 116, 212, 11, 192, 162, 139, 47, 54, 201, 26, 177, 33, 8, 172, 42, 168, 152, 171, 133, 8, 176, 182, 92, 183, 130, 88, 148, 1, 0, 1, 2, 134, 5, 26, 250, 10, 184, 62, 181, 232, 41, 229, 128, 192, 144, 17, 92, 180, 68, 246, 196, 164, 148, 3, 172, 101, 34, 5, 228, 52, 197, 228, 231, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_24(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 22;
  test.test_number =24;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "A2A9WaETNWxyJs5NFnr48My4KwBzKEjcKPwyBq4WbMci",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 72, 236, 11, 131, 202, 244, 99, 58, 229, 172, 2, 86, 41, 177, 9, 86, 96, 212, 252, 12, 86, 131, 23, 83, 163, 73, 150, 191, 42, 136, 217, 133, 194, 148, 178, 224, 214, 87, 247, 148, 162, 71, 176, 114, 64, 161, 52, 180, 146, 101, 201, 23, 153, 136, 17, 47, 140, 122, 42, 234, 105, 187, 144, 241, 1, 0, 1, 2, 134, 5, 26, 250, 10, 184, 62, 181, 232, 41, 229, 128, 192, 144, 17, 92, 180, 68, 246, 196, 164, 148, 3, 172, 101, 34, 5, 228, 52, 197, 228, 231, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
