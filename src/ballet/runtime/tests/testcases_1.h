int test_0(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 0;
  test.test_number =0;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4ARkUCGV3cUe27wXBs8GcLPK283zcz9BGmBophmcri9b",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 116, 205, 249, 59, 163, 164, 183, 0, 9, 122, 218, 104, 0, 212, 25, 194, 223, 33, 120, 76, 218, 193, 5, 152, 150, 127, 207, 168, 115, 135, 49, 121, 76, 224, 42, 196, 241, 170, 44, 227, 183, 29, 160, 7, 134, 86, 31, 139, 93, 79, 179, 29, 80, 136, 34, 150, 159, 27, 118, 87, 87, 255, 158, 105, 1, 0, 1, 2, 46, 253, 69, 185, 232, 222, 76, 71, 237, 30, 115, 180, 243, 116, 145, 98, 158, 37, 245, 77, 241, 66, 23, 14, 191, 167, 205, 112, 85, 139, 192, 142, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_bad_owner";
  test.test_nonce = 13;
  test.test_number =1;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111ogCyDbaRMvkdsHB3qfdyFYaG1WtRUAfdh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111112D1oxKts8YPdTJRG5FzxTNpMtWmq8hkVx3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111112cMQwSC9qirWGjZM6gLGwW69X22mqwLLGP",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 43, 180, 131, 114, 190, 255, 131, 238, 190, 163, 143, 53, 132, 87, 138, 204, 169, 32, 167, 192, 18, 19, 41, 164, 243, 229, 40, 207, 254, 71, 170, 80, 179, 118, 93, 49, 184, 102, 146, 149, 240, 61, 162, 143, 87, 23, 6, 83, 191, 173, 206, 163, 42, 81, 90, 255, 123, 220, 170, 194, 86, 120, 228, 43, 188, 53, 50, 158, 235, 132, 142, 43, 187, 13, 252, 228, 115, 80, 18, 22, 135, 146, 30, 103, 159, 189, 221, 254, 192, 73, 194, 83, 206, 62, 226, 54, 180, 42, 210, 31, 6, 42, 155, 153, 135, 167, 94, 202, 88, 204, 176, 199, 243, 63, 151, 244, 131, 18, 214, 171, 225, 198, 0, 92, 7, 161, 222, 205, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_2(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 3;
  test.test_number =2;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6pzHuYwj2SvrtuNkCgfuoAcV7oiyGmvv6d3QGtaBNCte",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 3, 65, 219, 24, 82, 182, 48, 85, 210, 9, 37, 112, 5, 118, 75, 238, 31, 163, 114, 159, 254, 125, 166, 74, 171, 227, 239, 236, 114, 201, 144, 135, 43, 89, 145, 90, 103, 189, 190, 224, 205, 226, 68, 4, 15, 18, 127, 12, 76, 141, 171, 171, 236, 253, 206, 146, 117, 147, 205, 217, 191, 88, 85, 231, 1, 0, 1, 2, 86, 149, 131, 41, 15, 150, 147, 81, 81, 238, 73, 163, 46, 2, 98, 13, 202, 211, 194, 21, 160, 247, 120, 186, 110, 133, 94, 42, 106, 194, 157, 7, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_3(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_contains_duplicates_fails";
  test.test_nonce = 16;
  test.test_number =3;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6pzHuYwj2SvrtuNkCgfuoAcV7oiyGmvv6d3QGtaBNCte",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111115RidqCHAoz6dzmXxGcfWLNzevYqNpaRAUo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111115q4EpJaTXAZWpCg3J2zppWGSZ46KXozzo9",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 215, 118, 222, 214, 187, 200, 233, 233, 26, 170, 162, 188, 95, 169, 1, 191, 216, 218, 231, 241, 69, 58, 75, 173, 147, 150, 115, 204, 63, 2, 22, 54, 45, 9, 248, 181, 188, 19, 188, 67, 237, 226, 177, 246, 83, 45, 202, 163, 68, 179, 113, 202, 155, 243, 103, 67, 33, 133, 64, 213, 8, 38, 68, 97, 88, 13, 232, 63, 70, 59, 76, 54, 223, 167, 142, 93, 138, 194, 96, 161, 81, 251, 79, 49, 75, 186, 159, 246, 226, 131, 217, 116, 201, 219, 87, 156, 212, 82, 47, 218, 249, 105, 102, 150, 66, 25, 204, 98, 121, 57, 124, 187, 79, 177, 143, 192, 249, 102, 1, 57, 61, 91, 131, 75, 76, 130, 198, 92, 2, 1, 1, 3, 86, 149, 131, 41, 15, 150, 147, 81, 81, 238, 73, 163, 46, 2, 98, 13, 202, 211, 194, 21, 160, 247, 120, 186, 110, 133, 94, 42, 106, 194, 157, 7, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_4(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 17;
  test.test_number =4;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 0;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 82;
  test.expected_result = -20;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_5(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_initialize_no_panic";
  test.test_nonce = 5;
  test.test_number =5;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7LKna1wLb4HtniSzCvmsbKDiU7qZA6fwgCmbJRWMjbtg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 77, 238, 29, 216, 10, 154, 113, 26, 55, 157, 123, 236, 2, 214, 204, 205, 32, 92, 118, 160, 148, 58, 220, 233, 70, 185, 148, 38, 55, 238, 98, 188, 178, 107, 248, 88, 158, 205, 1, 74, 229, 217, 217, 199, 99, 200, 104, 63, 111, 241, 68, 141, 107, 193, 22, 255, 137, 4, 86, 74, 229, 138, 138, 157, 1, 0, 1, 2, 94, 25, 101, 224, 228, 18, 5, 100, 197, 51, 238, 37, 39, 122, 40, 100, 184, 57, 134, 1, 96, 198, 121, 251, 169, 60, 75, 166, 79, 178, 179, 237, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_6(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 4;
  test.test_number =6;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 149, 9, 194, 233, 49, 15, 216, 112, 84, 110, 145, 163, 26, 164, 236, 1, 133, 149, 238, 50, 92, 43, 200, 30, 131, 113, 16, 243, 221, 223, 119, 24, 50, 119, 146, 36, 196, 10, 74, 1, 167, 212, 140, 186, 169, 20, 175, 201, 206, 140, 234, 231, 146, 20, 143, 58, 74, 37, 190, 186, 140, 227, 2, 140, 1, 0, 1, 2, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_7(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 27;
  test.test_number =7;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 233, 191, 39, 149, 148, 32, 89, 147, 157, 178, 195, 166, 45, 159, 81, 200, 23, 188, 52, 1, 181, 216, 69, 134, 254, 209, 138, 55, 156, 129, 239, 81, 207, 179, 174, 202, 191, 245, 77, 231, 3, 191, 163, 63, 125, 154, 189, 174, 170, 86, 47, 68, 47, 105, 171, 84, 86, 6, 68, 43, 180, 106, 4, 144, 218, 102, 252, 9, 187, 41, 65, 225, 25, 118, 80, 7, 139, 92, 236, 87, 30, 19, 114, 64, 90, 205, 209, 9, 17, 91, 147, 192, 173, 117, 132, 227, 52, 64, 111, 23, 137, 17, 238, 34, 201, 21, 10, 33, 178, 91, 190, 34, 55, 165, 36, 110, 114, 208, 135, 162, 53, 145, 169, 55, 186, 161, 27, 251, 2, 1, 1, 3, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 376;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_8(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_update_contains_duplicates_fails";
  test.test_nonce = 18;
  test.test_number =8;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7X8j1ZxHa84aAKMiNuK1TsHyqjK3KZEhcbH35SCiC2MB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111118eRTi4fUVRoeYEeeTyL4DPAwxatvWT5q1Z",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119T6fgHG3unjQB6vpWozhBdiXDbQovvFVeF",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "111111193m4hAxmCcGXMfnjVPfNhWSjb69sDgffKu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111119rSGfPZLcyCGzY4uYEL1fkzJr6fke9qKxb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 96, 134, 119, 47, 194, 12, 179, 95, 199, 90, 130, 89, 116, 81, 187, 198, 141, 193, 52, 217, 178, 86, 94, 50, 112, 39, 71, 255, 231, 79, 52, 212, 203, 14, 102, 12, 167, 161, 108, 202, 253, 134, 225, 226, 107, 109, 173, 182, 222, 8, 144, 184, 102, 41, 50, 12, 236, 200, 78, 211, 151, 119, 72, 192, 84, 28, 80, 59, 150, 80, 243, 171, 122, 210, 116, 183, 106, 123, 159, 247, 16, 195, 206, 217, 239, 245, 12, 248, 115, 63, 5, 18, 0, 143, 225, 203, 10, 139, 65, 219, 36, 142, 196, 95, 142, 95, 213, 93, 57, 212, 255, 255, 43, 233, 22, 23, 223, 48, 12, 156, 235, 163, 25, 152, 134, 194, 63, 114, 119, 219, 90, 90, 125, 13, 238, 220, 77, 44, 229, 56, 196, 175, 17, 211, 216, 171, 254, 160, 93, 74, 186, 227, 27, 109, 91, 198, 72, 62, 9, 13, 65, 30, 213, 181, 91, 145, 38, 127, 253, 195, 176, 188, 141, 26, 150, 221, 30, 164, 7, 86, 174, 13, 200, 234, 196, 189, 172, 172, 31, 249, 40, 42, 3, 2, 1, 4, 96, 222, 71, 156, 131, 30, 155, 84, 198, 1, 219, 248, 40, 1, 233, 98, 9, 125, 26, 191, 102, 78, 101, 218, 143, 215, 35, 1, 31, 225, 255, 30, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 18, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 20, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_9(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 2;
  test.test_number =9;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 165, 90, 98, 14, 114, 196, 95, 177, 121, 202, 33, 253, 166, 113, 253, 108, 223, 38, 76, 157, 139, 12, 206, 100, 23, 216, 112, 207, 140, 214, 128, 225, 111, 213, 168, 109, 73, 160, 98, 225, 143, 77, 1, 13, 121, 234, 80, 135, 239, 253, 198, 15, 154, 20, 76, 228, 240, 84, 60, 59, 109, 84, 248, 246, 1, 0, 1, 2, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_10(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 30;
  test.test_number =10;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 174, 12, 77, 211, 109, 71, 209, 153, 232, 28, 4, 110, 125, 145, 140, 237, 208, 40, 1, 193, 131, 248, 197, 192, 9, 191, 182, 18, 162, 136, 83, 254, 254, 117, 172, 158, 15, 42, 2, 246, 95, 245, 178, 150, 66, 109, 160, 19, 42, 202, 24, 2, 75, 217, 196, 14, 107, 200, 47, 89, 90, 73, 185, 238, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 75, 2, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 311;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_11(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 20;
  test.test_number =11;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 136, 163, 155, 55, 67, 88, 239, 209, 132, 218, 76, 4, 130, 205, 222, 54, 33, 43, 46, 167, 94, 124, 15, 98, 233, 124, 16, 127, 121, 140, 250, 212, 10, 47, 25, 87, 122, 110, 89, 130, 124, 23, 21, 212, 233, 251, 115, 242, 185, 163, 146, 198, 151, 111, 103, 229, 109, 61, 151, 64, 18, 65, 213, 89, 104, 167, 144, 251, 177, 120, 139, 15, 96, 218, 117, 221, 172, 85, 191, 253, 180, 42, 69, 245, 46, 237, 166, 191, 89, 89, 43, 240, 89, 111, 15, 18, 240, 25, 183, 78, 1, 136, 66, 221, 111, 88, 63, 196, 151, 123, 86, 142, 205, 141, 211, 239, 24, 132, 209, 226, 16, 209, 1, 191, 16, 123, 87, 115, 68, 83, 149, 205, 212, 100, 243, 53, 172, 52, 168, 111, 170, 79, 227, 241, 128, 0, 203, 116, 7, 197, 161, 243, 122, 88, 24, 46, 207, 29, 2, 167, 10, 198, 32, 144, 98, 93, 135, 201, 50, 245, 28, 57, 93, 43, 245, 114, 145, 101, 102, 96, 225, 249, 174, 165, 203, 39, 232, 77, 232, 25, 143, 232, 3, 2, 1, 4, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_12(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 28;
  test.test_number =12;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 216, 203, 136, 16, 18, 109, 250, 49, 230, 6, 64, 97, 229, 181, 143, 24, 76, 59, 40, 40, 68, 73, 42, 40, 210, 67, 32, 109, 217, 193, 170, 74, 88, 138, 103, 80, 111, 239, 52, 97, 203, 155, 87, 86, 60, 239, 194, 154, 155, 55, 160, 167, 131, 35, 203, 184, 10, 184, 131, 215, 39, 154, 97, 52, 40, 226, 225, 130, 247, 228, 86, 208, 218, 114, 12, 181, 7, 162, 124, 230, 78, 144, 85, 255, 165, 85, 37, 39, 222, 122, 104, 255, 81, 193, 13, 56, 219, 228, 223, 13, 130, 115, 120, 2, 3, 22, 49, 3, 218, 41, 119, 142, 220, 78, 89, 142, 128, 13, 178, 224, 77, 228, 13, 44, 52, 85, 195, 250, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_13(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 31;
  test.test_number =13;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111Bs8Haw3nAsWf5hmLfKzc6PMEzcxUCKkVYK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111D596YFweJQuHY1BbjazZYmAbt8jJL2VzVM",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 203, 231, 51, 211, 243, 55, 86, 76, 20, 230, 34, 143, 75, 152, 169, 192, 11, 55, 62, 12, 125, 39, 235, 191, 158, 194, 244, 29, 123, 2, 155, 183, 192, 184, 152, 44, 89, 226, 60, 253, 212, 255, 103, 158, 150, 155, 132, 241, 153, 164, 63, 2, 110, 117, 16, 211, 79, 228, 222, 175, 225, 110, 86, 19, 98, 239, 134, 127, 18, 26, 79, 196, 174, 167, 5, 127, 216, 64, 207, 54, 196, 110, 170, 9, 163, 214, 180, 198, 100, 111, 112, 224, 138, 86, 102, 223, 161, 70, 183, 138, 46, 248, 151, 34, 213, 22, 225, 66, 96, 148, 80, 241, 222, 161, 156, 67, 86, 1, 85, 122, 167, 83, 190, 218, 46, 139, 69, 144, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_14(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 1;
  test.test_number =14;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 69, 58, 193, 1, 167, 179, 9, 40, 13, 21, 14, 6, 157, 61, 80, 18, 239, 87, 82, 38, 101, 239, 152, 238, 186, 69, 132, 201, 171, 61, 218, 19, 66, 15, 98, 161, 45, 42, 58, 198, 222, 177, 190, 137, 142, 219, 1, 107, 40, 9, 118, 35, 25, 112, 208, 247, 23, 37, 26, 6, 246, 85, 113, 171, 1, 0, 1, 2, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_15(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 29;
  test.test_number =15;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 54, 117, 110, 215, 161, 47, 141, 140, 15, 102, 69, 212, 196, 175, 216, 116, 162, 106, 204, 36, 203, 120, 140, 189, 82, 213, 150, 245, 155, 138, 244, 69, 155, 61, 33, 7, 220, 38, 130, 155, 29, 209, 36, 135, 222, 216, 178, 219, 184, 72, 83, 221, 162, 96, 245, 236, 250, 37, 189, 80, 146, 74, 25, 220, 1, 0, 1, 2, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 75, 2, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 245;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_16(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 14;
  test.test_number =16;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 236, 33, 189, 156, 229, 129, 16, 4, 5, 246, 191, 32, 236, 62, 1, 167, 50, 97, 244, 149, 202, 198, 148, 48, 9, 162, 101, 97, 29, 222, 67, 143, 209, 189, 57, 41, 30, 225, 142, 36, 7, 86, 19, 26, 84, 215, 250, 176, 65, 186, 139, 118, 207, 143, 195, 85, 115, 90, 217, 130, 161, 224, 180, 128, 197, 157, 74, 22, 69, 54, 130, 198, 78, 89, 193, 15, 127, 49, 223, 167, 171, 154, 251, 49, 210, 159, 220, 98, 142, 105, 80, 181, 137, 163, 40, 102, 15, 55, 238, 26, 188, 11, 6, 72, 46, 159, 155, 229, 97, 98, 76, 29, 78, 168, 60, 145, 69, 104, 211, 59, 202, 14, 163, 40, 210, 77, 186, 115, 2, 1, 1, 3, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_17(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 25;
  test.test_number =17;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 33, 53, 207, 90, 179, 19, 233, 213, 221, 26, 115, 110, 172, 196, 39, 239, 127, 91, 133, 104, 118, 66, 1, 53, 32, 214, 0, 165, 156, 114, 174, 59, 144, 200, 221, 145, 209, 124, 47, 165, 134, 27, 45, 233, 68, 180, 22, 136, 113, 79, 109, 72, 202, 44, 225, 219, 60, 48, 230, 223, 194, 47, 103, 41, 138, 244, 7, 19, 54, 202, 124, 96, 136, 152, 63, 145, 43, 225, 208, 250, 130, 70, 61, 165, 216, 228, 64, 162, 60, 37, 177, 78, 28, 191, 89, 14, 93, 152, 15, 160, 71, 10, 241, 56, 234, 8, 173, 5, 115, 40, 54, 144, 80, 158, 229, 144, 24, 64, 142, 160, 41, 152, 115, 212, 41, 25, 96, 17, 2, 1, 1, 3, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_18(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_create_ok";
  test.test_nonce = 12;
  test.test_number =18;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EdcCWPzZbtWxXeN9Zks833Jz2BF5afzTsydCDKLPuSyr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 116, 130, 173, 189, 9, 174, 105, 44, 246, 89, 193, 215, 239, 99, 187, 244, 152, 188, 143, 71, 16, 135, 83, 94, 72, 62, 18, 113, 91, 237, 230, 152, 133, 141, 180, 238, 179, 114, 254, 223, 44, 1, 77, 3, 175, 32, 138, 25, 19, 115, 83, 198, 99, 70, 21, 178, 171, 144, 155, 242, 108, 109, 159, 199, 1, 0, 1, 2, 202, 136, 163, 91, 211, 208, 249, 248, 255, 28, 28, 201, 37, 102, 55, 26, 97, 94, 204, 176, 221, 215, 101, 87, 20, 12, 154, 168, 30, 18, 177, 69, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_19(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 6;
  test.test_number =19;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2XXbzQjV4nQ3QbGZ8a7339CTa6EQoGyfHoxEia4dpva2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 120, 55, 212, 72, 29, 236, 196, 65, 2, 18, 178, 155, 10, 142, 100, 189, 112, 142, 132, 166, 224, 168, 21, 60, 145, 138, 79, 246, 39, 21, 108, 248, 69, 228, 181, 209, 213, 66, 130, 123, 123, 30, 97, 202, 13, 194, 113, 101, 70, 28, 47, 87, 255, 66, 55, 180, 142, 93, 248, 25, 150, 111, 142, 146, 1, 0, 1, 2, 22, 173, 182, 228, 214, 179, 238, 41, 125, 15, 129, 235, 241, 10, 116, 231, 31, 29, 158, 219, 237, 164, 238, 9, 117, 114, 149, 163, 198, 42, 92, 39, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_20(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 15;
  test.test_number =20;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2XXbzQjV4nQ3QbGZ8a7339CTa6EQoGyfHoxEia4dpva2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 22, 173, 182, 228, 214, 179, 238, 41, 125, 15, 129, 235, 241, 10, 116, 231, 31, 29, 158, 219, 237, 164, 238, 9, 117, 114, 149, 163, 198, 42, 92, 39, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 115;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_21(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 19;
  test.test_number =21;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DXSpM226mZ9XzjjHnFrmMUSe7xj5CbvSsdXYZVgkccrg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 52, 206, 10, 203, 75, 243, 206, 52, 61, 123, 51, 51, 250, 145, 181, 217, 100, 14, 23, 243, 61, 180, 54, 202, 254, 58, 236, 62, 119, 224, 106, 255, 61, 134, 43, 83, 216, 133, 9, 246, 190, 201, 216, 157, 213, 136, 234, 168, 124, 79, 44, 135, 152, 113, 227, 92, 248, 155, 84, 166, 187, 165, 142, 239, 1, 0, 1, 2, 186, 24, 219, 163, 180, 151, 102, 225, 131, 3, 93, 200, 122, 147, 232, 189, 192, 17, 9, 109, 52, 24, 129, 156, 45, 144, 195, 15, 203, 29, 33, 181, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 293;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_22(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 7;
  test.test_number =22;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DXSpM226mZ9XzjjHnFrmMUSe7xj5CbvSsdXYZVgkccrg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 220, 46, 72, 152, 167, 167, 116, 243, 38, 50, 47, 3, 106, 243, 198, 238, 51, 53, 193, 145, 195, 144, 92, 56, 142, 152, 78, 229, 25, 115, 180, 129, 45, 104, 84, 138, 228, 157, 177, 92, 76, 149, 19, 19, 180, 207, 229, 57, 130, 36, 180, 50, 123, 253, 203, 165, 203, 173, 98, 59, 245, 219, 159, 163, 1, 0, 1, 2, 186, 24, 219, 163, 180, 151, 102, 225, 131, 3, 93, 200, 122, 147, 232, 189, 192, 17, 9, 109, 52, 24, 129, 156, 45, 144, 195, 15, 203, 29, 33, 181, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_23(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 10;
  test.test_number =23;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9q5WBv6AEvPHABxvrUHCYB94C9aFEmDMsbokE7ZeNkee",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 133, 90, 203, 43, 58, 73, 78, 104, 112, 29, 226, 221, 43, 93, 50, 10, 92, 200, 11, 78, 147, 118, 151, 123, 135, 128, 176, 138, 63, 224, 168, 20, 5, 70, 218, 207, 180, 168, 191, 157, 146, 251, 52, 138, 31, 58, 138, 108, 41, 105, 12, 223, 200, 37, 253, 150, 170, 118, 168, 55, 155, 204, 48, 178, 1, 0, 1, 2, 131, 46, 119, 81, 29, 207, 93, 70, 8, 147, 99, 86, 245, 159, 99, 26, 250, 51, 173, 95, 69, 245, 180, 178, 45, 204, 122, 57, 136, 254, 215, 43, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_24(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 22;
  test.test_number =24;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9q5WBv6AEvPHABxvrUHCYB94C9aFEmDMsbokE7ZeNkee",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 140, 111, 197, 215, 238, 109, 2, 32, 254, 7, 193, 94, 51, 234, 13, 67, 98, 37, 24, 210, 206, 62, 182, 21, 91, 142, 197, 33, 142, 188, 228, 70, 197, 45, 113, 245, 147, 143, 147, 151, 174, 103, 102, 96, 142, 86, 196, 246, 123, 115, 88, 82, 172, 47, 46, 236, 103, 174, 39, 23, 71, 174, 227, 187, 1, 0, 1, 2, 131, 46, 119, 81, 29, 207, 93, 70, 8, 147, 99, 86, 245, 159, 99, 26, 250, 51, 173, 95, 69, 245, 180, 178, 45, 204, 122, 57, 136, 254, 215, 43, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
