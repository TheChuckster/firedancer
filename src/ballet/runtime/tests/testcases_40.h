int test_975(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 278;
  test.test_number =975;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111GHqvR8KwyrcJ5UJHvwf7RmLtvAnr1uAf27",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111H6X8PLvXQDY3iLaTynKkQ1tUBBJjSNLKeo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 22, 168, 214, 42, 97, 133, 131, 186, 9, 93, 185, 63, 160, 35, 3, 121, 143, 124, 204, 246, 188, 37, 51, 168, 123, 41, 185, 225, 132, 20, 160, 12, 132, 98, 144, 142, 248, 145, 207, 254, 48, 248, 63, 230, 81, 93, 95, 116, 179, 192, 87, 63, 181, 212, 122, 152, 220, 37, 158, 29, 93, 184, 26, 32, 75, 221, 139, 80, 149, 249, 77, 106, 104, 71, 22, 172, 81, 169, 50, 82, 146, 104, 28, 193, 148, 3, 51, 16, 107, 100, 154, 2, 165, 103, 117, 229, 52, 62, 88, 161, 248, 202, 107, 193, 64, 165, 178, 18, 182, 4, 108, 177, 123, 106, 78, 205, 212, 36, 132, 86, 242, 111, 97, 72, 248, 4, 23, 27, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 4, 1, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 341;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_976(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 250;
  test.test_number =976;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111HVrjNTDp7PzvXmiZ1Cf4t9AFogZg9bv9y9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 4, 158, 174, 146, 120, 1, 22, 1, 92, 243, 24, 81, 97, 30, 87, 5, 155, 105, 3, 102, 153, 38, 234, 43, 150, 35, 229, 234, 190, 71, 134, 5, 191, 191, 217, 20, 110, 125, 46, 144, 27, 109, 112, 33, 238, 193, 121, 183, 143, 135, 64, 44, 222, 94, 239, 169, 61, 17, 230, 97, 145, 70, 203, 224, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 0, 2, 8, 10, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 277;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_977(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 319;
  test.test_number =977;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111HVrjNTDp7PzvXmiZ1Cf4t9AFogZg9bv9y9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111HuCLMZX6paToMCre2czPNGS3SBpcrqVzHV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 218, 21, 157, 230, 98, 124, 14, 73, 11, 102, 199, 169, 210, 200, 9, 111, 239, 58, 176, 141, 151, 179, 226, 219, 166, 227, 68, 84, 204, 234, 54, 31, 161, 236, 102, 51, 185, 186, 144, 110, 150, 232, 26, 156, 137, 59, 52, 231, 119, 209, 159, 144, 21, 54, 230, 194, 59, 250, 103, 191, 106, 67, 152, 230, 161, 33, 110, 29, 122, 44, 137, 107, 206, 216, 101, 163, 38, 5, 184, 254, 239, 136, 117, 152, 127, 179, 123, 91, 49, 74, 92, 200, 70, 90, 254, 161, 172, 187, 82, 172, 148, 49, 184, 45, 61, 119, 49, 180, 125, 137, 36, 14, 91, 198, 148, 235, 246, 95, 176, 187, 46, 146, 174, 226, 37, 36, 203, 42, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 4, 1, 0, 8, 10, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 341;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_978(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 260;
  test.test_number =978;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111GHqvR8KwyrcJ5UJHvwf7RmLtvAnr1uAf27",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 134, 207, 178, 51, 135, 155, 87, 33, 85, 127, 86, 241, 169, 13, 164, 209, 224, 204, 126, 107, 6, 182, 143, 226, 124, 253, 94, 126, 105, 84, 9, 36, 251, 190, 68, 85, 120, 111, 103, 186, 249, 116, 116, 206, 57, 208, 190, 49, 129, 196, 120, 121, 237, 64, 197, 200, 74, 172, 178, 30, 188, 175, 142, 238, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 0, 2, 8, 10, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 277;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_979(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 300;
  test.test_number =979;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111GHqvR8KwyrcJ5UJHvwf7RmLtvAnr1uAf27",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111H6X8PLvXQDY3iLaTynKkQ1tUBBJjSNLKeo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 51, 4, 129, 235, 137, 135, 8, 121, 214, 18, 178, 115, 211, 231, 126, 205, 10, 1, 104, 211, 59, 34, 91, 220, 85, 14, 1, 4, 42, 0, 77, 139, 176, 95, 119, 254, 73, 164, 25, 17, 103, 168, 254, 194, 44, 135, 249, 179, 76, 124, 8, 192, 107, 247, 189, 189, 164, 72, 22, 245, 82, 19, 134, 0, 25, 231, 187, 205, 52, 231, 162, 202, 218, 175, 35, 198, 133, 192, 21, 120, 227, 53, 228, 244, 170, 117, 84, 166, 136, 101, 183, 197, 206, 111, 135, 82, 52, 175, 191, 140, 76, 139, 198, 147, 231, 78, 30, 11, 242, 70, 93, 246, 84, 40, 122, 98, 9, 201, 111, 23, 36, 26, 43, 244, 150, 132, 92, 3, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 4, 1, 0, 8, 10, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 341;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_980(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 307;
  test.test_number =980;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111g2nWWXuwsVwzL3XQNhJv3AQK3vzVxiaogT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_3_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 40;
static const uchar test_acc_3_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 84, 113, 126, 184, 186, 89, 43, 52, 31, 94, 91, 95, 131, 131, 60, 25, 201, 156, 51, 159, 181, 245, 193, 252, 252, 58, 147, 5, 49, 74, 217, 57, 5, 95, 12, 9, 153, 78, 170, 212, 7, 87, 172, 39, 98, 248, 113, 95, 235, 95, 32, 244, 80, 10, 98, 149, 50, 49, 108, 31, 160, 88, 147, 192, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 0, 4, 2, 57, 11, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 326;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_981(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 331;
  test.test_number =981;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HbXHzDNb6at14gDG9Ni5kP9Uu9CBd4ka4Jh8DHNVb6Ph",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111g2nWWXuwsVwzL3XQNhJv3AQK3vzVxiaogT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111H6X8PLvXQDY3iLaTynKkQ1tUBBJjSNLKeo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 122, 191, 174, 215, 75, 89, 236, 121, 193, 71, 82, 154, 104, 99, 50, 153, 155, 137, 185, 37, 103, 26, 122, 74, 6, 227, 0, 155, 9, 125, 102, 71, 30, 130, 236, 27, 105, 202, 56, 55, 222, 69, 9, 100, 248, 102, 22, 160, 54, 118, 55, 23, 184, 22, 252, 12, 185, 202, 96, 127, 17, 72, 95, 47, 43, 14, 213, 187, 80, 237, 133, 8, 202, 142, 124, 81, 254, 130, 152, 100, 153, 61, 141, 97, 18, 129, 3, 239, 250, 205, 139, 14, 254, 186, 88, 67, 176, 225, 210, 185, 149, 191, 99, 57, 235, 116, 28, 57, 247, 239, 164, 62, 40, 230, 150, 77, 10, 74, 121, 174, 209, 30, 46, 156, 66, 1, 154, 164, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 1, 4, 0, 57, 11, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 390;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_982(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 340;
  test.test_number =982;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111i3UXS5QPRQGNRDDqVnyWTnmFCTHDWtVyGB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 225, 227, 240, 242, 243, 45, 120, 241, 78, 113, 187, 76, 217, 102, 192, 137, 32, 159, 29, 237, 35, 19, 61, 40, 83, 213, 104, 19, 244, 209, 98, 223, 60, 43, 153, 19, 111, 98, 159, 185, 246, 224, 233, 38, 65, 147, 92, 191, 92, 62, 176, 150, 5, 91, 109, 53, 159, 6, 50, 224, 74, 5, 26, 69, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 0, 4, 2, 57, 11, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 326;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_983(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 370;
  test.test_number =983;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4NE1n1P1kvL23Uky6oC7Zpyz9Hjpxgywm3ciaX92ftKA",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111i3UXS5QPRQGNRDDqVnyWTnmFCTHDWtVyGB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111HuCLMZX6paToMCre2czPNGS3SBpcrqVzHV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 16, 73, 216, 17, 186, 76, 98, 20, 103, 179, 38, 157, 222, 94, 49, 114, 193, 14, 49, 106, 60, 63, 235, 156, 220, 220, 158, 66, 91, 70, 142, 61, 181, 49, 51, 231, 167, 193, 175, 28, 244, 3, 229, 38, 105, 34, 55, 46, 41, 143, 169, 88, 39, 198, 134, 100, 130, 185, 89, 222, 228, 156, 203, 252, 152, 49, 211, 43, 211, 178, 241, 4, 235, 133, 192, 189, 38, 86, 217, 12, 240, 226, 149, 123, 72, 217, 210, 34, 152, 51, 39, 3, 173, 56, 182, 8, 216, 66, 33, 37, 25, 8, 124, 2, 59, 163, 135, 146, 193, 1, 77, 198, 29, 246, 73, 158, 199, 45, 175, 234, 159, 185, 243, 75, 69, 173, 123, 244, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 1, 4, 0, 57, 11, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 390;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_984(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 316;
  test.test_number =984;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 40;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111g2nWWXuwsVwzL3XQNhJv3AQK3vzVxiaogT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 183, 109, 238, 146, 74, 150, 233, 223, 71, 184, 133, 18, 193, 92, 238, 108, 119, 195, 77, 80, 55, 51, 208, 245, 185, 49, 15, 93, 83, 107, 63, 24, 49, 90, 180, 157, 22, 1, 157, 115, 19, 73, 8, 100, 252, 98, 22, 117, 231, 178, 218, 233, 25, 206, 78, 222, 47, 73, 96, 36, 169, 134, 87, 42, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 0, 4, 2, 57, 11, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 326;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_985(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 343;
  test.test_number =985;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HbXHzDNb6at14gDG9Ni5kP9Uu9CBd4ka4Jh8DHNVb6Ph",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111g2nWWXuwsVwzL3XQNhJv3AQK3vzVxiaogT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111H6X8PLvXQDY3iLaTynKkQ1tUBBJjSNLKeo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 144, 164, 198, 173, 233, 34, 210, 55, 62, 161, 115, 153, 48, 61, 200, 5, 108, 254, 119, 8, 211, 155, 239, 93, 42, 88, 211, 206, 20, 115, 71, 154, 242, 41, 177, 72, 33, 156, 137, 112, 162, 88, 0, 191, 62, 46, 104, 93, 10, 102, 228, 36, 124, 226, 108, 71, 106, 235, 179, 62, 95, 178, 114, 231, 44, 160, 174, 133, 164, 24, 180, 220, 215, 116, 139, 161, 16, 49, 69, 18, 190, 12, 219, 69, 46, 254, 144, 186, 247, 126, 184, 204, 188, 252, 177, 230, 4, 118, 241, 203, 59, 166, 77, 156, 6, 112, 2, 34, 200, 160, 145, 39, 138, 90, 117, 86, 5, 64, 157, 83, 217, 41, 0, 91, 52, 111, 135, 35, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 246, 146, 253, 151, 28, 176, 168, 149, 121, 38, 221, 59, 147, 244, 226, 220, 37, 121, 122, 211, 98, 6, 168, 22, 204, 207, 244, 157, 213, 126, 185, 8, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 1, 4, 0, 57, 11, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 97, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 390;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_986(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 351;
  test.test_number =986;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111i3UXS5QPRQGNRDDqVnyWTnmFCTHDWtVyGB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EgVWUh8o98knojjwqGKqVGFkQ9m5AxqKkj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 67, 129, 176, 198, 254, 11, 90, 5, 226, 99, 67, 195, 239, 50, 158, 156, 170, 238, 134, 85, 214, 19, 177, 183, 48, 33, 89, 205, 80, 50, 47, 159, 193, 98, 103, 56, 33, 237, 86, 207, 236, 107, 90, 56, 176, 25, 54, 129, 105, 222, 167, 255, 116, 82, 81, 96, 216, 125, 17, 61, 28, 248, 115, 212, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 0, 4, 2, 57, 11, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 326;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_987(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 390;
  test.test_number =987;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4NE1n1P1kvL23Uky6oC7Zpyz9Hjpxgywm3ciaX92ftKA",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111i3UXS5QPRQGNRDDqVnyWTnmFCTHDWtVyGB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111HuCLMZX6paToMCre2czPNGS3SBpcrqVzHV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 87, 182, 167, 144, 51, 48, 251, 129, 148, 249, 188, 58, 112, 191, 129, 236, 71, 170, 173, 83, 174, 221, 119, 99, 183, 91, 57, 173, 140, 114, 218, 64, 14, 40, 148, 70, 68, 218, 232, 123, 180, 15, 200, 160, 173, 56, 25, 202, 145, 41, 220, 10, 98, 250, 51, 110, 160, 15, 41, 160, 22, 176, 213, 174, 3, 178, 114, 149, 104, 142, 82, 108, 79, 198, 215, 219, 253, 242, 84, 38, 19, 192, 167, 58, 79, 127, 181, 6, 99, 209, 175, 86, 22, 84, 38, 107, 133, 87, 186, 36, 153, 142, 107, 197, 32, 200, 250, 99, 79, 89, 219, 165, 220, 245, 189, 6, 160, 95, 242, 140, 100, 212, 172, 156, 152, 5, 14, 160, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 50, 2, 248, 215, 224, 208, 75, 78, 3, 212, 166, 224, 221, 41, 252, 73, 130, 187, 153, 100, 50, 88, 199, 66, 244, 169, 187, 215, 133, 143, 211, 73, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 1, 4, 0, 57, 11, 0, 0, 0, 1, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 116, 101, 115, 116, 32, 115, 101, 101, 100, 0, 0, 0, 0, 0, 0, 0, 102, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 390;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_988(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 412;
  test.test_number =988;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 40;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111MXEmDYChDCdgi77RFPzFjPt86j97FwkV8b",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 36, 138, 232, 241, 111, 113, 156, 131, 55, 114, 207, 141, 24, 116, 163, 198, 205, 245, 22, 252, 141, 217, 106, 76, 60, 105, 36, 254, 137, 130, 105, 130, 26, 183, 128, 83, 235, 147, 210, 28, 158, 88, 135, 187, 233, 210, 108, 210, 131, 113, 255, 216, 132, 217, 117, 198, 88, 179, 201, 217, 77, 171, 145, 221, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 14, 12, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 250;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_989(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[5] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[6] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[14] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[29] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[41] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 432;
  test.test_number =989;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 40;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111GHqvR8KwyrcJ5UJHvwf7RmLtvAnr1uAf27",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111MXEmDYChDCdgi77RFPzFjPt86j97FwkV8b",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111MvaNCeVyvP6ZXYFWGpKaDX9ujEQ3yBLKSw",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 117, 230, 13, 235, 233, 49, 104, 189, 243, 139, 171, 81, 186, 56, 171, 189, 191, 133, 242, 46, 22, 241, 248, 191, 177, 159, 163, 209, 216, 190, 3, 220, 81, 172, 56, 178, 137, 255, 143, 83, 182, 243, 99, 191, 98, 171, 56, 120, 159, 128, 172, 150, 149, 88, 232, 80, 78, 65, 83, 219, 209, 149, 125, 252, 94, 176, 51, 147, 7, 209, 90, 6, 78, 232, 222, 9, 244, 254, 169, 133, 2, 15, 205, 118, 83, 61, 176, 109, 88, 107, 162, 233, 79, 102, 130, 236, 176, 200, 186, 18, 175, 104, 237, 238, 133, 56, 37, 221, 240, 8, 179, 79, 35, 205, 39, 6, 223, 239, 164, 27, 94, 124, 236, 37, 63, 196, 65, 42, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 51, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 14, 12, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 314;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_990(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 352;
  test.test_number =990;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111HVrjNTDp7PzvXmiZ1Cf4t9AFogZg9bv9y9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 166, 200, 54, 253, 28, 159, 148, 3, 224, 29, 30, 168, 189, 184, 98, 132, 228, 218, 153, 87, 10, 243, 136, 34, 4, 230, 67, 38, 106, 66, 189, 35, 137, 255, 106, 208, 160, 81, 63, 58, 193, 194, 209, 22, 50, 66, 190, 220, 85, 191, 126, 166, 204, 124, 47, 80, 250, 96, 26, 248, 40, 253, 225, 182, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 14, 12, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 250;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_991(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::new_behavior";
  test.test_nonce = 365;
  test.test_number =991;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 40;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111EH9uVaqWRxHuzJbroqzX18yxmeW8TjFVSP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111FtWKS22fGg9RG3ACuXKnwe57HfXuJfaphm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111HVrjNTDp7PzvXmiZ1Cf4t9AFogZg9bv9y9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111HuCLMZX6paToMCre2czPNGS3SBpcrqVzHV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 133, 125, 213, 198, 254, 128, 4, 34, 49, 225, 98, 11, 150, 241, 177, 72, 190, 62, 141, 74, 77, 216, 244, 44, 140, 82, 41, 37, 1, 20, 27, 225, 211, 141, 199, 246, 61, 197, 147, 49, 185, 66, 195, 105, 110, 122, 246, 120, 144, 148, 91, 142, 210, 48, 75, 239, 100, 254, 236, 117, 253, 94, 250, 250, 123, 72, 141, 4, 205, 191, 157, 90, 245, 249, 98, 139, 226, 203, 9, 142, 62, 147, 141, 96, 240, 226, 41, 198, 29, 89, 101, 194, 214, 32, 218, 20, 31, 156, 36, 194, 17, 100, 129, 235, 18, 224, 121, 141, 24, 170, 212, 31, 11, 194, 29, 1, 75, 59, 108, 143, 5, 228, 188, 9, 187, 196, 60, 113, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 14, 12, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 314;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_992(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[1] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[2] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[3] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[4] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[11] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[22] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[23] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[31] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[37] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[42] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 131;
  test.test_number =992;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 5;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_3_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 40;
static const uchar test_acc_3_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_4_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_4_data;
test_acc->result_data_len = 17;
static const uchar test_acc_4_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_4_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 0, 4, 1, 2, 4, 9, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 209;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_993(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[1] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[2] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[3] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[4] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[11] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[22] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[23] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[31] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[37] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[42] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 180;
  test.test_number =993;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111H6X8PLvXQDY3iLaTynKkQ1tUBBJjSNLKeo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111K7D9JtQxx7rRoWGu6szLpeFQKhbSzYFVEX",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 3, 30, 24, 104, 118, 186, 215, 24, 158, 83, 159, 108, 44, 97, 165, 48, 170, 249, 92, 57, 77, 252, 73, 253, 193, 1, 150, 242, 162, 52, 16, 176, 150, 192, 119, 188, 213, 244, 9, 16, 239, 165, 248, 131, 210, 192, 56, 6, 118, 78, 201, 42, 167, 146, 96, 19, 165, 56, 215, 92, 171, 29, 116, 171, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 2, 0, 4, 9, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 273;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_994(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 170;
  test.test_number =994;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 5;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 40;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111KWYkHziFfJKJcwQz8JKfJmXBxCrPhmqKYs",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_4_data[] = {0};
test_acc->data = test_acc_4_data;
test_acc->result_data_len = 0;
static const uchar test_acc_4_result_data[] = {0};
test_acc->result_data = test_acc_4_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 4, 5, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 0, 4, 1, 2, 4, 9, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 209;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_995(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 193;
  test.test_number =995;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_1_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 17;
static const uchar test_acc_1_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111K7D9JtQxx7rRoWGu6szLpeFQKhbSzYFVEX",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111KWYkHziFfJKJcwQz8JKfJmXBxCrPhmqKYs",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111KutMH71YNUnBSNZ59ieyntnyai7LR1R9sD",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 93, 182, 89, 24, 146, 240, 199, 13, 129, 182, 30, 177, 99, 241, 100, 10, 1, 89, 171, 150, 190, 61, 110, 106, 18, 23, 42, 124, 120, 13, 92, 153, 92, 187, 170, 234, 230, 52, 80, 221, 168, 163, 243, 248, 12, 145, 189, 53, 31, 88, 230, 178, 236, 93, 49, 80, 237, 86, 69, 101, 107, 245, 210, 234, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 25, 44, 92, 81, 33, 140, 201, 76, 61, 74, 241, 127, 88, 218, 238, 8, 155, 161, 253, 68, 227, 219, 217, 138, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 2, 0, 4, 9, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 273;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_996(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[1] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[2] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[3] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[4] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[11] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[22] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[23] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[31] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[37] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[42] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 218;
  test.test_number =996;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111KWYkHziFfJKJcwQz8JKfJmXBxCrPhmqKYs",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_3_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 40;
static const uchar test_acc_3_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 18, 129, 78, 184, 13, 215, 223, 217, 8, 23, 3, 173, 194, 28, 17, 49, 1, 121, 249, 55, 255, 36, 79, 66, 188, 119, 201, 229, 145, 45, 1, 78, 72, 255, 113, 9, 145, 68, 24, 47, 64, 205, 48, 220, 83, 1, 58, 128, 166, 55, 59, 84, 65, 49, 212, 132, 95, 191, 169, 99, 41, 88, 23, 110, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 0, 2, 8, 10, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 277;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_997(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[1] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[2] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[3] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[4] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[11] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[22] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[23] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[24] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[29] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[30] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[31] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[37] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[42] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[43] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 322;
  test.test_number =997;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111FVAiSujNZVgYSc27t6zUTWoKfAGxbRzzPR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111KWYkHziFfJKJcwQz8JKfJmXBxCrPhmqKYs",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111KutMH71YNUnBSNZ59ieyntnyai7LR1R9sD",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111GhBXQEdEh35AtuSNxMzRutcgYg3nj8kVLT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111LKDxGDJq5fF4FohAB8zJH24mDDNH8EzzBZ",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 161, 116, 114, 85, 21, 27, 251, 137, 41, 127, 4, 62, 155, 26, 116, 63, 112, 173, 247, 9, 110, 23, 17, 75, 209, 207, 5, 4, 53, 207, 0, 160, 113, 148, 219, 162, 251, 235, 181, 10, 131, 52, 255, 201, 227, 196, 45, 200, 14, 30, 17, 249, 234, 39, 90, 207, 50, 220, 102, 209, 182, 114, 29, 224, 108, 79, 151, 145, 129, 199, 255, 143, 243, 28, 206, 122, 77, 41, 135, 146, 150, 167, 220, 85, 107, 41, 214, 6, 136, 125, 97, 215, 211, 1, 124, 175, 224, 75, 184, 210, 21, 224, 194, 15, 63, 177, 220, 128, 185, 36, 146, 57, 8, 80, 250, 172, 161, 185, 172, 35, 190, 157, 197, 69, 12, 198, 189, 29, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 4, 1, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 341;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_998(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 219;
  test.test_number =998;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111LKDxGDJq5fF4FohAB8zJH24mDDNH8EzzBZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 88, 97, 67, 173, 48, 40, 95, 121, 209, 98, 167, 17, 46, 57, 116, 249, 91, 218, 73, 221, 172, 43, 114, 196, 206, 60, 130, 73, 199, 103, 24, 0, 212, 237, 49, 133, 45, 115, 230, 205, 252, 250, 153, 35, 143, 30, 167, 237, 155, 44, 42, 32, 154, 62, 58, 143, 99, 223, 151, 90, 109, 178, 58, 102, 1, 1, 3, 5, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 1, 4, 0, 2, 8, 10, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 277;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_999(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_stake_checked_instructions::old_behavior";
  test.test_nonce = 318;
  test.test_number =999;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111111JJXwLfpPXkvgAdzj43KhrPhq4h5Za55pbq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 40;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111LKDxGDJq5fF4FohAB8zJH24mDDNH8EzzBZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111LiZZFKc7nqhw5EqFCZKcm9LYqidDqUapVu",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "1111111JhsYKn7gEwPYz58p5Tf2LWychCLWHJfevB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111M7uAERuQW2AotfyLDyewFGcLUDtAYiAepF",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_3_data[] = {0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 0;
static const uchar test_acc_3_result_data[] = {0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 47, 76, 59, 6, 5, 117, 66, 244, 81, 35, 126, 22, 88, 37, 87, 43, 78, 185, 7, 96, 63, 109, 41, 132, 220, 88, 145, 15, 114, 215, 147, 64, 228, 212, 18, 249, 37, 238, 204, 7, 173, 249, 177, 111, 33, 109, 86, 102, 74, 143, 101, 111, 189, 137, 144, 80, 69, 67, 18, 158, 208, 150, 165, 156, 206, 217, 183, 161, 111, 21, 90, 124, 177, 81, 125, 84, 26, 120, 199, 255, 62, 126, 145, 86, 151, 65, 97, 181, 190, 67, 23, 210, 68, 120, 115, 159, 223, 118, 88, 152, 251, 216, 205, 224, 152, 108, 146, 220, 217, 63, 98, 179, 220, 196, 152, 253, 74, 91, 196, 194, 233, 146, 74, 87, 183, 184, 205, 90, 2, 2, 2, 5, 0, 0, 0, 0, 0, 0, 0, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 4, 2, 4, 1, 0, 8, 10, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 341;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
