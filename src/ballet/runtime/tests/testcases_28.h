int test_675(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 65;
  test.test_number =675;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 130, 238, 25, 176, 95, 194, 30, 69, 177, 203, 123, 89, 81, 208, 21, 146, 249, 128, 2, 78, 97, 7, 51, 178, 110, 189, 15, 203, 136, 201, 136, 245, 95, 122, 125, 122, 191, 16, 233, 248, 199, 153, 48, 254, 3, 106, 39, 218, 158, 51, 26, 22, 37, 81, 181, 111, 10, 118, 44, 22, 148, 209, 174, 170, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_676(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 126;
  test.test_number =676;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 5261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 17, 253, 253, 188, 178, 87, 154, 87, 196, 175, 53, 83, 158, 51, 78, 34, 255, 177, 56, 173, 139, 14, 158, 52, 102, 75, 120, 107, 105, 125, 69, 162, 206, 173, 67, 193, 201, 206, 91, 121, 101, 193, 255, 3, 120, 48, 187, 118, 17, 117, 225, 33, 25, 245, 92, 117, 174, 244, 183, 141, 193, 195, 173, 193, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_677(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 185;
  test.test_number =677;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 248, 47, 148, 244, 32, 89, 64, 5, 121, 58, 126, 201, 93, 200, 156, 225, 103, 81, 82, 66, 187, 3, 196, 226, 190, 97, 3, 186, 109, 97, 34, 53, 209, 221, 70, 212, 74, 167, 59, 219, 135, 12, 169, 79, 242, 171, 149, 22, 8, 66, 81, 223, 119, 48, 134, 239, 196, 238, 4, 182, 165, 119, 34, 97, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_678(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 224;
  test.test_number =678;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 21, 101, 208, 57, 78, 133, 67, 145, 117, 6, 242, 233, 222, 4, 229, 51, 112, 82, 188, 128, 20, 26, 141, 118, 125, 161, 180, 45, 199, 71, 230, 20, 194, 146, 196, 227, 191, 248, 139, 123, 184, 24, 144, 42, 136, 105, 135, 255, 124, 59, 21, 227, 81, 111, 171, 153, 161, 44, 133, 77, 191, 208, 212, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_679(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 258;
  test.test_number =679;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 5261762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 163, 184, 24, 115, 171, 165, 233, 141, 89, 148, 134, 75, 61, 17, 205, 61, 46, 127, 237, 169, 88, 227, 210, 230, 0, 161, 39, 191, 39, 27, 50, 100, 155, 50, 54, 170, 128, 138, 246, 233, 185, 205, 193, 123, 87, 188, 62, 149, 221, 103, 168, 169, 128, 125, 169, 94, 213, 122, 212, 187, 18, 188, 160, 84, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_680(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 88;
  test.test_number =680;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 88, 132, 250, 21, 65, 253, 44, 19, 101, 202, 58, 87, 210, 37, 104, 6, 50, 78, 197, 59, 29, 56, 112, 101, 238, 222, 56, 105, 189, 251, 215, 92, 5, 48, 7, 198, 199, 115, 226, 126, 252, 243, 105, 69, 54, 12, 47, 134, 137, 197, 144, 195, 34, 137, 199, 15, 177, 29, 198, 8, 167, 172, 212, 162, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_681(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 102;
  test.test_number =681;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 138, 252, 103, 208, 39, 58, 21, 116, 179, 248, 112, 145, 122, 104, 142, 78, 248, 174, 181, 241, 205, 225, 97, 159, 250, 145, 243, 218, 123, 236, 200, 108, 12, 121, 209, 225, 142, 8, 57, 77, 49, 108, 194, 158, 76, 184, 202, 54, 184, 125, 9, 7, 234, 125, 251, 99, 188, 164, 120, 201, 75, 3, 8, 184, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_682(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 160;
  test.test_number =682;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 5261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 35, 162, 215, 117, 57, 212, 125, 38, 248, 167, 230, 200, 102, 245, 88, 182, 188, 129, 166, 103, 185, 188, 68, 253, 133, 99, 59, 139, 189, 198, 112, 203, 175, 245, 66, 36, 120, 131, 249, 153, 192, 71, 107, 51, 91, 101, 120, 198, 221, 92, 171, 39, 83, 23, 253, 32, 132, 226, 218, 208, 206, 141, 207, 111, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_683(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 194;
  test.test_number =683;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 98, 68, 211, 73, 141, 128, 129, 62, 8, 79, 245, 96, 254, 158, 247, 114, 166, 174, 150, 12, 156, 93, 120, 118, 112, 57, 119, 19, 84, 116, 129, 171, 224, 201, 45, 246, 209, 14, 241, 152, 138, 180, 139, 181, 197, 19, 131, 132, 183, 127, 206, 98, 129, 104, 204, 158, 176, 171, 98, 127, 39, 230, 27, 53, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_684(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 234;
  test.test_number =684;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 119, 7, 69, 205, 99, 116, 101, 94, 137, 119, 104, 147, 93, 180, 91, 65, 188, 170, 188, 205, 136, 77, 205, 179, 163, 18, 95, 195, 50, 9, 93, 8, 94, 165, 31, 75, 8, 182, 89, 82, 71, 17, 255, 55, 94, 185, 124, 170, 205, 157, 126, 101, 73, 46, 78, 207, 194, 108, 74, 33, 183, 255, 27, 7, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_685(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 268;
  test.test_number =685;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 5261762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 108, 168, 33, 48, 136, 161, 106, 253, 170, 231, 54, 15, 194, 148, 56, 231, 10, 19, 127, 216, 9, 47, 31, 220, 223, 12, 48, 162, 117, 137, 192, 82, 148, 208, 209, 89, 61, 225, 29, 41, 146, 16, 95, 204, 21, 189, 134, 81, 69, 34, 54, 193, 211, 177, 218, 93, 145, 98, 85, 243, 240, 21, 106, 171, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_686(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 108;
  test.test_number =686;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 35, 248, 86, 104, 154, 240, 220, 183, 105, 195, 176, 48, 147, 225, 193, 182, 244, 172, 74, 145, 179, 69, 227, 166, 208, 75, 80, 251, 137, 56, 129, 185, 36, 77, 143, 238, 99, 107, 50, 228, 11, 192, 234, 185, 44, 135, 160, 65, 59, 148, 210, 132, 45, 222, 2, 0, 136, 215, 121, 152, 236, 121, 27, 247, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_687(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 145;
  test.test_number =687;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 152, 204, 45, 63, 75, 30, 198, 77, 252, 215, 79, 159, 193, 58, 135, 149, 77, 138, 59, 252, 100, 83, 158, 215, 74, 106, 59, 240, 34, 72, 249, 57, 137, 127, 204, 234, 91, 135, 160, 181, 199, 163, 127, 42, 23, 27, 69, 144, 138, 176, 103, 241, 211, 197, 65, 139, 112, 251, 105, 104, 253, 37, 106, 70, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_688(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 195;
  test.test_number =688;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 28, 223, 253, 65, 38, 80, 20, 220, 0, 122, 82, 91, 53, 115, 217, 216, 158, 146, 246, 25, 11, 232, 29, 203, 106, 128, 9, 92, 27, 218, 160, 118, 120, 151, 45, 253, 216, 172, 18, 56, 194, 158, 252, 13, 193, 144, 173, 58, 216, 10, 199, 12, 196, 188, 66, 33, 251, 128, 5, 236, 6, 166, 88, 150, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_689(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 240;
  test.test_number =689;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 39, 83, 203, 212, 241, 145, 26, 159, 240, 252, 180, 4, 79, 110, 188, 124, 182, 57, 42, 162, 202, 238, 165, 23, 250, 23, 179, 152, 13, 224, 92, 122, 199, 157, 215, 29, 75, 1, 122, 254, 95, 57, 248, 75, 80, 28, 70, 191, 122, 191, 245, 156, 197, 188, 144, 99, 66, 132, 82, 213, 107, 214, 5, 219, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_690(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[43] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(drop_redundant_turbine_path);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 41;
  test.test_number =690;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2onLF6jBJ2H3pP82Zg3D18hXixEuCLgmk9i7syeLzziz",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "D3y8w1tHhByo5JKfWq1AuZ31cKxSyCLzy2UFV3ppEmEZ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 89, 79, 127, 194, 198, 215, 144, 72, 147, 227, 50, 74, 108, 6, 79, 104, 89, 3, 198, 105, 235, 237, 35, 58, 131, 182, 31, 75, 29, 104, 187, 235, 220, 223, 86, 31, 132, 173, 219, 197, 71, 129, 193, 102, 88, 200, 134, 7, 156, 96, 253, 19, 163, 18, 54, 187, 246, 141, 164, 240, 37, 89, 90, 102, 1, 0, 1, 3, 26, 215, 169, 51, 223, 152, 227, 99, 111, 15, 111, 84, 235, 45, 58, 139, 81, 151, 90, 24, 89, 8, 147, 185, 217, 130, 227, 2, 197, 172, 116, 191, 179, 14, 224, 246, 39, 106, 15, 128, 223, 16, 234, 41, 75, 248, 155, 123, 99, 88, 163, 7, 233, 194, 171, 199, 33, 95, 179, 228, 8, 85, 202, 26, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_691(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 121;
  test.test_number =691;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 43, 42, 166, 242, 213, 193, 241, 63, 113, 36, 221, 253, 145, 129, 73, 69, 160, 255, 196, 99, 51, 106, 196, 92, 209, 230, 17, 46, 14, 67, 216, 238, 45, 246, 169, 224, 218, 168, 147, 14, 148, 231, 18, 24, 100, 88, 196, 131, 113, 120, 69, 82, 221, 191, 117, 228, 46, 182, 79, 243, 141, 3, 229, 61, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_692(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 173;
  test.test_number =692;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 150, 2, 19, 65, 87, 28, 230, 153, 3, 246, 165, 230, 84, 56, 85, 1, 220, 156, 86, 186, 195, 227, 243, 17, 180, 92, 32, 76, 151, 135, 54, 195, 137, 101, 106, 244, 58, 4, 134, 110, 108, 140, 216, 245, 49, 83, 71, 167, 151, 126, 246, 127, 161, 26, 186, 149, 220, 170, 143, 18, 5, 196, 53, 149, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_693(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 215;
  test.test_number =693;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 33, 143, 52, 36, 215, 19, 216, 91, 135, 180, 243, 46, 129, 115, 91, 25, 250, 255, 65, 101, 221, 167, 37, 119, 154, 60, 148, 1, 16, 45, 113, 90, 45, 78, 188, 148, 204, 5, 158, 47, 82, 91, 32, 80, 6, 51, 46, 153, 150, 93, 39, 20, 224, 19, 202, 28, 245, 224, 192, 207, 76, 198, 153, 235, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_694(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 261;
  test.test_number =694;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 134, 203, 156, 249, 242, 167, 40, 218, 135, 133, 7, 182, 150, 198, 94, 20, 129, 218, 216, 234, 215, 235, 33, 147, 221, 131, 209, 160, 165, 160, 109, 224, 187, 142, 97, 223, 14, 219, 226, 5, 91, 32, 125, 79, 85, 79, 122, 173, 1, 217, 155, 159, 5, 134, 199, 123, 63, 244, 246, 84, 156, 11, 171, 87, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_695(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 71;
  test.test_number =695;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 193, 7, 109, 89, 170, 245, 184, 228, 113, 227, 119, 176, 51, 3, 82, 191, 237, 182, 113, 65, 94, 206, 117, 148, 207, 72, 127, 213, 123, 49, 6, 51, 115, 33, 9, 16, 56, 126, 179, 21, 215, 250, 168, 138, 164, 187, 151, 120, 151, 73, 196, 251, 251, 141, 133, 187, 86, 95, 40, 177, 81, 236, 62, 248, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_696(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[2] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[10] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[11] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[16] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[18] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[25] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[26] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[42] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(clean_up_delegation_errors);
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 107;
  test.test_number =696;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "34EqnSHtG7Li4KswcyrcZgGGksv4sacnmPq8ca1CuzAo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DSYuVtwrpPPZDsZ3MDrm8p8znxQVJNUVXLKFyb4HrUPU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 68, 175, 39, 96, 199, 119, 165, 228, 144, 173, 128, 134, 220, 231, 75, 32, 167, 89, 65, 65, 239, 87, 69, 95, 163, 241, 171, 49, 106, 231, 202, 186, 62, 34, 142, 134, 119, 111, 170, 239, 238, 255, 152, 185, 202, 175, 233, 250, 232, 208, 48, 6, 238, 54, 117, 129, 86, 53, 193, 112, 183, 70, 196, 157, 1, 0, 1, 3, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 184, 215, 214, 174, 150, 34, 70, 71, 74, 70, 244, 172, 68, 249, 86, 132, 183, 100, 33, 67, 128, 192, 104, 175, 83, 88, 190, 61, 92, 248, 185, 235, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_697(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[2] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[10] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[11] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[16] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[18] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[25] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[26] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[42] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(clean_up_delegation_errors);
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 156;
  test.test_number =697;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "34EqnSHtG7Li4KswcyrcZgGGksv4sacnmPq8ca1CuzAo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DSYuVtwrpPPZDsZ3MDrm8p8znxQVJNUVXLKFyb4HrUPU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 21, 48, 254, 223, 243, 32, 155, 80, 167, 100, 45, 21, 195, 215, 121, 35, 115, 56, 124, 52, 15, 43, 10, 154, 102, 111, 63, 92, 64, 50, 37, 208, 91, 204, 60, 140, 93, 45, 92, 237, 166, 115, 61, 66, 61, 89, 190, 213, 161, 3, 36, 166, 109, 30, 62, 74, 232, 127, 215, 10, 44, 240, 255, 1, 0, 1, 3, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 184, 215, 214, 174, 150, 34, 70, 71, 74, 70, 244, 172, 68, 249, 86, 132, 183, 100, 33, 67, 128, 192, 104, 175, 83, 88, 190, 61, 92, 248, 185, 235, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_698(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[2] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[10] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[11] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[16] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[18] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[25] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[26] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[42] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(clean_up_delegation_errors);
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 188;
  test.test_number =698;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "34EqnSHtG7Li4KswcyrcZgGGksv4sacnmPq8ca1CuzAo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DSYuVtwrpPPZDsZ3MDrm8p8znxQVJNUVXLKFyb4HrUPU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978880UL;
test_acc->result_lamports = 2978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 239, 215, 94, 197, 76, 139, 213, 226, 79, 56, 96, 132, 145, 133, 184, 240, 117, 121, 144, 88, 252, 104, 201, 45, 128, 114, 143, 53, 92, 127, 161, 176, 184, 137, 160, 218, 8, 53, 2, 11, 73, 238, 82, 61, 156, 137, 238, 130, 196, 143, 32, 168, 243, 122, 22, 233, 192, 131, 235, 15, 85, 108, 9, 56, 1, 0, 1, 3, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 184, 215, 214, 174, 150, 34, 70, 71, 74, 70, 244, 172, 68, 249, 86, 132, 183, 100, 33, 67, 128, 192, 104, 175, 83, 88, 190, 61, 92, 248, 185, 235, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_699(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[2] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[10] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[11] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[16] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[18] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[24] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[25] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[26] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[34] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[35] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[36] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[42] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(clean_up_delegation_errors);
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 228;
  test.test_number =699;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "34EqnSHtG7Li4KswcyrcZgGGksv4sacnmPq8ca1CuzAo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DSYuVtwrpPPZDsZ3MDrm8p8znxQVJNUVXLKFyb4HrUPU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 26, 115, 16, 59, 21, 160, 77, 76, 137, 3, 183, 255, 65, 154, 112, 226, 159, 249, 213, 149, 193, 67, 105, 187, 135, 172, 55, 228, 138, 167, 221, 158, 66, 36, 170, 29, 11, 252, 59, 198, 17, 159, 245, 247, 119, 206, 26, 99, 62, 50, 212, 247, 202, 226, 167, 241, 126, 21, 163, 205, 44, 227, 24, 173, 1, 0, 1, 3, 30, 139, 196, 54, 74, 106, 114, 95, 24, 144, 49, 211, 18, 197, 151, 209, 199, 252, 231, 180, 175, 88, 125, 84, 154, 145, 171, 141, 157, 170, 155, 204, 184, 215, 214, 174, 150, 34, 70, 71, 74, 70, 244, 172, 68, 249, 86, 132, 183, 100, 33, 67, 128, 192, 104, 175, 83, 88, 190, 61, 92, 248, 185, 235, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
