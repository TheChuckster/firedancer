int test_1500(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[2] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[3] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[10] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[12] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[13] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[16] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[17] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[20] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[21] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[26] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[27] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[28] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[29] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[33] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[34] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[37] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[38] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[39] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[40] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[41] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[42] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[43] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[44] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[45] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[46] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 16;
  test.test_number =1500;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111131HgKZP9GC8vDMGJ35FG79EfMtnTcTgakQf",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 45;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 45;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112x4yVgWkxWhDCooBLstbZGEV4rkQ4mov5su",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112xsehejMXw48xSfTWvjGCEV2e7kuxCH5kWb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 48, 11, 140, 106, 30, 94, 209, 217, 183, 238, 203, 142, 54, 30, 155, 14, 6, 204, 196, 28, 107, 216, 105, 50, 64, 103, 189, 144, 66, 65, 54, 15, 16, 78, 248, 57, 197, 42, 115, 85, 17, 206, 54, 248, 129, 178, 181, 181, 18, 127, 245, 22, 213, 98, 60, 2, 142, 26, 21, 43, 130, 8, 99, 189, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1501(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[5] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[7] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[8] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[9] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[10] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[11] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[12] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[13] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[16] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[17] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[21] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[23] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[24] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[29] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[33] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[38] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[40] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[41] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[44] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 10;
  test.test_number =1501;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112x4yVgWkxWhDCooBLstbZGEV4rkQ4mov5su",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112xsehejMXw48xSfTWvjGCEV2e7kuxCH5kWb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 106, 144, 138, 68, 175, 39, 109, 74, 69, 50, 201, 152, 155, 78, 13, 96, 160, 83, 134, 52, 27, 3, 43, 156, 59, 179, 174, 136, 5, 169, 126, 242, 231, 226, 196, 214, 203, 66, 11, 16, 111, 239, 106, 93, 93, 186, 171, 226, 93, 150, 232, 153, 143, 118, 246, 211, 163, 77, 21, 205, 136, 244, 20, 158, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1502(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[1] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[2] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[3] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[4] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[5] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[8] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[10] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[12] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[13] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[14] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[17] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[18] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[19] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[21] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[24] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[29] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[30] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[31] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[32] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[33] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[34] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[35] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[36] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[37] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[40] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[41] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[42] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[43] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[44] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 2;
  test.test_number =1502;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112xUK6fd4FDsg5dEKRuJvskMkrVFf1V3VvCF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112xsehejMXw48xSfTWvjGCEV2e7kuxCH5kWb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 75, 65, 193, 187, 42, 47, 188, 248, 8, 222, 5, 241, 92, 31, 77, 0, 220, 105, 122, 229, 43, 49, 215, 64, 149, 15, 86, 158, 26, 233, 163, 200, 56, 195, 43, 42, 186, 91, 84, 65, 172, 39, 69, 156, 239, 33, 53, 82, 49, 153, 134, 83, 200, 159, 90, 168, 118, 114, 105, 132, 14, 117, 149, 252, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1503(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[2] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[3] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[6] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[7] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[8] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[9] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[10] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[11] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[12] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[13] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[14] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[15] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[16] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[22] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[23] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[24] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[25] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[26] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[27] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[28] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[30] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[33] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[36] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[37] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[38] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[39] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[40] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[41] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[42] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[43] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[46] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 25;
  test.test_number =1503;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 45;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 45;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112xUK6fd4FDsg5dEKRuJvskMkrVFf1V3VvCF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112xsehejMXw48xSfTWvjGCEV2e7kuxCH5kWb",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "111111326MXXbjqcVqxz8aD85vk7VCw9nyVt9kR3M",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 1;
test_acc->rent_epoch = 0;
test_acc->data_len = 36;
static const uchar test_acc_3_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 36;
static const uchar test_acc_3_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 53, 73, 234, 24, 212, 150, 237, 172, 144, 225, 111, 173, 74, 35, 120, 17, 139, 193, 189, 59, 58, 95, 250, 213, 23, 161, 172, 95, 234, 195, 47, 187, 69, 64, 243, 156, 109, 62, 128, 192, 32, 10, 99, 142, 0, 151, 126, 65, 155, 27, 110, 97, 133, 57, 223, 220, 19, 105, 45, 21, 157, 30, 73, 198, 1, 1, 1, 5, 0, 0, 0, 0, 0, 0, 1, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 3, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 273;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1504(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 11;
  test.test_number =1504;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ztLiaGqyUxTLXq9x3pvnf7PaGHCfkSzv6K",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111131HgKZP9GC8vDMGJ35FG79EfMtnTcTgakQf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 54, 159, 65, 180, 28, 164, 108, 179, 139, 24, 91, 129, 103, 215, 88, 101, 215, 19, 200, 95, 50, 245, 164, 253, 74, 39, 203, 78, 135, 134, 19, 192, 93, 164, 55, 29, 15, 142, 88, 228, 173, 254, 121, 3, 174, 187, 239, 45, 222, 194, 241, 35, 10, 27, 86, 133, 93, 187, 134, 98, 135, 79, 30, 9, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1505(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 20;
  test.test_number =1505;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111326MXXbjqcVqxz8aD85vk7VCw9nyVt9kR3M",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 45;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 45;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ztLiaGqyUxTLXq9x3pvnf7PaGHCfkSzv6K",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111131HgKZP9GC8vDMGJ35FG79EfMtnTcTgakQf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112ygKucwx7MR4i5XjgyZvqCjaDNmRqckFR9H",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 67, 44, 135, 247, 239, 194, 25, 140, 73, 131, 229, 202, 73, 16, 91, 165, 193, 26, 38, 244, 124, 127, 65, 60, 140, 233, 35, 243, 69, 22, 190, 35, 189, 241, 222, 138, 236, 100, 209, 49, 162, 227, 127, 162, 198, 39, 227, 38, 132, 136, 246, 10, 137, 95, 76, 70, 195, 223, 200, 163, 4, 189, 13, 254, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 35, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1506(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 26;
  test.test_number =1506;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 4;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111132Vh8Wi38KgJqoZiJ9WG4bcUinJESbPLFMh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 45;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 45;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ztLiaGqyUxTLXq9x3pvnf7PaGHCfkSzv6K",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111131HgKZP9GC8vDMGJ35FG79EfMtnTcTgakQf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
fd_base58_decode_32( "11111132u2jVpLR2rmiczrPAvbP5jkWQoVPJcv5g3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 1;
test_acc->rent_epoch = 0;
test_acc->data_len = 36;
static const uchar test_acc_3_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_3_data;
test_acc->result_data_len = 36;
static const uchar test_acc_3_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_3_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 67, 175, 224, 48, 87, 173, 199, 40, 245, 179, 187, 92, 220, 27, 70, 215, 5, 163, 217, 146, 159, 237, 24, 110, 162, 63, 6, 75, 182, 145, 42, 76, 220, 153, 121, 183, 195, 206, 250, 37, 123, 79, 182, 227, 194, 129, 173, 213, 86, 245, 151, 231, 236, 255, 130, 240, 193, 82, 52, 19, 175, 230, 68, 116, 1, 1, 1, 5, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 36, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 37, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 4, 4, 2, 1, 0, 3, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 273;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1507(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_close";
  test.test_nonce = 4;
  test.test_number =1507;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111131h1vYVSYuKP6AhS86fbRdMw9XHiZAvAaj1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111112ztLiaGqyUxTLXq9x3pvnf7PaGHCfkSzv6K",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111131HgKZP9GC8vDMGJ35FG79EfMtnTcTgakQf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 2UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111112z5fWc4FQ4bXatxsmzzG9grr11GgnKyqFTd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111112zV17bAYgmmzTiQ1s2QbUAz7ndmwj3DR5my",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 61, 11, 58, 68, 130, 164, 242, 57, 84, 96, 44, 83, 221, 60, 155, 38, 120, 232, 117, 202, 52, 188, 253, 50, 63, 199, 208, 174, 23, 173, 211, 22, 97, 60, 209, 68, 247, 162, 21, 200, 246, 228, 189, 175, 228, 170, 105, 138, 45, 242, 228, 255, 83, 131, 131, 15, 109, 30, 182, 214, 86, 168, 123, 84, 1, 1, 1, 4, 0, 0, 0, 0, 0, 0, 1, 30, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 1, 0, 4, 5, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1508(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[1] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[2] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[4] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[5] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[6] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[9] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[10] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[11] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[15] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[16] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[17] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[18] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[19] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[20] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[24] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[25] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[36] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[37] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "tests::test_bpf_loader_upgradeable_deploy_with_max_len";
  test.test_nonce = 61;
  test.test_number =1508;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8jZm2zfUgyUHWqSNyig8dB5qBaHxWrftadfdPxLRjF6d",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 17184240UL;
test_acc->result_lamports = 17184240UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 2341;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 72, 146, 20, 249, 131, 1, 123, 246, 244, 166, 46, 27, 233, 172, 112, 0, 10, 7, 19, 147, 36, 57, 168, 124, 95, 199, 61, 172, 200, 153, 233, 191, 127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 247, 0, 1, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 184, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 56, 0, 3, 0, 64, 0, 9, 0, 7, 0, 1, 0, 0, 0, 5, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 21, 1, 68, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 121, 18, 0, 0, 0, 0, 0, 0, 21, 2, 65, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 194, 255, 255, 255, 183, 5, 0, 0, 2, 0, 0, 0, 5, 0, 61, 0, 0, 0, 0, 0, 85, 6, 33, 0, 255, 0, 0, 0, 113, 7, 9, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 7, 10, 0, 0, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 11, 0, 0, 0, 0, 0, 85, 6, 1, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 48, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 16, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 80, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 115, 20, 0, 0, 0, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0, 123, 4, 230, 255, 0, 0, 0, 0, 123, 20, 222, 255, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 121, 16, 0, 0, 0, 0, 0, 0, 5, 0, 21, 0, 0, 0, 0, 0, 39, 6, 0, 0, 56, 0, 0, 0, 191, 160, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 144, 255, 255, 255, 15, 96, 0, 0, 0, 0, 0, 0, 113, 6, 48, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 6, 49, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 50, 0, 0, 0, 0, 0, 115, 100, 0, 0, 0, 0, 0, 0, 121, 6, 0, 0, 0, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 121, 6, 32, 0, 0, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 121, 6, 8, 0, 0, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 121, 6, 16, 0, 0, 0, 0, 0, 123, 100, 222, 255, 0, 0, 0, 0, 121, 6, 24, 0, 0, 0, 0, 0, 123, 100, 230, 255, 0, 0, 0, 0, 121, 0, 40, 0, 0, 0, 0, 0, 123, 4, 246, 255, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 56, 0, 0, 0, 7, 3, 0, 0, 1, 0, 0, 0, 45, 50, 1, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191, 16, 0, 0, 0, 0, 0, 0, 113, 6, 8, 0, 0, 0, 0, 0, 7, 1, 0, 0, 8, 0, 0, 0, 45, 53, 191, 255, 0, 0, 0, 0, 85, 6, 246, 255, 255, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 103, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 5, 0, 241, 255, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 76, 105, 110, 107, 101, 114, 58, 32, 76, 76, 68, 32, 49, 51, 46, 48, 46, 48, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 111, 108, 97, 110, 97, 45, 108, 97, 98, 115, 47, 108, 108, 118, 109, 45, 112, 114, 111, 106, 101, 99, 116, 46, 103, 105, 116, 32, 49, 101, 56, 48, 56, 49, 100, 55, 50, 53, 98, 98, 48, 99, 50, 97, 101, 101, 102, 48, 98, 53, 98, 54, 97, 102, 48, 50, 48, 52, 49, 49, 99, 48, 98, 56, 51, 52, 98, 98, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 1, 0, 88, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 1, 0, 120, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 136, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 1, 0, 168, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 1, 0, 208, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 1, 0, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 1, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 1, 0, 56, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 2, 2, 0, 176, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0, 46, 100, 121, 110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 99, 111, 109, 109, 101, 110, 116, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 115, 116, 114, 116, 97, 98, 0, 0, 110, 111, 111, 112, 95, 97, 108, 105, 103, 110, 101, 100, 46, 99, 0, 76, 66, 66, 48, 95, 49, 55, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66, 66, 48, 95, 54, 0, 76, 66, 66, 48, 95, 49, 52, 0, 76, 66, 66, 48, 95, 57, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95, 49, 51, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48, 95, 49, 54, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 4, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 6, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 2341;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 72, 146, 20, 249, 131, 1, 123, 246, 244, 166, 46, 27, 233, 172, 112, 0, 10, 7, 19, 147, 36, 57, 168, 124, 95, 199, 61, 172, 200, 153, 233, 191, 127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 247, 0, 1, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 184, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 56, 0, 3, 0, 64, 0, 9, 0, 7, 0, 1, 0, 0, 0, 5, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 21, 1, 68, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 121, 18, 0, 0, 0, 0, 0, 0, 21, 2, 65, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 194, 255, 255, 255, 183, 5, 0, 0, 2, 0, 0, 0, 5, 0, 61, 0, 0, 0, 0, 0, 85, 6, 33, 0, 255, 0, 0, 0, 113, 7, 9, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 7, 10, 0, 0, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 11, 0, 0, 0, 0, 0, 85, 6, 1, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 48, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 16, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 80, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 115, 20, 0, 0, 0, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0, 123, 4, 230, 255, 0, 0, 0, 0, 123, 20, 222, 255, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 121, 16, 0, 0, 0, 0, 0, 0, 5, 0, 21, 0, 0, 0, 0, 0, 39, 6, 0, 0, 56, 0, 0, 0, 191, 160, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 144, 255, 255, 255, 15, 96, 0, 0, 0, 0, 0, 0, 113, 6, 48, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 6, 49, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 50, 0, 0, 0, 0, 0, 115, 100, 0, 0, 0, 0, 0, 0, 121, 6, 0, 0, 0, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 121, 6, 32, 0, 0, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 121, 6, 8, 0, 0, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 121, 6, 16, 0, 0, 0, 0, 0, 123, 100, 222, 255, 0, 0, 0, 0, 121, 6, 24, 0, 0, 0, 0, 0, 123, 100, 230, 255, 0, 0, 0, 0, 121, 0, 40, 0, 0, 0, 0, 0, 123, 4, 246, 255, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 56, 0, 0, 0, 7, 3, 0, 0, 1, 0, 0, 0, 45, 50, 1, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191, 16, 0, 0, 0, 0, 0, 0, 113, 6, 8, 0, 0, 0, 0, 0, 7, 1, 0, 0, 8, 0, 0, 0, 45, 53, 191, 255, 0, 0, 0, 0, 85, 6, 246, 255, 255, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 103, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 5, 0, 241, 255, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 76, 105, 110, 107, 101, 114, 58, 32, 76, 76, 68, 32, 49, 51, 46, 48, 46, 48, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 111, 108, 97, 110, 97, 45, 108, 97, 98, 115, 47, 108, 108, 118, 109, 45, 112, 114, 111, 106, 101, 99, 116, 46, 103, 105, 116, 32, 49, 101, 56, 48, 56, 49, 100, 55, 50, 53, 98, 98, 48, 99, 50, 97, 101, 101, 102, 48, 98, 53, 98, 54, 97, 102, 48, 50, 48, 52, 49, 49, 99, 48, 98, 56, 51, 52, 98, 98, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 1, 0, 88, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 1, 0, 120, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 136, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 1, 0, 168, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 1, 0, 208, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 1, 0, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 1, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 1, 0, 56, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 2, 2, 0, 176, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0, 46, 100, 121, 110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 99, 111, 109, 109, 101, 110, 116, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 115, 116, 114, 116, 97, 98, 0, 0, 110, 111, 111, 112, 95, 97, 108, 105, 103, 110, 101, 100, 46, 99, 0, 76, 66, 66, 48, 95, 49, 55, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66, 66, 48, 95, 54, 0, 76, 66, 66, 48, 95, 49, 52, 0, 76, 66, 66, 48, 95, 57, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95, 49, 51, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48, 95, 49, 54, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 4, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 6, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "BowF3zP9zMwhVaHuQHqCpyjmDkFzogVRZdv4aMyqhFLn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1141440UL;
test_acc->result_lamports = 1141440UL;
test_acc->executable = 1;
test_acc->rent_epoch = 0;
test_acc->data_len = 36;
static const uchar test_acc_1_data[] = {2, 0, 0, 0, 114, 233, 62, 81, 49, 98, 125, 55, 226, 207, 60, 215, 94, 111, 113, 27, 151, 25, 137, 245, 194, 12, 211, 149, 12, 241, 123, 207, 91, 83, 126, 238};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 36;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 114, 233, 62, 81, 49, 98, 125, 55, 226, 207, 60, 215, 94, 111, 113, 27, 151, 25, 137, 245, 194, 12, 211, 149, 12, 241, 123, 207, 91, 83, 126, 238};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 73;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1509(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_deploy_with_max_len";
  test.test_nonce = 61;
  test.test_number =1509;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "8VQCM8aCs44YyxXw33yvQ2RbiqHsfs4RHEteo6LaG34",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 17184240UL;
test_acc->result_lamports = 17184240UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 2341;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 252, 78, 246, 132, 153, 99, 179, 220, 142, 64, 81, 175, 150, 109, 147, 129, 209, 234, 246, 41, 208, 141, 156, 240, 82, 187, 23, 18, 59, 221, 132, 127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 247, 0, 1, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 184, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 56, 0, 3, 0, 64, 0, 9, 0, 7, 0, 1, 0, 0, 0, 5, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 21, 1, 68, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 121, 18, 0, 0, 0, 0, 0, 0, 21, 2, 65, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 194, 255, 255, 255, 183, 5, 0, 0, 2, 0, 0, 0, 5, 0, 61, 0, 0, 0, 0, 0, 85, 6, 33, 0, 255, 0, 0, 0, 113, 7, 9, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 7, 10, 0, 0, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 11, 0, 0, 0, 0, 0, 85, 6, 1, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 48, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 16, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 80, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 115, 20, 0, 0, 0, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0, 123, 4, 230, 255, 0, 0, 0, 0, 123, 20, 222, 255, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 121, 16, 0, 0, 0, 0, 0, 0, 5, 0, 21, 0, 0, 0, 0, 0, 39, 6, 0, 0, 56, 0, 0, 0, 191, 160, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 144, 255, 255, 255, 15, 96, 0, 0, 0, 0, 0, 0, 113, 6, 48, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 6, 49, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 50, 0, 0, 0, 0, 0, 115, 100, 0, 0, 0, 0, 0, 0, 121, 6, 0, 0, 0, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 121, 6, 32, 0, 0, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 121, 6, 8, 0, 0, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 121, 6, 16, 0, 0, 0, 0, 0, 123, 100, 222, 255, 0, 0, 0, 0, 121, 6, 24, 0, 0, 0, 0, 0, 123, 100, 230, 255, 0, 0, 0, 0, 121, 0, 40, 0, 0, 0, 0, 0, 123, 4, 246, 255, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 56, 0, 0, 0, 7, 3, 0, 0, 1, 0, 0, 0, 45, 50, 1, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191, 16, 0, 0, 0, 0, 0, 0, 113, 6, 8, 0, 0, 0, 0, 0, 7, 1, 0, 0, 8, 0, 0, 0, 45, 53, 191, 255, 0, 0, 0, 0, 85, 6, 246, 255, 255, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 103, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 5, 0, 241, 255, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 76, 105, 110, 107, 101, 114, 58, 32, 76, 76, 68, 32, 49, 51, 46, 48, 46, 48, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 111, 108, 97, 110, 97, 45, 108, 97, 98, 115, 47, 108, 108, 118, 109, 45, 112, 114, 111, 106, 101, 99, 116, 46, 103, 105, 116, 32, 49, 101, 56, 48, 56, 49, 100, 55, 50, 53, 98, 98, 48, 99, 50, 97, 101, 101, 102, 48, 98, 53, 98, 54, 97, 102, 48, 50, 48, 52, 49, 49, 99, 48, 98, 56, 51, 52, 98, 98, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 1, 0, 88, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 1, 0, 120, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 136, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 1, 0, 168, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 1, 0, 208, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 1, 0, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 1, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 1, 0, 56, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 2, 2, 0, 176, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0, 46, 100, 121, 110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 99, 111, 109, 109, 101, 110, 116, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 115, 116, 114, 116, 97, 98, 0, 0, 110, 111, 111, 112, 95, 97, 108, 105, 103, 110, 101, 100, 46, 99, 0, 76, 66, 66, 48, 95, 49, 55, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66, 66, 48, 95, 54, 0, 76, 66, 66, 48, 95, 49, 52, 0, 76, 66, 66, 48, 95, 57, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95, 49, 51, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48, 95, 49, 54, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 4, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 6, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 2341;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 22, 252, 78, 246, 132, 153, 99, 179, 220, 142, 64, 81, 175, 150, 109, 147, 129, 209, 234, 246, 41, 208, 141, 156, 240, 82, 187, 23, 18, 59, 221, 132, 127, 69, 76, 70, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 247, 0, 1, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 64, 0, 0, 0, 0, 0, 0, 0, 184, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 0, 56, 0, 3, 0, 64, 0, 9, 0, 7, 0, 1, 0, 0, 0, 5, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 60, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 6, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 21, 1, 68, 0, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 121, 18, 0, 0, 0, 0, 0, 0, 21, 2, 65, 0, 0, 0, 0, 0, 183, 3, 0, 0, 0, 0, 0, 0, 191, 164, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 194, 255, 255, 255, 183, 5, 0, 0, 2, 0, 0, 0, 5, 0, 61, 0, 0, 0, 0, 0, 85, 6, 33, 0, 255, 0, 0, 0, 113, 7, 9, 0, 0, 0, 0, 0, 183, 1, 0, 0, 1, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 7, 10, 0, 0, 0, 0, 0, 183, 6, 0, 0, 1, 0, 0, 0, 85, 7, 1, 0, 0, 0, 0, 0, 183, 6, 0, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 11, 0, 0, 0, 0, 0, 85, 6, 1, 0, 0, 0, 0, 0, 183, 1, 0, 0, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 48, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 16, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 191, 6, 0, 0, 0, 0, 0, 0, 7, 6, 0, 0, 80, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 115, 20, 0, 0, 0, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 7, 0, 0, 0, 96, 0, 0, 0, 123, 4, 230, 255, 0, 0, 0, 0, 123, 20, 222, 255, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 7, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 121, 16, 0, 0, 0, 0, 0, 0, 5, 0, 21, 0, 0, 0, 0, 0, 39, 6, 0, 0, 56, 0, 0, 0, 191, 160, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 144, 255, 255, 255, 15, 96, 0, 0, 0, 0, 0, 0, 113, 6, 48, 0, 0, 0, 0, 0, 115, 100, 254, 255, 0, 0, 0, 0, 113, 6, 49, 0, 0, 0, 0, 0, 115, 100, 255, 255, 0, 0, 0, 0, 113, 6, 50, 0, 0, 0, 0, 0, 115, 100, 0, 0, 0, 0, 0, 0, 121, 6, 0, 0, 0, 0, 0, 0, 123, 100, 206, 255, 0, 0, 0, 0, 121, 6, 32, 0, 0, 0, 0, 0, 123, 100, 238, 255, 0, 0, 0, 0, 121, 6, 8, 0, 0, 0, 0, 0, 123, 100, 214, 255, 0, 0, 0, 0, 121, 6, 16, 0, 0, 0, 0, 0, 123, 100, 222, 255, 0, 0, 0, 0, 121, 6, 24, 0, 0, 0, 0, 0, 123, 100, 230, 255, 0, 0, 0, 0, 121, 0, 40, 0, 0, 0, 0, 0, 123, 4, 246, 255, 0, 0, 0, 0, 183, 0, 0, 0, 0, 0, 0, 0, 7, 4, 0, 0, 56, 0, 0, 0, 7, 3, 0, 0, 1, 0, 0, 0, 45, 50, 1, 0, 0, 0, 0, 0, 149, 0, 0, 0, 0, 0, 0, 0, 191, 16, 0, 0, 0, 0, 0, 0, 113, 6, 8, 0, 0, 0, 0, 0, 7, 1, 0, 0, 8, 0, 0, 0, 45, 53, 191, 255, 0, 0, 0, 0, 85, 6, 246, 255, 255, 0, 0, 0, 121, 1, 88, 0, 0, 0, 0, 0, 15, 1, 0, 0, 0, 0, 0, 0, 7, 1, 0, 0, 103, 40, 0, 0, 87, 1, 0, 0, 248, 255, 255, 255, 5, 0, 241, 255, 0, 0, 0, 0, 30, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 22, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 76, 105, 110, 107, 101, 114, 58, 32, 76, 76, 68, 32, 49, 51, 46, 48, 46, 48, 32, 40, 104, 116, 116, 112, 115, 58, 47, 47, 103, 105, 116, 104, 117, 98, 46, 99, 111, 109, 47, 115, 111, 108, 97, 110, 97, 45, 108, 97, 98, 115, 47, 108, 108, 118, 109, 45, 112, 114, 111, 106, 101, 99, 116, 46, 103, 105, 116, 32, 49, 101, 56, 48, 56, 49, 100, 55, 50, 53, 98, 98, 48, 99, 50, 97, 101, 101, 102, 48, 98, 53, 98, 54, 97, 102, 48, 50, 48, 52, 49, 49, 99, 48, 98, 56, 51, 52, 98, 98, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 4, 0, 241, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 1, 0, 88, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 1, 0, 96, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 1, 0, 120, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 38, 0, 0, 0, 0, 0, 1, 0, 136, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 46, 0, 0, 0, 0, 0, 1, 0, 168, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 53, 0, 0, 0, 0, 0, 1, 0, 208, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 61, 0, 0, 0, 0, 0, 1, 0, 240, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 69, 0, 0, 0, 0, 0, 1, 0, 48, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 77, 0, 0, 0, 0, 0, 1, 0, 56, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 96, 0, 0, 0, 0, 2, 2, 0, 176, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 85, 0, 0, 0, 18, 0, 1, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 46, 116, 101, 120, 116, 0, 46, 100, 121, 110, 97, 109, 105, 99, 0, 46, 100, 121, 110, 115, 121, 109, 0, 46, 100, 121, 110, 115, 116, 114, 0, 46, 99, 111, 109, 109, 101, 110, 116, 0, 46, 115, 121, 109, 116, 97, 98, 0, 46, 115, 104, 115, 116, 114, 116, 97, 98, 0, 46, 115, 116, 114, 116, 97, 98, 0, 0, 110, 111, 111, 112, 95, 97, 108, 105, 103, 110, 101, 100, 46, 99, 0, 76, 66, 66, 48, 95, 49, 55, 0, 76, 66, 66, 48, 95, 51, 0, 76, 66, 66, 48, 95, 54, 0, 76, 66, 66, 48, 95, 49, 52, 0, 76, 66, 66, 48, 95, 57, 0, 76, 66, 66, 48, 95, 49, 49, 0, 76, 66, 66, 48, 95, 49, 51, 0, 76, 66, 66, 48, 95, 49, 53, 0, 76, 66, 66, 48, 95, 49, 54, 0, 101, 110, 116, 114, 121, 112, 111, 105, 110, 116, 0, 95, 68, 89, 78, 65, 77, 73, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 32, 1, 0, 0, 0, 0, 0, 0, 144, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 6, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 176, 3, 0, 0, 0, 0, 0, 0, 112, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 11, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 32, 4, 0, 0, 0, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 3, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 80, 4, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 32, 0, 0, 0, 1, 0, 0, 0, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 92, 4, 0, 0, 0, 0, 0, 0, 110, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 41, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 208, 4, 0, 0, 0, 0, 0, 0, 56, 1, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 12, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 49, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 6, 0, 0, 0, 0, 0, 0, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 75, 6, 0, 0, 0, 0, 0, 0, 105, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "5JAfp5rQEZ3UW4gqAHcTPufPvCKkF7b9ddasoqqWYsh6",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1141440UL;
test_acc->result_lamports = 1141440UL;
test_acc->executable = 1;
test_acc->rent_epoch = 0;
test_acc->data_len = 36;
static const uchar test_acc_1_data[] = {2, 0, 0, 0, 1, 235, 45, 116, 161, 96, 115, 47, 97, 230, 70, 222, 0, 100, 129, 65, 133, 186, 177, 40, 119, 194, 16, 64, 13, 154, 62, 225, 224, 66, 162, 11};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 36;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 1, 235, 45, 116, 161, 96, 115, 47, 97, 230, 70, 222, 0, 100, 129, 65, 133, 186, 177, 40, 119, 194, 16, 64, 13, 154, 62, 225, 224, 66, 162, 11};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 1, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 73;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1510(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[2] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[3] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[5] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[6] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[7] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[8] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[10] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[14] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[16] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[17] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[18] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[19] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[20] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[21] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[22] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[23] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[25] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[26] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[29] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[30] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[33] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[36] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[37] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[38] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[43] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[46] = fd_feature_offset(reject_callx_r10);
  test.test_name = "tests::test_bpf_loader_upgradeable_initialize_buffer";
  test.test_nonce = 11;
  test.test_number =1510;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111133JNLUvdhk3EbSRzUCLvhZs2J3JkL1rVuzP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 46;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111133hhwU2vzTDhUFs8ZDmG23zJ5fp1Gj65kJj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 46;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = -9;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1511(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[1] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[2] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[3] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[4] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[5] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[6] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[7] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[8] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[9] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[10] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[11] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[12] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[13] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[14] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[15] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[16] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[17] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[18] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[21] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[22] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[23] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[24] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[25] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[26] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[33] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[34] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[35] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[36] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[37] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[38] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[39] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[44] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[45] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[46] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.test_name = "tests::test_bpf_loader_upgradeable_initialize_buffer";
  test.test_nonce = 3;
  test.test_number =1511;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111133JNLUvdhk3EbSRzUCLvhZs2J3JkL1rVuzP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 46;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111133hhwU2vzTDhUFs8ZDmG23zJ5fp1Gj65kJj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 46;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1512(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_initialize_buffer";
  test.test_nonce = 10;
  test.test_number =1512;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111133hhwU2vzTDhUFs8ZDmG23zJ5fp1Gj65kJj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 46;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113473YT9EHAQAM5JGeFBbLY7ZsJKGDSKfad5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 46;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = -9;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1513(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_initialize_buffer";
  test.test_nonce = 3;
  test.test_number =1513;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111133hhwU2vzTDhUFs8ZDmG23zJ5fp1Gj65kJj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 46;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113473YT9EHAQAM5JGeFBbLY7ZsJKGDSKfad5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 46;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 46;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 2, 3, 0, 0, 0, 0, 0, 0, 1, 39, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 4, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 143;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1514(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[3] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[4] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[5] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[6] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[7] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[8] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[9] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[12] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[13] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[14] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[15] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[16] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[17] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[18] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[21] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[22] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[23] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[24] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[25] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[26] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[27] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[28] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[32] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[33] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[36] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[39] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[40] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[41] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[42] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[43] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[44] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[45] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[46] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 32;
  test.test_number =1514;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 202, 150, 107, 121, 233, 128, 85, 110, 225, 241, 222, 24, 192, 22, 67, 39, 145, 86, 93, 251, 40, 189, 74, 193, 144, 252, 95, 143, 199, 225, 191, 12, 166, 202, 173, 205, 79, 13, 134, 169, 70, 193, 151, 147, 45, 204, 165, 196, 102, 159, 2, 52, 28, 87, 225, 57, 253, 80, 236, 215, 4, 11, 144, 112, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 207;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1515(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[1] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[2] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[3] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[4] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[7] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[10] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[11] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[12] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[13] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[14] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[17] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[20] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[21] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[23] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[24] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[25] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[26] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[27] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[30] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[31] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[34] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[35] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[36] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[37] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[40] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[41] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[42] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[43] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 39;
  test.test_number =1515;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 228, 203, 248, 21, 119, 207, 111, 200, 39, 119, 10, 6, 196, 121, 127, 36, 58, 115, 166, 239, 208, 171, 129, 89, 212, 32, 66, 184, 224, 213, 37, 143, 63, 230, 148, 203, 166, 68, 241, 186, 77, 132, 218, 48, 81, 160, 67, 144, 149, 164, 153, 245, 222, 184, 149, 184, 94, 57, 29, 179, 195, 100, 112, 242, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -43;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1516(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[1] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[2] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[3] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[4] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[7] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[8] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[10] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[13] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[14] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[15] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[16] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[17] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[18] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[19] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[22] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[23] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[24] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[28] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[29] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[30] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[31] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[32] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[33] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[34] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[35] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[38] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[40] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[41] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[42] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[43] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[44] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(increase_tx_account_lock_limit);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 26;
  test.test_number =1516;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113473YT9EHAQAM5JGeFBbLY7ZsJKGDSKfad5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 1, 210, 248, 111, 26, 117, 192, 13, 92, 18, 173, 147, 181, 168, 188, 107, 242, 92, 171, 49, 219, 200, 239, 200, 100, 80, 21, 214, 234, 233, 198, 237, 167, 184, 45, 245, 44, 48, 198, 141, 151, 23, 127, 88, 189, 168, 188, 147, 113, 245, 57, 220, 72, 134, 48, 67, 177, 153, 204, 197, 50, 203, 138, 135, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1517(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[1] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[3] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[4] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[5] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[6] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[7] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[8] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[9] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[10] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[13] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[14] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[15] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[16] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[17] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[18] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[19] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[20] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[21] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[22] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[23] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[24] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[28] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[29] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[30] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[31] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[37] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[38] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[40] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[41] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[42] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[43] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[44] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[45] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[46] = fd_feature_offset(curve25519_syscall_enabled);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 14;
  test.test_number =1517;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 223, 45, 147, 168, 72, 70, 95, 146, 18, 222, 59, 193, 235, 38, 223, 94, 28, 165, 203, 139, 166, 4, 223, 210, 182, 50, 3, 202, 182, 84, 223, 20, 186, 244, 96, 227, 248, 5, 206, 107, 20, 206, 85, 198, 50, 174, 176, 50, 240, 220, 108, 143, 170, 151, 107, 224, 81, 201, 198, 191, 63, 185, 157, 35, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1518(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[1] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[2] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[4] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[5] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[6] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[7] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[12] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[13] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[14] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[22] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[23] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[24] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[25] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[26] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[27] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[28] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[29] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[30] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[31] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[32] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[33] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[36] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[37] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[39] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[40] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[41] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[42] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[43] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[44] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[45] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 41;
  test.test_number =1518;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 176, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 29, 33, 253, 15, 59, 97, 156, 65, 208, 22, 154, 66, 203, 121, 202, 132, 22, 188, 22, 206, 12, 138, 150, 205, 159, 177, 172, 142, 40, 147, 55, 26, 135, 244, 191, 141, 63, 149, 85, 207, 223, 178, 110, 110, 0, 241, 239, 78, 105, 158, 209, 105, 180, 52, 25, 37, 159, 36, 142, 66, 173, 149, 46, 183, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1519(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[1] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[2] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[3] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[4] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[8] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[11] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[12] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[17] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[18] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[19] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[20] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[21] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[22] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[23] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[24] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[25] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[26] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[27] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[28] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[31] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[32] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[33] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[34] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[35] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[37] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[38] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[39] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[42] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[43] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[44] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[46] = fd_feature_offset(increase_tx_account_lock_limit);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 4;
  test.test_number =1519;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 40, 11, 221, 91, 119, 179, 160, 186, 235, 166, 8, 38, 217, 84, 134, 179, 231, 239, 154, 164, 40, 126, 164, 118, 13, 201, 177, 174, 237, 67, 128, 88, 27, 119, 118, 83, 117, 207, 32, 110, 52, 27, 148, 21, 76, 31, 170, 34, 106, 213, 54, 168, 95, 0, 145, 168, 169, 179, 118, 60, 246, 198, 90, 226, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 207;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1520(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[1] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[4] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[5] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[6] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[7] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[8] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[9] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[12] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[16] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[17] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[18] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[19] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[20] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[21] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[24] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[25] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[26] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[29] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[30] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[31] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[34] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[35] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[39] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[40] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[41] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[42] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[43] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[44] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[45] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[46] = fd_feature_offset(fix_recent_blockhashes);
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 20;
  test.test_number =1520;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111134WP9SFXZsadDtjQjGbvf2EqevpXA9ZFQwR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111134uikRMpram66iAYpJ2FyWN7SZKn6rnqFFm",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 1, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 176;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1521(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 13;
  test.test_number =1521;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111137KkNL1caqqsMcmPLSYFtR7kALMKm8CLF9q",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111136X5AMo21RUwbyu7APhbFSsCb5LoshjAaX9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111136vQmLuKJ8fQUoLFFR7vZvzUNhr4pQxkQqV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 132, 98, 154, 25, 57, 133, 170, 102, 187, 84, 205, 38, 139, 219, 139, 168, 241, 173, 70, 98, 47, 31, 161, 172, 153, 50, 13, 177, 126, 208, 141, 104, 174, 117, 38, 112, 164, 245, 74, 167, 202, 251, 236, 223, 204, 137, 63, 241, 64, 56, 219, 182, 240, 37, 254, 229, 12, 113, 206, 39, 212, 124, 128, 151, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1522(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 22;
  test.test_number =1522;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111137KkNL1caqqsMcmPLSYFtR7kALMKm8CLF9q",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111136X5AMo21RUwbyu7APhbFSsCb5LoshjAaX9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111136vQmLuKJ8fQUoLFFR7vZvzUNhr4pQxkQqV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 4, 0, 0, 0, 0, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 176;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1523(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 25;
  test.test_number =1523;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111137KkNL1caqqsMcmPLSYFtR7kALMKm8CLF9q",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111135K4MQU89HwYyXbguKSbHzVPEBq33a2R5a7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111136X5AMo21RUwbyu7APhbFSsCb5LoshjAaX9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111136vQmLuKJ8fQUoLFFR7vZvzUNhr4pQxkQqV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 208, 56, 86, 73, 98, 129, 169, 219, 86, 105, 125, 35, 17, 120, 141, 178, 199, 42, 93, 108, 148, 51, 86, 131, 225, 38, 36, 85, 220, 163, 42, 126, 115, 197, 153, 41, 122, 33, 20, 19, 144, 40, 45, 111, 77, 49, 2, 93, 5, 13, 64, 51, 17, 200, 81, 11, 125, 37, 93, 195, 220, 143, 89, 3, 1, 1, 2, 4, 0, 0, 0, 0, 0, 0, 1, 43, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 46, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 1, 0, 2, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 240;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1524(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "tests::test_bpf_loader_upgradeable_set_buffer_authority";
  test.test_nonce = 29;
  test.test_number =1524;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "11111137KkNL1caqqsMcmPLSYFtR7kALMKm8CLF9q",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 37;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 37;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111135iPxPaRS181rM2pzLrvcUcf1pLHzHFzutT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "111111367jZNgiiiJUjATy5NHFvxjvoSqYvzVakCo",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "11111136X5AMo21RUwbyu7APhbFSsCb5LoshjAaX9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111136vQmLuKJ8fQUoLFFR7vZvzUNhr4pQxkQqV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "BPFLoaderUpgradeab1e11111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 1, 96, 201, 244, 188, 164, 83, 65, 244, 28, 7, 14, 4, 154, 239, 161, 135, 249, 241, 187, 226, 57, 27, 237, 73, 104, 214, 242, 11, 25, 117, 127, 66, 148, 85, 233, 24, 35, 161, 131, 158, 157, 166, 213, 253, 111, 25, 55, 174, 23, 209, 169, 177, 24, 168, 94, 97, 79, 125, 38, 60, 5, 79, 137, 1, 1, 1, 3, 0, 0, 0, 0, 0, 0, 1, 44, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 48, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 168, 246, 145, 78, 136, 161, 176, 226, 16, 21, 62, 247, 99, 174, 43, 0, 194, 185, 61, 22, 193, 36, 210, 192, 83, 122, 16, 4, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 4, 4, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 207;
  test.expected_result = -44;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
