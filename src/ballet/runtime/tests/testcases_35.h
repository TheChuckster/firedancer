int test_850(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_split_not_uninitialized::old_behavior";
  test.test_nonce = 224;
  test.test_number =850;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2GMLBtqE2TDukq4vEZLAcsFgWq98WTqdFo8kBubK8Zt1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DZQnG3YvLc37ZSiQRCRqsg5uSRugEo7MC6e6YXTRCW59",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 67, 94, 124, 178, 220, 193, 64, 151, 126, 173, 13, 154, 143, 107, 57, 209, 3, 230, 104, 211, 185, 230, 102, 20, 116, 100, 14, 162, 47, 217, 122, 42, 71, 155, 90, 205, 64, 7, 102, 196, 106, 107, 194, 34, 98, 91, 27, 36, 85, 122, 235, 4, 230, 104, 35, 156, 143, 225, 102, 68, 155, 40, 143, 185, 1, 0, 1, 2, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 12, 3, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 183;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_851(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_split_not_uninitialized::old_behavior";
  test.test_nonce = 250;
  test.test_number =851;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2GMLBtqE2TDukq4vEZLAcsFgWq98WTqdFo8kBubK8Zt1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DZQnG3YvLc37ZSiQRCRqsg5uSRugEo7MC6e6YXTRCW59",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 55, 51, 97, 61, 159, 66, 124, 242, 61, 97, 233, 243, 182, 92, 191, 83, 13, 221, 55, 208, 217, 228, 8, 5, 231, 176, 48, 157, 20, 149, 224, 208, 99, 66, 155, 84, 12, 52, 246, 209, 131, 79, 31, 176, 14, 59, 157, 200, 70, 89, 56, 19, 236, 149, 29, 227, 61, 195, 22, 222, 83, 124, 52, 238, 1, 0, 1, 2, 18, 202, 99, 31, 121, 224, 105, 149, 17, 74, 84, 107, 34, 96, 35, 38, 241, 150, 158, 22, 229, 205, 187, 186, 86, 172, 195, 58, 163, 88, 136, 134, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 12, 3, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 183;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_852(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 157;
  test.test_number =852;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 215, 22, 197, 59, 177, 33, 74, 53, 133, 81, 202, 240, 255, 127, 48, 189, 89, 110, 116, 65, 241, 1, 116, 231, 47, 110, 30, 199, 128, 80, 106, 242, 62, 1, 254, 12, 6, 180, 147, 9, 117, 34, 225, 223, 24, 41, 160, 149, 208, 49, 150, 24, 88, 108, 167, 149, 20, 24, 173, 140, 33, 8, 206, 195, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_853(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 234;
  test.test_number =853;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 165, 219, 4, 78, 2, 30, 214, 36, 153, 128, 228, 136, 219, 33, 67, 34, 26, 20, 32, 147, 129, 129, 218, 173, 64, 159, 142, 61, 117, 117, 237, 46, 30, 222, 175, 85, 142, 43, 72, 182, 9, 69, 6, 222, 252, 152, 95, 183, 200, 17, 159, 234, 81, 233, 239, 58, 32, 178, 39, 114, 180, 100, 175, 106, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_854(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 268;
  test.test_number =854;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 25, 175, 179, 209, 101, 83, 34, 30, 232, 202, 94, 53, 179, 42, 149, 245, 51, 212, 41, 9, 75, 21, 156, 99, 16, 233, 168, 137, 165, 156, 141, 71, 217, 224, 128, 9, 191, 201, 191, 98, 224, 242, 35, 235, 185, 21, 181, 74, 42, 215, 89, 94, 251, 87, 60, 20, 62, 34, 245, 22, 69, 78, 82, 156, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_855(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 312;
  test.test_number =855;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 218, 7, 35, 0, 63, 91, 159, 198, 165, 33, 199, 103, 246, 108, 108, 190, 118, 198, 197, 22, 64, 129, 238, 131, 139, 118, 76, 187, 215, 105, 196, 196, 162, 125, 17, 48, 25, 152, 124, 122, 205, 34, 40, 188, 194, 180, 77, 202, 173, 236, 203, 141, 70, 33, 213, 85, 248, 167, 119, 48, 240, 8, 209, 89, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_856(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 84;
  test.test_number =856;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 205, 114, 16, 132, 44, 29, 224, 125, 227, 109, 105, 90, 123, 178, 20, 0, 51, 243, 14, 36, 58, 170, 114, 185, 59, 22, 153, 192, 248, 15, 53, 149, 253, 136, 210, 10, 197, 165, 249, 183, 42, 108, 154, 233, 127, 199, 193, 4, 213, 1, 19, 213, 31, 54, 203, 255, 0, 92, 121, 59, 97, 196, 160, 40, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_857(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 138;
  test.test_number =857;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 186, 194, 19, 82, 77, 137, 150, 119, 236, 22, 91, 210, 96, 4, 126, 189, 210, 127, 154, 11, 22, 149, 87, 45, 23, 254, 212, 31, 171, 251, 234, 84, 179, 43, 224, 54, 237, 234, 94, 11, 98, 106, 17, 147, 117, 141, 95, 80, 180, 232, 73, 218, 177, 93, 207, 112, 244, 255, 109, 11, 73, 65, 210, 187, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_858(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 178;
  test.test_number =858;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 150, 38, 130, 92, 124, 121, 110, 45, 137, 146, 66, 100, 34, 221, 246, 29, 131, 88, 223, 224, 191, 33, 181, 217, 136, 32, 78, 245, 220, 230, 38, 182, 185, 126, 21, 38, 219, 111, 151, 215, 237, 122, 193, 100, 198, 92, 148, 66, 13, 13, 72, 37, 159, 74, 55, 197, 111, 129, 217, 88, 109, 160, 97, 129, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_859(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 222;
  test.test_number =859;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 7, 250, 139, 19, 161, 76, 75, 30, 133, 54, 215, 120, 210, 201, 117, 31, 103, 223, 180, 97, 144, 124, 92, 23, 200, 130, 87, 216, 90, 199, 218, 113, 68, 26, 154, 181, 87, 187, 224, 97, 246, 25, 231, 149, 241, 226, 187, 92, 222, 98, 80, 160, 171, 227, 138, 236, 254, 37, 247, 35, 35, 61, 186, 154, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_860(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 274;
  test.test_number =860;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 229, 233, 170, 12, 57, 81, 212, 13, 185, 79, 191, 251, 175, 227, 31, 17, 12, 26, 44, 106, 166, 17, 5, 138, 129, 7, 40, 42, 240, 155, 240, 154, 61, 10, 87, 239, 19, 203, 3, 19, 39, 71, 63, 249, 36, 182, 94, 71, 73, 60, 245, 248, 235, 111, 230, 102, 254, 165, 220, 66, 144, 122, 158, 10, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_861(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 314;
  test.test_number =861;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 117, 58, 10, 96, 136, 3, 138, 253, 187, 245, 201, 41, 195, 44, 215, 121, 179, 228, 233, 199, 51, 89, 46, 141, 97, 173, 45, 157, 156, 167, 217, 110, 219, 242, 108, 122, 11, 122, 193, 14, 106, 149, 220, 136, 89, 227, 42, 156, 182, 81, 185, 200, 59, 225, 34, 1, 8, 69, 59, 43, 26, 180, 247, 47, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_862(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 134;
  test.test_number =862;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 220, 157, 129, 19, 242, 75, 199, 147, 86, 204, 12, 112, 153, 197, 8, 246, 86, 116, 22, 202, 183, 201, 179, 68, 124, 91, 25, 115, 91, 121, 138, 50, 156, 156, 52, 191, 190, 46, 156, 132, 73, 26, 177, 169, 224, 29, 81, 84, 199, 167, 134, 56, 184, 201, 47, 162, 74, 130, 216, 124, 177, 214, 226, 85, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_863(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 211;
  test.test_number =863;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 115, 48, 82, 63, 197, 73, 104, 13, 180, 169, 147, 109, 84, 210, 48, 31, 163, 54, 176, 140, 40, 224, 132, 95, 91, 169, 62, 196, 7, 224, 135, 184, 230, 248, 14, 132, 99, 190, 129, 57, 89, 237, 220, 16, 74, 146, 64, 46, 219, 109, 33, 205, 220, 14, 38, 219, 58, 130, 163, 255, 23, 148, 66, 52, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_864(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 247;
  test.test_number =864;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 62, 220, 10, 58, 111, 34, 7, 56, 238, 99, 118, 219, 132, 138, 91, 34, 177, 15, 91, 234, 88, 147, 217, 220, 18, 160, 79, 212, 27, 145, 137, 161, 175, 212, 66, 184, 172, 57, 251, 231, 185, 221, 203, 133, 71, 176, 0, 233, 156, 9, 3, 38, 92, 131, 56, 64, 75, 24, 15, 161, 79, 91, 247, 32, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_865(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 287;
  test.test_number =865;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 219, 200, 114, 136, 226, 222, 203, 70, 219, 174, 64, 211, 14, 139, 220, 160, 35, 202, 111, 70, 122, 15, 250, 21, 135, 141, 186, 179, 36, 180, 152, 211, 52, 120, 131, 109, 46, 41, 130, 209, 172, 44, 204, 204, 133, 89, 30, 87, 244, 73, 232, 96, 129, 14, 248, 95, 196, 128, 193, 217, 108, 173, 194, 31, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_866(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[10] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[23] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[25] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[26] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[27] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[40] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[43] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[46] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 323;
  test.test_number =866;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "AgVJV5oFebsbwC1NbvhQ5CCGxDyNVFtyqdBk9ZQMBBKQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "FkEMp93msm5684r2i1q1R5C5jaijkFy84nDTg9dCTbZF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 125, 240, 16, 56, 60, 182, 59, 165, 133, 106, 13, 180, 48, 23, 26, 177, 29, 156, 44, 26, 213, 227, 15, 111, 9, 26, 89, 68, 71, 16, 44, 218, 122, 167, 188, 60, 217, 58, 160, 216, 239, 231, 243, 18, 232, 208, 79, 116, 208, 47, 242, 205, 99, 107, 158, 107, 74, 45, 193, 241, 60, 250, 92, 247, 1, 0, 1, 3, 143, 214, 213, 158, 35, 255, 171, 210, 94, 149, 172, 170, 61, 18, 134, 113, 253, 203, 167, 108, 2, 199, 105, 134, 182, 120, 41, 220, 59, 8, 254, 195, 219, 22, 178, 87, 134, 155, 71, 55, 224, 161, 130, 70, 87, 205, 84, 38, 209, 75, 58, 42, 196, 60, 241, 159, 212, 252, 194, 176, 10, 116, 33, 214, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_867(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 154;
  test.test_number =867;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 140, 244, 209, 144, 121, 54, 165, 250, 5, 211, 11, 236, 38, 16, 236, 198, 76, 146, 250, 76, 158, 241, 232, 207, 106, 11, 55, 41, 163, 231, 104, 99, 236, 130, 37, 145, 10, 52, 121, 46, 182, 87, 194, 30, 109, 65, 218, 135, 120, 224, 61, 185, 221, 232, 218, 60, 251, 39, 176, 116, 215, 48, 158, 65, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_868(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 198;
  test.test_number =868;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 126, 20, 15, 43, 203, 182, 41, 129, 191, 40, 23, 166, 242, 105, 249, 43, 106, 77, 73, 113, 123, 55, 10, 37, 252, 203, 135, 11, 74, 38, 112, 27, 134, 134, 96, 249, 44, 234, 219, 186, 206, 83, 161, 70, 171, 133, 94, 64, 245, 69, 96, 241, 91, 132, 157, 59, 15, 165, 237, 119, 177, 138, 165, 173, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_869(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 259;
  test.test_number =869;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 2, 210, 107, 221, 135, 41, 246, 169, 184, 112, 213, 152, 165, 115, 149, 162, 74, 191, 171, 94, 18, 134, 196, 194, 60, 222, 87, 17, 159, 156, 107, 44, 149, 71, 158, 137, 83, 167, 0, 89, 23, 147, 78, 106, 136, 206, 100, 204, 30, 25, 57, 29, 251, 190, 174, 245, 133, 76, 146, 3, 185, 201, 123, 206, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_870(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 292;
  test.test_number =870;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 50, 44, 198, 184, 35, 71, 197, 7, 124, 114, 65, 76, 101, 4, 225, 140, 203, 114, 66, 74, 192, 30, 57, 200, 240, 16, 52, 101, 139, 170, 248, 206, 147, 188, 185, 191, 16, 207, 23, 167, 162, 39, 143, 120, 185, 52, 133, 151, 74, 67, 109, 141, 181, 14, 59, 18, 219, 140, 215, 128, 98, 32, 59, 180, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_871(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 321;
  test.test_number =871;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "62YZeWnBPuNBUffXAZ1VjiWc9h5fYMDE1zVSa7aK1T1m",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "Nn8nDPsbmheaMxBtA3EP3LuSPLNH5naQJanmmntMGoW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 253, 147, 159, 233, 94, 145, 63, 113, 113, 65, 100, 51, 115, 121, 97, 224, 100, 54, 189, 52, 96, 191, 110, 77, 41, 19, 86, 42, 4, 130, 226, 190, 205, 51, 223, 85, 38, 199, 87, 68, 107, 236, 152, 134, 85, 209, 12, 224, 69, 96, 194, 197, 162, 101, 198, 115, 240, 143, 20, 217, 117, 47, 167, 250, 1, 0, 1, 3, 74, 175, 180, 37, 141, 192, 77, 46, 95, 54, 150, 63, 29, 209, 17, 253, 234, 96, 103, 162, 137, 254, 58, 135, 75, 143, 13, 4, 204, 44, 175, 148, 5, 148, 58, 245, 222, 234, 12, 77, 81, 97, 78, 223, 140, 231, 7, 141, 13, 14, 158, 240, 153, 179, 110, 250, 144, 186, 183, 111, 126, 201, 214, 21, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_872(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 163;
  test.test_number =872;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 8, 214, 47, 1, 115, 111, 220, 244, 234, 193, 31, 59, 240, 190, 60, 115, 178, 31, 89, 121, 2, 159, 198, 215, 43, 74, 77, 172, 95, 207, 211, 96, 194, 122, 240, 31, 177, 197, 240, 134, 162, 243, 237, 131, 125, 68, 49, 16, 165, 255, 62, 247, 220, 87, 144, 80, 148, 214, 55, 168, 128, 192, 63, 2, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_873(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 237;
  test.test_number =873;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 88, 54, 123, 49, 89, 201, 173, 136, 154, 176, 134, 40, 12, 131, 44, 179, 243, 133, 242, 107, 155, 9, 251, 140, 41, 231, 31, 124, 31, 150, 43, 157, 103, 246, 205, 97, 93, 138, 146, 79, 14, 246, 241, 110, 71, 143, 235, 47, 167, 31, 13, 30, 223, 248, 242, 221, 113, 0, 52, 187, 25, 212, 146, 236, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_874(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[2] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[3] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[4] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[7] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[8] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[12] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[14] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[15] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[16] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[17] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[21] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[22] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[27] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[28] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[32] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[33] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[34] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[38] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[43] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[44] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 290;
  test.test_number =874;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9GL4NbsVF4Awba2CSnbtUicfGZdgaWWU1CHba2VuDh9s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "cfbLU4D6kkFVDumFJ35SGLfaYQjbcL4LxA1nuszGLsv",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 50, 147, 126, 180, 76, 140, 45, 244, 168, 154, 82, 200, 194, 133, 116, 44, 117, 67, 98, 217, 6, 236, 215, 72, 193, 152, 11, 173, 232, 185, 71, 152, 114, 217, 253, 107, 16, 69, 106, 253, 166, 7, 188, 167, 215, 155, 255, 93, 197, 128, 57, 180, 244, 147, 250, 194, 82, 201, 83, 139, 254, 140, 105, 99, 1, 0, 1, 3, 122, 202, 193, 180, 131, 162, 175, 4, 241, 159, 8, 98, 234, 159, 134, 84, 55, 160, 128, 131, 88, 153, 179, 234, 37, 51, 153, 126, 153, 180, 141, 2, 9, 34, 246, 228, 124, 40, 175, 176, 216, 31, 43, 202, 57, 14, 35, 240, 41, 22, 155, 233, 24, 4, 204, 232, 42, 180, 195, 41, 102, 186, 186, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
