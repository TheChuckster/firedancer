#include "../fd_tests.h"
int test_60(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  uchar disabled_features[] = { 27,116,90,80,108,33,111,98,82,109,118,126,89,56,77,103,15,124,24,105,117,128,79,61,78,29,123,92,62,76,125,112,55,75,26,106,30,110,2,114,83,113,121,122,120,127,87 };
  test.disable_feature = disabled_features;
  test.test_name = "config_processor::tests::test_process_store_without_config_signer";
  test.test_nonce  = 10;
  test.test_number = 60;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
  ulong test_accs_len = 1;
  fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
  fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );

  fd_executor_test_acc_t* test_acc = test_accs;
  fd_base58_decode_32( "HMmG6gZunubSCn4SttEYgREhRcHDgAX5gYhDrxXkYU4R",  (uchar *) &test_acc->pubkey);
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (uchar *) &test_acc->owner);
  test_acc->lamports        = 0UL;
  test_acc->result_lamports = 0UL;
  test_acc->executable      = 0;
  test_acc->rent_epoch      = 0;
  static uchar const fd_flamenco_native_prog_test_60_acc_0_data[] = { 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
  test_acc->data            = fd_flamenco_native_prog_test_60_acc_0_data;
  test_acc->data_len        = 75UL;
  static uchar const fd_flamenco_native_prog_test_60_acc_0_post_data[] = { 0x00,0x15,0xcd,0x5b,0x07,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00 };
  test_acc->result_data     = fd_flamenco_native_prog_test_60_acc_0_post_data;
  test_acc->result_data_len = 75UL;
  test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static uchar const fd_flamenco_native_prog_test_60_raw[] = { 0x01,0xa7,0xf9,0x5b,0x31,0xb0,0x01,0xc7,0xa8,0xcd,0x0c,0x05,0x19,0x1e,0xfb,0x02,0x6d,0x50,0xe6,0x43,0x74,0xd5,0xbb,0x19,0x76,0x13,0x97,0xcc,0x9f,0xca,0x57,0x51,0x82,0x82,0x12,0xfc,0xc2,0xf7,0x49,0x37,0x1a,0x22,0x2e,0x7e,0x19,0xf0,0x9f,0x54,0xeb,0x28,0xbe,0xb2,0x4a,0x35,0x70,0xa6,0xa7,0x5a,0x52,0x46,0x77,0x7f,0x81,0xbf,0x66,0x01,0x00,0x01,0x02,0xf3,0x0c,0xa6,0xfc,0xcd,0xe3,0x0d,0xe7,0x6a,0xab,0x37,0x91,0x71,0x36,0x7a,0x1a,0xad,0xfe,0x5c,0x97,0x5e,0x78,0x58,0xab,0x0e,0xf0,0xf0,0x47,0x29,0x5f,0x33,0x1a,0x03,0x06,0x4a,0xa3,0x00,0x2f,0x74,0xdc,0xc8,0x6e,0x43,0x31,0x0f,0x0c,0x05,0x2a,0xf8,0xc5,0xda,0x27,0xf6,0x10,0x40,0x19,0xa3,0x23,0xef,0xa0,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x01,0x01,0x01,0x00,0x09,0x00,0x15,0xcd,0x5b,0x07,0x00,0x00,0x00,0x00 };
  test.raw_tx = fd_flamenco_native_prog_test_60_raw;
  test.raw_tx_len = 179UL;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
