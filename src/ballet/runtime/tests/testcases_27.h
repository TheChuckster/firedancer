int test_650(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 93;
  test.test_number =650;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ENyvk3wQJTk9U2LGvNCv29mtTTet7QKAfZxV4XAvYrES",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8NuCUBUQtaKUDaxv7qvhJvoziMdMqNnHnrKCW8iSYCZP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 102, 37, 226, 38, 56, 99, 13, 56, 131, 254, 244, 8, 46, 200, 202, 137, 19, 110, 74, 199, 104, 121, 89, 22, 43, 1, 50, 60, 51, 231, 248, 93, 23, 5, 31, 99, 204, 216, 14, 48, 247, 58, 193, 185, 4, 143, 79, 152, 190, 118, 155, 254, 20, 196, 75, 98, 78, 237, 120, 196, 161, 46, 239, 28, 1, 0, 1, 3, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 109, 158, 6, 144, 124, 74, 65, 113, 34, 136, 169, 107, 245, 228, 141, 102, 85, 204, 138, 43, 181, 253, 178, 143, 219, 122, 108, 220, 37, 131, 7, 42, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_651(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[10] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 116;
  test.test_number =651;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "dGVnFPvXC5yoWhtYegQ8j8331WC7r1ZKWWpGDSagimk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "21YKAXRZ8Ve342jBo5qA47gqPy1bH4nCYP6fmd2yGzhN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 208, 87, 254, 53, 53, 55, 79, 151, 67, 218, 75, 195, 69, 238, 190, 80, 154, 49, 135, 89, 122, 209, 53, 71, 202, 237, 61, 34, 57, 93, 255, 68, 120, 193, 100, 111, 29, 128, 121, 86, 0, 96, 212, 45, 184, 83, 97, 80, 237, 121, 229, 214, 36, 253, 104, 27, 92, 49, 155, 134, 25, 2, 31, 248, 1, 0, 1, 3, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 14, 255, 23, 196, 218, 108, 18, 2, 213, 216, 37, 175, 5, 164, 219, 147, 105, 187, 111, 201, 85, 219, 185, 202, 222, 60, 48, 121, 242, 179, 38, 161, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_652(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[10] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 162;
  test.test_number =652;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "dGVnFPvXC5yoWhtYegQ8j8331WC7r1ZKWWpGDSagimk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "21YKAXRZ8Ve342jBo5qA47gqPy1bH4nCYP6fmd2yGzhN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 65, 253, 179, 104, 46, 170, 27, 247, 177, 103, 247, 58, 43, 231, 169, 213, 179, 45, 131, 32, 36, 82, 129, 215, 154, 169, 71, 77, 248, 221, 227, 179, 53, 155, 204, 205, 236, 227, 24, 161, 70, 10, 248, 151, 4, 155, 160, 127, 80, 97, 254, 248, 62, 209, 129, 10, 134, 31, 251, 170, 156, 83, 84, 188, 1, 0, 1, 3, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 14, 255, 23, 196, 218, 108, 18, 2, 213, 216, 37, 175, 5, 164, 219, 147, 105, 187, 111, 201, 85, 219, 185, 202, 222, 60, 48, 121, 242, 179, 38, 161, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_653(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[10] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 176;
  test.test_number =653;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "dGVnFPvXC5yoWhtYegQ8j8331WC7r1ZKWWpGDSagimk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "21YKAXRZ8Ve342jBo5qA47gqPy1bH4nCYP6fmd2yGzhN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 64, 176, 233, 102, 46, 241, 217, 248, 52, 48, 203, 124, 134, 124, 29, 225, 55, 6, 109, 123, 138, 69, 217, 74, 94, 1, 102, 19, 50, 195, 60, 107, 153, 98, 26, 2, 100, 13, 105, 90, 1, 132, 110, 116, 135, 115, 239, 138, 48, 42, 173, 190, 121, 98, 229, 90, 202, 149, 117, 72, 52, 89, 25, 152, 1, 0, 1, 3, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 14, 255, 23, 196, 218, 108, 18, 2, 213, 216, 37, 175, 5, 164, 219, 147, 105, 187, 111, 201, 85, 219, 185, 202, 222, 60, 48, 121, 242, 179, 38, 161, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_654(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[10] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 64;
  test.test_number =654;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "dGVnFPvXC5yoWhtYegQ8j8331WC7r1ZKWWpGDSagimk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "21YKAXRZ8Ve342jBo5qA47gqPy1bH4nCYP6fmd2yGzhN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 83, 69, 146, 62, 172, 168, 200, 96, 198, 233, 203, 160, 197, 162, 56, 133, 205, 130, 12, 170, 36, 91, 186, 230, 240, 63, 21, 233, 234, 6, 134, 16, 140, 63, 234, 237, 74, 32, 87, 73, 55, 253, 12, 93, 84, 226, 188, 129, 126, 117, 96, 40, 77, 228, 144, 154, 137, 246, 223, 112, 137, 166, 135, 241, 1, 0, 1, 3, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 14, 255, 23, 196, 218, 108, 18, 2, 213, 216, 37, 175, 5, 164, 219, 147, 105, 187, 111, 201, 85, 219, 185, 202, 222, 60, 48, 121, 242, 179, 38, 161, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_655(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[4] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[10] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[11] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[14] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[19] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[30] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[39] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[45] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[46] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 97;
  test.test_number =655;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "dGVnFPvXC5yoWhtYegQ8j8331WC7r1ZKWWpGDSagimk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "21YKAXRZ8Ve342jBo5qA47gqPy1bH4nCYP6fmd2yGzhN",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 44, 244, 122, 255, 167, 178, 225, 75, 42, 184, 198, 223, 86, 212, 204, 72, 135, 46, 102, 175, 253, 38, 158, 69, 41, 56, 111, 30, 238, 127, 168, 27, 54, 27, 111, 205, 114, 42, 182, 106, 3, 64, 168, 172, 142, 56, 253, 98, 48, 248, 194, 99, 113, 24, 189, 215, 126, 28, 166, 220, 61, 231, 163, 12, 1, 0, 1, 3, 9, 74, 110, 69, 102, 73, 101, 11, 118, 183, 160, 124, 100, 56, 227, 74, 200, 131, 206, 55, 130, 15, 110, 12, 11, 172, 90, 117, 90, 108, 154, 47, 14, 255, 23, 196, 218, 108, 18, 2, 213, 216, 37, 175, 5, 164, 219, 147, 105, 187, 111, 201, 85, 219, 185, 202, 222, 60, 48, 121, 242, 179, 38, 161, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_656(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 165;
  test.test_number =656;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 0, 201, 216, 35, 152, 27, 206, 212, 152, 166, 41, 164, 44, 94, 62, 167, 45, 89, 238, 18, 54, 143, 222, 232, 173, 203, 189, 54, 82, 44, 211, 126, 136, 112, 25, 183, 143, 20, 89, 245, 167, 36, 0, 39, 25, 248, 45, 122, 224, 205, 227, 251, 126, 48, 11, 34, 155, 69, 17, 79, 67, 217, 252, 47, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_657(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 191;
  test.test_number =657;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 29, 195, 168, 160, 16, 12, 140, 253, 107, 10, 67, 248, 18, 124, 91, 73, 144, 210, 142, 3, 122, 130, 177, 36, 100, 32, 169, 217, 26, 175, 198, 92, 217, 237, 188, 144, 145, 80, 4, 179, 96, 111, 245, 157, 42, 91, 9, 38, 134, 22, 229, 58, 225, 159, 93, 204, 181, 146, 196, 54, 151, 207, 42, 72, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_658(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 233;
  test.test_number =658;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 135, 208, 31, 198, 51, 52, 106, 32, 80, 250, 167, 162, 8, 196, 231, 69, 236, 207, 175, 56, 149, 68, 103, 59, 202, 29, 76, 133, 58, 156, 252, 170, 201, 162, 136, 245, 150, 7, 10, 42, 47, 237, 170, 136, 123, 189, 157, 125, 14, 29, 252, 68, 188, 209, 66, 160, 231, 168, 26, 66, 14, 86, 129, 118, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_659(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 288;
  test.test_number =659;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 3, 80, 135, 173, 185, 249, 246, 199, 125, 234, 144, 130, 158, 219, 135, 236, 194, 39, 228, 107, 121, 5, 254, 63, 207, 40, 248, 141, 26, 116, 103, 91, 40, 103, 173, 5, 53, 134, 24, 132, 73, 203, 26, 107, 63, 152, 254, 4, 198, 114, 102, 50, 118, 140, 54, 230, 161, 24, 7, 209, 9, 172, 184, 153, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_660(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 87;
  test.test_number =660;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 104, 165, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 201, 228, 173, 61, 127, 245, 152, 35, 69, 45, 148, 79, 240, 170, 57, 125, 148, 255, 7, 229, 168, 241, 150, 109, 61, 231, 79, 56, 179, 119, 106, 70, 24, 209, 246, 222, 82, 121, 200, 11, 185, 84, 201, 97, 7, 233, 243, 61, 210, 199, 253, 237, 40, 0, 218, 134, 188, 166, 244, 214, 226, 53, 88, 249, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_661(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 104;
  test.test_number =661;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 104, 165, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 104, 13, 118, 2, 163, 89, 248, 197, 237, 137, 231, 146, 178, 99, 128, 214, 42, 173, 221, 22, 215, 153, 168, 167, 152, 39, 212, 157, 68, 70, 69, 224, 38, 232, 168, 241, 181, 80, 123, 198, 236, 112, 117, 94, 56, 143, 72, 125, 90, 252, 230, 51, 206, 182, 118, 239, 129, 90, 26, 30, 54, 47, 75, 231, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_662(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 157;
  test.test_number =662;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 254, 86, 144, 175, 7, 229, 76, 94, 66, 195, 39, 245, 39, 43, 177, 22, 110, 136, 58, 121, 10, 159, 136, 79, 99, 57, 45, 186, 121, 141, 47, 158, 177, 14, 89, 165, 148, 138, 198, 91, 68, 52, 137, 159, 157, 170, 185, 2, 42, 187, 249, 140, 87, 116, 161, 12, 161, 13, 100, 57, 39, 212, 209, 187, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_663(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 202;
  test.test_number =663;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 145, 218, 56, 183, 155, 8, 23, 20, 107, 57, 19, 57, 176, 246, 247, 199, 129, 104, 129, 26, 25, 113, 18, 222, 66, 111, 223, 223, 240, 164, 83, 192, 15, 69, 52, 212, 34, 196, 220, 165, 194, 1, 65, 54, 3, 24, 218, 130, 172, 213, 176, 18, 150, 75, 187, 85, 235, 109, 109, 99, 7, 201, 93, 139, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_664(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 249;
  test.test_number =664;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 190, 155, 135, 187, 198, 191, 187, 165, 71, 66, 92, 64, 53, 148, 246, 153, 236, 18, 175, 48, 55, 15, 151, 207, 163, 39, 214, 234, 42, 57, 251, 120, 134, 185, 185, 36, 13, 83, 101, 226, 183, 144, 175, 89, 179, 137, 94, 233, 64, 125, 79, 49, 167, 189, 242, 179, 206, 130, 85, 217, 30, 32, 29, 227, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_665(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 289;
  test.test_number =665;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 147, 170, 111, 185, 119, 244, 45, 46, 78, 185, 187, 29, 243, 212, 172, 158, 16, 125, 141, 237, 169, 4, 33, 219, 57, 166, 49, 89, 49, 164, 90, 247, 93, 200, 13, 201, 4, 221, 34, 130, 239, 54, 81, 38, 21, 137, 163, 53, 243, 144, 51, 94, 81, 119, 143, 179, 154, 181, 104, 30, 81, 58, 213, 227, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_666(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 123;
  test.test_number =666;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 111, 66, 234, 123, 133, 214, 93, 56, 147, 208, 104, 193, 13, 40, 120, 123, 107, 92, 241, 139, 225, 70, 147, 54, 171, 98, 203, 247, 124, 10, 37, 245, 212, 206, 168, 89, 112, 62, 149, 135, 201, 107, 200, 33, 22, 180, 224, 36, 68, 53, 184, 62, 209, 223, 85, 25, 149, 49, 51, 217, 212, 40, 46, 95, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_667(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 174;
  test.test_number =667;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 220, 176, 61, 3, 116, 181, 223, 158, 82, 138, 223, 15, 174, 107, 158, 123, 152, 121, 171, 244, 31, 205, 193, 177, 38, 131, 215, 162, 93, 163, 130, 4, 231, 120, 62, 123, 187, 223, 238, 236, 193, 42, 206, 143, 75, 158, 2, 123, 224, 61, 9, 93, 84, 150, 44, 35, 251, 147, 202, 67, 113, 133, 235, 115, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_668(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 208;
  test.test_number =668;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 60, 122, 125, 33, 212, 76, 63, 2, 142, 4, 73, 232, 240, 197, 136, 253, 84, 216, 151, 218, 217, 42, 114, 91, 42, 209, 26, 138, 240, 193, 242, 182, 31, 103, 230, 153, 54, 1, 165, 47, 179, 240, 120, 149, 90, 163, 68, 114, 162, 91, 133, 181, 190, 249, 22, 80, 237, 68, 163, 82, 158, 176, 91, 15, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_669(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 248;
  test.test_number =669;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 79, 165, 241, 78, 106, 112, 202, 208, 232, 9, 147, 46, 173, 253, 111, 171, 137, 229, 161, 124, 206, 223, 192, 75, 129, 108, 3, 210, 155, 224, 39, 114, 56, 36, 28, 70, 53, 249, 82, 37, 226, 226, 158, 155, 134, 6, 231, 249, 53, 242, 102, 190, 119, 158, 1, 213, 70, 171, 191, 109, 66, 26, 109, 95, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_670(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[1] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[3] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[4] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[8] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[14] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[15] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[16] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[17] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[18] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[19] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[20] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[21] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[22] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[31] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[32] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[35] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[39] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[42] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 50;
  test.test_number =670;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "WQZhzhFbhdcwwb46t4zGNXri1WFYhNqdoQ2yWqR8GVc",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HGgQR9ndQkfUoutRcteNE5C8dP2RqgQRFiy6B2jSW9gm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 200, 51, 234, 198, 135, 114, 131, 71, 106, 54, 123, 150, 224, 64, 148, 59, 157, 28, 142, 68, 216, 73, 61, 32, 119, 57, 48, 150, 7, 234, 199, 40, 118, 122, 147, 114, 247, 160, 31, 246, 31, 67, 183, 181, 139, 76, 227, 74, 142, 243, 31, 140, 73, 132, 193, 92, 168, 226, 152, 72, 174, 144, 21, 226, 1, 0, 1, 3, 7, 136, 124, 189, 46, 3, 194, 215, 186, 145, 125, 175, 230, 155, 58, 36, 90, 58, 13, 22, 210, 182, 51, 133, 227, 201, 249, 77, 7, 170, 218, 111, 241, 191, 65, 196, 27, 7, 8, 44, 167, 7, 241, 98, 232, 126, 235, 19, 193, 44, 128, 255, 42, 20, 33, 17, 1, 130, 177, 51, 51, 37, 51, 186, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_671(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 122;
  test.test_number =671;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 185, 27, 199, 171, 1, 48, 191, 93, 75, 126, 175, 255, 65, 188, 253, 191, 103, 47, 177, 132, 155, 144, 13, 110, 209, 89, 18, 214, 201, 252, 238, 142, 169, 32, 44, 236, 254, 16, 242, 60, 210, 172, 105, 99, 38, 122, 53, 14, 251, 212, 12, 170, 134, 48, 176, 171, 36, 234, 4, 79, 209, 31, 173, 43, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_672(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 181;
  test.test_number =672;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 73, 67, 102, 32, 58, 25, 176, 87, 94, 176, 184, 203, 201, 81, 208, 12, 62, 235, 202, 155, 157, 25, 195, 32, 213, 194, 27, 134, 204, 233, 147, 27, 34, 255, 221, 42, 135, 53, 232, 195, 20, 26, 125, 30, 45, 143, 77, 47, 90, 24, 194, 177, 144, 230, 9, 241, 224, 85, 136, 245, 43, 206, 248, 111, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_673(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 217;
  test.test_number =673;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 254, 253, 21, 237, 252, 99, 175, 146, 227, 139, 208, 241, 53, 1, 180, 140, 207, 61, 152, 50, 184, 26, 4, 140, 239, 227, 178, 206, 136, 102, 225, 236, 44, 182, 139, 226, 174, 156, 210, 204, 79, 50, 60, 87, 196, 34, 84, 243, 184, 69, 18, 226, 154, 25, 2, 188, 242, 92, 240, 178, 245, 201, 86, 141, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_674(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 265;
  test.test_number =674;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 81, 85, 132, 97, 99, 76, 177, 171, 15, 125, 246, 234, 61, 253, 169, 132, 246, 175, 153, 179, 54, 220, 104, 128, 93, 205, 174, 145, 27, 50, 161, 102, 246, 184, 117, 124, 153, 230, 105, 115, 198, 226, 16, 252, 129, 18, 152, 69, 32, 30, 149, 59, 54, 158, 87, 232, 118, 106, 145, 144, 116, 93, 175, 35, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
