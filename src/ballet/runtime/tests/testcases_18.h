int test_425(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_split_not_uninitialized::old_behavior";
  test.test_nonce = 225;
  test.test_number =425;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "aTksiHJFtSoSzdrqW5TCndXWbFALaQFGDTVKyfP1uh1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 146, 107, 154, 0, 102, 111, 96, 238, 88, 195, 191, 83, 57, 210, 50, 80, 233, 110, 114, 81, 148, 167, 33, 222, 133, 108, 158, 17, 187, 236, 128, 8, 146, 107, 154, 0, 102, 111, 96, 238, 88, 195, 191, 83, 57, 210, 50, 80, 233, 110, 114, 81, 148, 167, 33, 222, 133, 108, 158, 17, 187, 236, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 146, 107, 154, 0, 102, 111, 96, 238, 88, 195, 191, 83, 57, 210, 50, 80, 233, 110, 114, 81, 148, 167, 33, 222, 133, 108, 158, 17, 187, 236, 128, 8, 146, 107, 154, 0, 102, 111, 96, 238, 88, 195, 191, 83, 57, 210, 50, 80, 233, 110, 114, 81, 148, 167, 33, 222, 133, 108, 158, 17, 187, 236, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "4t4QY1D7fxEC5wEwK5QuZoj2CejN5zKhUpV34uZvi4G4",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 178, 55, 148, 9, 65, 246, 151, 185, 224, 13, 62, 11, 32, 43, 15, 105, 83, 252, 93, 17, 70, 72, 247, 159, 63, 219, 186, 240, 57, 214, 164, 203, 10, 34, 173, 226, 253, 57, 109, 159, 81, 173, 142, 31, 97, 240, 157, 71, 193, 22, 233, 175, 120, 242, 50, 173, 202, 250, 178, 220, 159, 4, 200, 212, 1, 0, 1, 2, 8, 146, 107, 154, 0, 102, 111, 96, 238, 88, 195, 191, 83, 57, 210, 50, 80, 233, 110, 114, 81, 148, 167, 33, 222, 133, 108, 158, 17, 187, 236, 128, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 0, 12, 3, 0, 0, 0, 21, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 183;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_426(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 135;
  test.test_number =426;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 37, 140, 110, 60, 97, 233, 218, 133, 163, 19, 82, 179, 90, 246, 56, 58, 205, 169, 49, 110, 24, 238, 227, 216, 90, 216, 71, 154, 217, 166, 65, 250, 236, 218, 221, 58, 136, 110, 155, 184, 181, 193, 76, 184, 227, 240, 8, 205, 6, 233, 9, 93, 95, 159, 33, 95, 34, 220, 83, 20, 195, 117, 108, 21, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_427(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 164;
  test.test_number =427;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 28, 57, 115, 193, 137, 63, 33, 15, 48, 183, 164, 4, 4, 153, 118, 49, 96, 67, 83, 189, 111, 162, 103, 152, 254, 73, 0, 247, 113, 82, 224, 189, 62, 210, 149, 143, 169, 230, 22, 126, 231, 239, 117, 106, 1, 176, 113, 37, 63, 254, 160, 252, 19, 49, 26, 244, 197, 245, 26, 139, 90, 207, 177, 245, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_428(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 192;
  test.test_number =428;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 56, 230, 16, 169, 26, 241, 160, 245, 224, 186, 85, 101, 196, 23, 206, 80, 112, 142, 213, 190, 22, 129, 41, 204, 208, 223, 248, 249, 55, 126, 157, 133, 205, 237, 250, 247, 57, 4, 235, 201, 93, 12, 32, 38, 65, 65, 168, 196, 249, 144, 192, 113, 217, 85, 205, 139, 160, 235, 50, 167, 134, 69, 115, 78, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_429(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 222;
  test.test_number =429;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 207, 53, 128, 180, 236, 82, 203, 6, 162, 81, 224, 106, 112, 193, 157, 198, 135, 39, 143, 208, 250, 93, 190, 215, 49, 252, 195, 234, 40, 245, 164, 184, 40, 77, 19, 152, 65, 183, 80, 154, 5, 224, 134, 151, 255, 11, 138, 41, 140, 46, 253, 219, 84, 183, 181, 109, 233, 163, 140, 249, 136, 96, 86, 206, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_430(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 263;
  test.test_number =430;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 126, 229, 165, 130, 12, 202, 213, 219, 164, 19, 65, 186, 45, 45, 204, 60, 76, 99, 32, 241, 107, 53, 79, 58, 203, 192, 209, 104, 243, 70, 179, 139, 50, 58, 160, 146, 13, 107, 137, 104, 94, 87, 55, 223, 1, 76, 194, 237, 116, 166, 69, 180, 15, 97, 198, 161, 147, 129, 97, 10, 75, 36, 164, 29, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 1, 63, 123, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_431(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 149;
  test.test_number =431;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 107, 193, 174, 221, 203, 237, 140, 191, 200, 42, 157, 82, 102, 104, 4, 176, 207, 90, 249, 16, 99, 176, 217, 164, 235, 49, 184, 234, 9, 30, 16, 226, 207, 201, 231, 40, 48, 147, 125, 185, 171, 76, 161, 89, 178, 65, 209, 109, 32, 34, 132, 146, 26, 199, 120, 145, 51, 0, 123, 103, 220, 20, 239, 232, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_432(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 179;
  test.test_number =432;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 111, 209, 196, 238, 170, 63, 186, 39, 252, 11, 121, 176, 27, 195, 51, 109, 64, 140, 190, 70, 74, 110, 35, 6, 28, 88, 1, 172, 95, 52, 40, 184, 190, 100, 87, 50, 106, 84, 113, 251, 156, 181, 13, 184, 56, 117, 71, 211, 163, 140, 25, 167, 211, 144, 234, 56, 79, 40, 55, 63, 163, 157, 210, 39, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_433(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 203;
  test.test_number =433;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 66, 145, 3, 114, 70, 83, 159, 228, 51, 48, 172, 99, 237, 67, 74, 113, 114, 70, 33, 211, 159, 154, 241, 176, 107, 117, 27, 88, 23, 226, 92, 27, 172, 152, 98, 50, 133, 4, 250, 181, 68, 137, 118, 74, 148, 148, 44, 178, 192, 135, 123, 91, 246, 244, 225, 50, 194, 147, 159, 247, 60, 113, 148, 20, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_434(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 250;
  test.test_number =434;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2004565759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 101, 223, 57, 102, 80, 93, 141, 119, 254, 155, 229, 180, 224, 20, 50, 14, 233, 251, 188, 189, 123, 122, 97, 139, 211, 66, 245, 81, 31, 206, 130, 192, 96, 52, 115, 131, 196, 110, 121, 45, 86, 224, 95, 139, 182, 146, 82, 148, 231, 103, 67, 89, 89, 113, 34, 77, 15, 224, 145, 134, 80, 5, 134, 152, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_435(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::new_behavior";
  test.test_nonce = 285;
  test.test_number =435;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "4r6VViwLpq7ccZgJunHDeWF97pRsWbzVbUNvxoS3RrZy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7u2pEBkXzB2yDoPebEnW7bqRZz1kuLFWm3xq5pB6yN4s",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 12, 216, 82, 230, 158, 89, 219, 131, 228, 122, 195, 91, 9, 199, 211, 43, 58, 191, 91, 179, 41, 220, 168, 191, 147, 228, 16, 14, 200, 241, 21, 134, 222, 30, 22, 203, 225, 145, 36, 184, 111, 143, 164, 82, 132, 174, 135, 126, 184, 166, 144, 48, 8, 187, 35, 24, 8, 122, 122, 115, 164, 229, 110, 218, 1, 0, 1, 3, 57, 38, 186, 189, 111, 0, 177, 142, 76, 36, 150, 241, 236, 65, 237, 201, 60, 201, 205, 95, 66, 90, 10, 255, 194, 77, 219, 187, 254, 15, 105, 220, 102, 122, 96, 1, 168, 51, 78, 33, 204, 114, 229, 179, 164, 248, 102, 114, 209, 112, 133, 123, 81, 100, 102, 238, 182, 231, 4, 38, 43, 244, 212, 228, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_436(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 153;
  test.test_number =436;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 161, 253, 72, 170, 96, 247, 74, 99, 183, 214, 171, 162, 253, 114, 159, 8, 216, 6, 68, 67, 28, 245, 111, 130, 119, 65, 210, 24, 156, 29, 90, 102, 168, 46, 250, 229, 35, 204, 163, 64, 21, 201, 14, 83, 158, 61, 230, 238, 254, 237, 134, 56, 215, 254, 38, 32, 207, 225, 20, 187, 124, 210, 8, 216, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_437(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 202;
  test.test_number =437;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 150, 102, 240, 132, 216, 142, 98, 158, 91, 157, 8, 175, 119, 49, 104, 224, 167, 137, 47, 59, 164, 158, 32, 147, 21, 118, 138, 213, 238, 141, 148, 47, 20, 143, 53, 220, 33, 118, 113, 199, 161, 132, 218, 244, 170, 98, 126, 244, 54, 119, 149, 48, 10, 48, 205, 86, 19, 160, 151, 101, 67, 140, 186, 198, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_438(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 244;
  test.test_number =438;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 136, 227, 171, 17, 1, 85, 103, 4, 214, 183, 139, 191, 189, 62, 100, 23, 130, 47, 229, 250, 200, 96, 7, 135, 190, 120, 47, 93, 220, 250, 56, 224, 150, 246, 230, 13, 36, 181, 242, 204, 14, 55, 28, 38, 71, 39, 177, 16, 237, 154, 212, 17, 6, 209, 23, 240, 231, 87, 163, 119, 118, 101, 128, 63, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_439(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 268;
  test.test_number =439;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 107, 84, 205, 129, 51, 225, 134, 45, 49, 173, 12, 178, 120, 195, 82, 132, 98, 80, 33, 19, 225, 22, 30, 52, 196, 117, 229, 44, 181, 207, 87, 150, 100, 25, 81, 92, 146, 160, 131, 7, 205, 38, 61, 15, 97, 59, 6, 62, 54, 102, 74, 7, 66, 56, 101, 1, 14, 229, 92, 132, 103, 146, 13, 3, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_440(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 297;
  test.test_number =440;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 116, 121, 36, 119, 255, 196, 144, 54, 138, 27, 135, 227, 25, 233, 0, 161, 102, 204, 17, 218, 195, 207, 16, 178, 64, 180, 176, 138, 140, 66, 122, 68, 75, 198, 12, 120, 240, 184, 255, 66, 121, 248, 234, 26, 191, 95, 53, 46, 4, 199, 11, 43, 140, 130, 42, 242, 142, 4, 138, 217, 168, 121, 102, 47, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 3, 171, 69, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_441(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 189;
  test.test_number =441;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 176, 148, 151, 83, 96, 174, 195, 217, 251, 107, 231, 137, 91, 183, 0, 29, 244, 208, 59, 70, 199, 233, 116, 76, 252, 24, 175, 232, 223, 159, 28, 248, 44, 64, 176, 218, 220, 187, 70, 202, 152, 60, 7, 28, 196, 230, 137, 244, 100, 194, 149, 209, 132, 178, 61, 17, 137, 77, 173, 148, 90, 90, 96, 161, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_442(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 209;
  test.test_number =442;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 215, 211, 228, 9, 120, 43, 214, 55, 124, 3, 5, 218, 11, 136, 150, 114, 50, 115, 51, 39, 169, 65, 228, 223, 21, 207, 104, 139, 226, 218, 119, 30, 14, 244, 58, 228, 150, 81, 59, 184, 18, 23, 117, 67, 69, 249, 181, 28, 95, 166, 157, 149, 150, 147, 61, 84, 240, 183, 54, 31, 187, 162, 90, 183, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_443(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 260;
  test.test_number =443;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 73, 97, 8, 30, 238, 140, 125, 32, 212, 211, 83, 90, 69, 38, 234, 193, 104, 9, 230, 148, 10, 99, 136, 58, 90, 157, 110, 66, 170, 15, 13, 1, 104, 227, 159, 136, 26, 185, 41, 161, 244, 42, 164, 201, 167, 214, 75, 228, 63, 117, 93, 50, 18, 174, 127, 38, 215, 64, 30, 162, 98, 149, 35, 247, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_444(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 287;
  test.test_number =444;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 121, 159, 178, 94, 167, 132, 15, 221, 5, 101, 51, 90, 26, 86, 129, 229, 192, 224, 111, 117, 220, 126, 62, 161, 237, 252, 150, 80, 187, 44, 132, 162, 177, 37, 240, 184, 71, 89, 213, 76, 204, 1, 49, 58, 197, 89, 8, 6, 114, 189, 77, 189, 18, 49, 13, 238, 218, 28, 179, 27, 212, 168, 155, 38, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_445(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_to_account_with_rent_exempt_reserve::old_behavior";
  test.test_nonce = 312;
  test.test_number =445;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "13MJeVGXZ2Szp6WZ5rnKcCLHxSr8cbujQ6o8nvGkpR1W",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565762UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "7MSCv5ZdnCuWcG4u1cSSWm9gRkCfwLYdihKhsJPutWrh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 4565762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 215, 99, 246, 24, 129, 98, 127, 151, 61, 133, 238, 153, 181, 190, 212, 154, 248, 100, 12, 108, 108, 248, 18, 97, 180, 75, 97, 68, 255, 222, 7, 30, 106, 19, 157, 68, 236, 255, 115, 99, 166, 102, 20, 112, 214, 83, 57, 30, 7, 231, 168, 205, 161, 175, 208, 237, 242, 206, 242, 208, 151, 59, 13, 50, 1, 0, 1, 3, 0, 154, 30, 164, 228, 214, 174, 47, 168, 35, 175, 160, 209, 237, 28, 56, 123, 17, 246, 43, 196, 251, 211, 220, 94, 208, 64, 52, 50, 203, 129, 165, 94, 98, 60, 212, 73, 186, 100, 132, 4, 213, 57, 102, 175, 83, 84, 198, 13, 241, 243, 122, 198, 18, 92, 234, 76, 88, 234, 40, 124, 236, 28, 142, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_446(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 273;
  test.test_number =446;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HBdhUK2NoWbAGTqrRVufcBFjm8x2c3kHmBbv8T9KAjrp",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "86u9Jiwqie46UhrwV3WqyH1Wwi2uVHKJN5C5BcWSQLMd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 222, 55, 85, 191, 18, 191, 123, 136, 54, 21, 237, 52, 2, 93, 186, 190, 214, 117, 203, 81, 42, 87, 87, 114, 149, 65, 153, 49, 187, 192, 147, 32, 105, 160, 234, 164, 220, 239, 7, 1, 14, 202, 225, 45, 152, 139, 65, 221, 215, 45, 113, 57, 78, 4, 72, 252, 135, 165, 125, 218, 173, 252, 126, 14, 1, 0, 1, 3, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 105, 132, 171, 200, 218, 20, 75, 210, 211, 157, 199, 93, 216, 140, 221, 198, 237, 22, 181, 192, 89, 79, 50, 198, 14, 171, 79, 132, 161, 247, 63, 96, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_447(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 177;
  test.test_number =447;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HBdhUK2NoWbAGTqrRVufcBFjm8x2c3kHmBbv8T9KAjrp",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "86u9Jiwqie46UhrwV3WqyH1Wwi2uVHKJN5C5BcWSQLMd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 106, 86, 210, 75, 175, 163, 9, 139, 121, 91, 22, 250, 64, 44, 198, 66, 140, 107, 180, 232, 46, 54, 187, 48, 68, 89, 169, 195, 245, 244, 42, 58, 166, 104, 118, 253, 72, 224, 147, 138, 189, 112, 142, 193, 119, 181, 12, 153, 236, 254, 50, 110, 150, 173, 13, 181, 119, 158, 52, 234, 139, 23, 255, 169, 1, 0, 1, 3, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 105, 132, 171, 200, 218, 20, 75, 210, 211, 157, 199, 93, 216, 140, 221, 198, 237, 22, 181, 192, 89, 79, 50, 198, 14, 171, 79, 132, 161, 247, 63, 96, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 127, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_448(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 315;
  test.test_number =448;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HBdhUK2NoWbAGTqrRVufcBFjm8x2c3kHmBbv8T9KAjrp",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2004565760UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 105, 88, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "86u9Jiwqie46UhrwV3WqyH1Wwi2uVHKJN5C5BcWSQLMd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2004565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 88, 118, 146, 172, 96, 141, 172, 159, 79, 49, 146, 195, 249, 63, 194, 168, 195, 134, 215, 15, 186, 131, 14, 189, 1, 161, 120, 76, 189, 1, 210, 79, 122, 20, 237, 180, 198, 14, 72, 12, 53, 76, 133, 241, 0, 248, 7, 97, 238, 132, 19, 254, 34, 38, 48, 96, 62, 51, 84, 127, 11, 170, 63, 162, 1, 0, 1, 3, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 105, 132, 171, 200, 218, 20, 75, 210, 211, 157, 199, 93, 216, 140, 221, 198, 237, 22, 181, 192, 89, 79, 50, 198, 14, 171, 79, 132, 161, 247, 63, 96, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_449(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.test_name = "stake_instruction::tests::test_split_with_rent::new_behavior";
  test.test_nonce = 239;
  test.test_number =449;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HBdhUK2NoWbAGTqrRVufcBFjm8x2c3kHmBbv8T9KAjrp",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 4565760UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "86u9Jiwqie46UhrwV3WqyH1Wwi2uVHKJN5C5BcWSQLMd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {1, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 128, 222, 138, 117, 116, 236, 67, 127, 104, 17, 206, 181, 135, 236, 41, 204, 201, 78, 80, 159, 25, 21, 252, 115, 127, 249, 78, 127, 203, 210, 46, 202, 84, 39, 70, 239, 114, 49, 193, 223, 222, 39, 166, 165, 247, 51, 195, 248, 213, 196, 118, 207, 59, 240, 212, 134, 203, 148, 160, 214, 71, 107, 31, 161, 1, 0, 1, 3, 240, 116, 75, 16, 75, 193, 220, 148, 110, 6, 107, 84, 96, 117, 50, 127, 168, 42, 188, 195, 105, 48, 197, 112, 194, 194, 32, 197, 26, 80, 19, 185, 105, 132, 171, 200, 218, 20, 75, 210, 211, 157, 199, 93, 216, 140, 221, 198, 237, 22, 181, 192, 89, 79, 50, 198, 14, 171, 79, 132, 161, 247, 63, 96, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
