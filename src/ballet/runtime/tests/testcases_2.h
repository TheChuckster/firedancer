int test_25(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 20;
  test.test_number =25;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {3, 55, 140, 241, 37, 253, 222, 161, 116, 79, 241, 242, 62, 139, 69, 172, 203, 214, 195, 180, 140, 240, 179, 122, 121, 47, 55, 38, 67, 49, 229, 227, 1, 79, 139, 229, 71, 102, 87, 154, 37, 123, 183, 89, 54, 182, 194, 124, 222, 181, 79, 69, 84, 153, 23, 224, 183, 2, 116, 248, 68, 195, 36, 27, 192, 79, 89, 146, 214, 141, 231, 56, 162, 34, 170, 181, 194, 182, 182, 201, 8, 157, 156, 76, 41, 225, 138, 221, 253, 201, 43, 6, 35, 221, 131, 135, 135, 22, 63, 119, 117, 188, 25, 204, 120, 62, 166, 83, 229, 133, 228, 51, 146, 196, 157, 48, 65, 186, 52, 140, 34, 149, 38, 193, 41, 161, 82, 221, 181, 36, 243, 211, 68, 139, 157, 245, 228, 21, 151, 230, 2, 159, 147, 239, 2, 111, 57, 119, 145, 180, 237, 221, 182, 133, 100, 122, 204, 26, 113, 74, 228, 199, 132, 125, 249, 20, 134, 11, 37, 237, 7, 131, 3, 99, 82, 161, 110, 144, 160, 83, 250, 121, 205, 156, 174, 131, 193, 246, 8, 24, 150, 56, 235, 3, 2, 1, 4, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 1, 2, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 472;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_26(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 28;
  test.test_number =26;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111BTngbpkVTh3nGGdFdufHcG5TN7hXV6AfDy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CfoVZ9eMbESQia3WiAfF4dtpFdUMcnvAB1",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 165, 232, 57, 166, 85, 89, 170, 60, 12, 171, 16, 251, 82, 98, 19, 93, 206, 101, 87, 239, 133, 90, 76, 175, 212, 58, 87, 96, 85, 74, 176, 131, 160, 240, 0, 33, 9, 89, 119, 9, 130, 77, 109, 241, 9, 247, 19, 160, 46, 21, 23, 127, 6, 121, 69, 73, 87, 143, 165, 11, 66, 78, 228, 215, 254, 181, 191, 175, 249, 70, 242, 57, 204, 76, 127, 149, 55, 54, 222, 147, 222, 230, 227, 220, 174, 44, 201, 171, 180, 118, 142, 87, 127, 73, 17, 200, 76, 8, 220, 121, 206, 35, 103, 254, 163, 134, 255, 249, 90, 97, 201, 105, 236, 50, 253, 17, 36, 71, 192, 252, 47, 203, 230, 213, 253, 69, 242, 107, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_27(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates";
  test.test_nonce = 31;
  test.test_number =27;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANFPuKmeR9jDeAFURRBpGdaXYgPhduuyFXiAvPpuem1p",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 26, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111B4T5ciTCkWauSqVAcVKy88ofjcSamrapud",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111CGTta3M4t3yXu8uRgkKvaWd2d8DQuZLKrf",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111111Bs8Haw3nAsWf5hmLfKzc6PMEzcxUCKkVYK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111D596YFweJQuHY1BbjazZYmAbt8jJL2VzVM",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 63, 244, 186, 102, 56, 165, 235, 209, 225, 8, 186, 239, 219, 234, 73, 84, 225, 210, 255, 137, 189, 246, 166, 122, 144, 57, 75, 13, 238, 248, 229, 36, 58, 172, 181, 42, 66, 159, 182, 233, 26, 15, 79, 40, 33, 233, 197, 174, 97, 211, 163, 67, 64, 255, 85, 3, 24, 255, 132, 253, 34, 205, 249, 7, 78, 235, 52, 236, 62, 22, 16, 77, 111, 140, 27, 194, 98, 205, 230, 79, 119, 0, 10, 198, 160, 91, 29, 94, 217, 171, 191, 71, 102, 67, 129, 81, 112, 125, 249, 57, 70, 125, 152, 117, 254, 24, 249, 69, 78, 111, 71, 136, 18, 189, 219, 186, 120, 129, 187, 246, 189, 20, 40, 86, 52, 168, 114, 170, 2, 2, 1, 4, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 42, 167, 216, 219, 156, 199, 17, 214, 201, 37, 179, 25, 152, 218, 150, 6, 233, 0, 19, 43, 43, 74, 69, 235, 190, 222, 100, 233, 116, 154, 199, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 24, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 25, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 27, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 408;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_28(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[1] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[2] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[3] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[4] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[5] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[6] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[7] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[8] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[9] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[10] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[11] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[13] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[14] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[17] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[18] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[21] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[22] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[25] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[26] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[27] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[28] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[29] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[30] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[34] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[35] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[36] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[39] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[42] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[44] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[45] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 5;
  test.test_number =28;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3gZAPkMkWKh6Vt7ky9kofk8r1bqNJBUPo2EjFJBXs7uF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 52, 140, 164, 91, 9, 126, 158, 167, 149, 82, 228, 241, 67, 18, 105, 56, 208, 195, 82, 71, 66, 53, 206, 10, 143, 31, 169, 1, 175, 57, 10, 25, 28, 188, 222, 184, 149, 131, 229, 146, 238, 88, 161, 109, 70, 45, 236, 142, 135, 50, 99, 103, 28, 125, 84, 10, 177, 153, 30, 234, 39, 103, 197, 11, 1, 0, 1, 2, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_29(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 1;
  test.test_number =29;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 57, 38, 240, 72, 31, 252, 132, 87, 18, 248, 139, 19, 23, 221, 236, 166, 81, 49, 198, 217, 249, 185, 137, 25, 223, 176, 118, 100, 207, 66, 180, 165, 220, 151, 213, 169, 29, 5, 35, 182, 67, 53, 132, 175, 163, 65, 221, 250, 28, 127, 176, 109, 177, 218, 25, 168, 143, 88, 240, 119, 137, 38, 80, 15, 1, 0, 1, 2, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_30(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 29;
  test.test_number =30;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 157, 123, 135, 210, 2, 195, 130, 86, 130, 6, 63, 219, 137, 232, 92, 172, 100, 51, 135, 218, 42, 164, 90, 224, 33, 225, 214, 171, 169, 12, 180, 199, 87, 61, 181, 243, 161, 190, 110, 121, 17, 40, 217, 143, 182, 73, 69, 98, 175, 188, 5, 45, 51, 94, 65, 105, 15, 237, 108, 128, 127, 203, 181, 27, 1, 0, 1, 2, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 75, 2, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 245;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_31(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[3] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[4] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[5] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[6] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[7] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[8] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[11] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[12] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[13] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[14] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[15] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[16] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[17] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[18] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[23] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[24] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[25] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[26] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[27] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[30] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[31] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[34] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[35] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[36] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[39] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[42] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[43] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[44] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[45] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(keep_merkle_shreds);
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 29;
  test.test_number =31;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3gZAPkMkWKh6Vt7ky9kofk8r1bqNJBUPo2EjFJBXs7uF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 67, 5, 176, 15, 27, 172, 236, 1, 219, 114, 122, 37, 139, 64, 60, 143, 143, 21, 140, 155, 243, 76, 214, 188, 252, 147, 196, 217, 106, 227, 106, 73, 178, 33, 23, 182, 21, 157, 169, 142, 0, 136, 245, 176, 21, 139, 77, 56, 215, 55, 248, 230, 45, 174, 56, 80, 42, 31, 226, 253, 184, 54, 122, 216, 1, 0, 1, 2, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 75, 2, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 245;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_32(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 14;
  test.test_number =32;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 232, 216, 57, 230, 163, 106, 214, 37, 102, 137, 201, 130, 124, 192, 75, 182, 86, 117, 29, 223, 169, 97, 74, 182, 201, 82, 190, 226, 30, 228, 59, 209, 36, 21, 120, 138, 73, 80, 94, 196, 46, 171, 13, 105, 178, 94, 21, 190, 91, 21, 112, 25, 20, 105, 39, 253, 246, 104, 194, 96, 169, 183, 84, 17, 49, 124, 122, 54, 244, 137, 250, 185, 128, 223, 248, 56, 8, 112, 193, 83, 223, 178, 23, 53, 74, 12, 70, 15, 133, 213, 54, 30, 37, 52, 135, 230, 66, 68, 96, 228, 202, 128, 136, 100, 213, 193, 68, 154, 47, 183, 18, 246, 106, 252, 136, 148, 180, 95, 153, 52, 155, 183, 69, 84, 3, 177, 197, 63, 2, 1, 1, 3, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_33(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 25;
  test.test_number =33;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EWzLFny6gV3NsxV4E8ekXLMbCdop7zaYRJuxbaQZZnFU",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "11111117353mdUKehx9GW6JNHznGt5oSZs9fWkVkB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111117SQekjmcMtR25wEPPiL6m1Mb5586NkLL4X",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 65, 78, 34, 196, 108, 239, 219, 129, 189, 9, 200, 153, 2, 76, 115, 87, 182, 36, 241, 72, 88, 129, 66, 31, 176, 119, 53, 123, 251, 4, 54, 221, 23, 55, 91, 46, 60, 159, 138, 59, 0, 136, 253, 227, 196, 143, 110, 227, 137, 239, 94, 226, 86, 208, 125, 0, 143, 46, 169, 34, 255, 149, 74, 186, 75, 226, 217, 14, 74, 163, 98, 38, 56, 67, 164, 227, 25, 153, 85, 135, 56, 9, 232, 206, 219, 134, 70, 182, 24, 92, 198, 114, 224, 175, 30, 188, 137, 132, 163, 171, 138, 19, 160, 32, 199, 94, 55, 167, 24, 71, 102, 139, 93, 234, 47, 33, 45, 8, 174, 41, 62, 126, 152, 236, 176, 162, 148, 106, 2, 1, 1, 3, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 200, 214, 153, 87, 40, 143, 231, 62, 142, 178, 252, 177, 236, 95, 197, 134, 172, 190, 214, 194, 143, 41, 2, 189, 251, 102, 245, 235, 195, 96, 113, 59, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_34(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[1] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[2] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[3] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[4] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[5] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[8] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[9] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[12] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[13] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[14] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[15] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[16] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[17] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[18] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[19] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[20] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[21] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[22] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[23] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[24] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[25] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[26] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[27] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[28] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[29] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[30] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[33] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[34] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[35] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[36] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[41] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[42] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[45] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[46] = fd_feature_offset(check_slice_translation_size);
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 18;
  test.test_number =34;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3gZAPkMkWKh6Vt7ky9kofk8r1bqNJBUPo2EjFJBXs7uF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111DUUhXNEw1bNAMSKgm1Kt2tSPWdzF3G5poh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111DspJWUYDimq3AsTmnRfCX1iB99FBkVff83",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 170, 156, 180, 235, 230, 181, 45, 6, 201, 101, 81, 67, 232, 220, 192, 113, 218, 152, 109, 176, 53, 13, 103, 108, 54, 17, 235, 219, 227, 204, 126, 32, 193, 210, 89, 10, 248, 163, 158, 27, 26, 11, 178, 158, 173, 126, 173, 25, 109, 205, 209, 117, 158, 129, 240, 217, 196, 16, 62, 224, 62, 38, 61, 166, 53, 167, 154, 39, 233, 205, 254, 208, 52, 105, 91, 248, 238, 200, 63, 252, 0, 33, 64, 114, 7, 138, 185, 124, 210, 37, 85, 102, 177, 73, 54, 228, 139, 228, 151, 88, 191, 160, 204, 52, 219, 172, 5, 155, 196, 128, 58, 117, 224, 197, 213, 90, 94, 43, 193, 19, 35, 104, 29, 134, 66, 69, 127, 39, 2, 1, 1, 3, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_35(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[1] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[2] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[3] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[4] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[7] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[8] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[9] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[10] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[13] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[17] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[18] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[19] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[20] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[23] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[24] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[25] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[26] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[27] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[28] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[29] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[30] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[31] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[32] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[33] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[34] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[37] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[40] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[41] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[42] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[43] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[44] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[45] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "config_processor::tests::test_config_updates_requiring_config";
  test.test_nonce = 26;
  test.test_number =35;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3gZAPkMkWKh6Vt7ky9kofk8r1bqNJBUPo2EjFJBXs7uF",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 108;
static const uchar test_acc_0_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 108;
static const uchar test_acc_0_result_data[] = {3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 84, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111111DUUhXNEw1bNAMSKgm1Kt2tSPWdzF3G5poh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111111DspJWUYDimq3AsTmnRfCX1iB99FBkVff83",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 167, 187, 148, 237, 227, 142, 197, 102, 163, 58, 109, 194, 121, 38, 243, 149, 186, 87, 146, 54, 170, 143, 163, 91, 230, 150, 200, 23, 79, 106, 66, 238, 185, 56, 107, 241, 69, 234, 252, 120, 66, 12, 30, 111, 53, 89, 144, 66, 69, 1, 41, 125, 180, 239, 69, 205, 226, 178, 67, 145, 141, 123, 35, 57, 106, 190, 21, 49, 89, 247, 118, 41, 152, 157, 67, 153, 178, 121, 140, 178, 167, 178, 134, 204, 36, 199, 151, 66, 66, 174, 164, 239, 180, 254, 196, 34, 17, 49, 116, 112, 149, 159, 159, 190, 135, 103, 29, 114, 195, 207, 234, 56, 255, 118, 169, 164, 96, 46, 209, 45, 11, 216, 216, 232, 6, 70, 159, 73, 2, 1, 1, 3, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 108, 3, 0, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 31, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 39, 217, 100, 26, 2, 90, 206, 205, 187, 168, 104, 0, 255, 146, 229, 207, 202, 34, 27, 6, 22, 117, 172, 247, 181, 240, 205, 69, 2, 70, 35, 222, 1, 84, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 375;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_36(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[3] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[4] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[5] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[8] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[9] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[10] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[12] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[15] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[16] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[17] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[20] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[21] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[22] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[23] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[27] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[28] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[29] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[32] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[33] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[34] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[35] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[36] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[37] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[38] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[40] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[41] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[42] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[43] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[44] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "config_processor::tests::test_process_create_ok";
  test.test_nonce = 8;
  test.test_number =36;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EzsMQf34mTyUjp3SYxvai9fgxVMPMZZv6KKkGcdBW2K5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 31, 41, 211, 118, 14, 147, 17, 224, 115, 94, 138, 84, 94, 223, 145, 195, 49, 164, 228, 59, 156, 214, 136, 123, 87, 172, 193, 72, 42, 180, 103, 139, 112, 250, 78, 108, 85, 48, 25, 112, 189, 223, 44, 81, 67, 160, 161, 185, 31, 115, 108, 213, 72, 187, 221, 63, 180, 146, 187, 49, 78, 193, 208, 150, 1, 0, 1, 2, 207, 250, 248, 28, 197, 240, 212, 228, 6, 42, 143, 21, 107, 74, 26, 59, 223, 112, 11, 76, 65, 241, 22, 56, 120, 50, 235, 145, 137, 219, 44, 36, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_37(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_create_ok";
  test.test_nonce = 12;
  test.test_number =37;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "EdcCWPzZbtWxXeN9Zks833Jz2BF5afzTsydCDKLPuSyr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 255, 132, 138, 111, 221, 1, 125, 239, 31, 237, 215, 112, 105, 243, 235, 177, 54, 243, 218, 65, 178, 241, 116, 174, 4, 103, 76, 229, 34, 212, 165, 216, 100, 129, 7, 25, 31, 57, 180, 154, 179, 85, 134, 69, 200, 190, 30, 243, 180, 79, 197, 180, 92, 122, 52, 176, 161, 93, 55, 31, 4, 12, 153, 77, 1, 0, 1, 2, 202, 136, 163, 91, 211, 208, 249, 248, 255, 28, 28, 201, 37, 102, 55, 26, 97, 94, 204, 176, 221, 215, 101, 87, 20, 12, 154, 168, 30, 18, 177, 69, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_38(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[1] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[3] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[4] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[5] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[7] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[8] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[9] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[10] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[11] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[12] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[13] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[14] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[15] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[16] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[17] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[18] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[19] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[20] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[21] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[22] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[23] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[26] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[29] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[30] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[31] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[32] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[35] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[36] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[37] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[38] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[41] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[42] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[43] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 1;
  test.test_number =38;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9wifH4yYeHhAy8hKstRYpjupY2QJASAYtjC7E9g8K3cx",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 21, 150, 42, 195, 84, 192, 103, 92, 215, 169, 26, 143, 57, 222, 236, 197, 180, 28, 136, 90, 198, 221, 19, 114, 220, 47, 188, 99, 44, 128, 15, 187, 198, 10, 113, 178, 130, 241, 155, 159, 1, 20, 201, 134, 249, 4, 121, 126, 14, 59, 130, 17, 165, 197, 38, 234, 95, 10, 106, 18, 48, 204, 142, 65, 1, 0, 1, 2, 132, 225, 246, 210, 227, 152, 222, 97, 164, 1, 94, 122, 67, 106, 236, 254, 143, 32, 155, 136, 165, 77, 210, 243, 199, 246, 71, 74, 37, 3, 174, 141, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_39(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 6;
  test.test_number =39;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2XXbzQjV4nQ3QbGZ8a7339CTa6EQoGyfHoxEia4dpva2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 251, 250, 134, 113, 226, 243, 120, 155, 66, 29, 237, 64, 3, 88, 237, 225, 137, 94, 67, 124, 96, 133, 55, 95, 163, 95, 157, 10, 149, 33, 196, 162, 255, 87, 169, 135, 59, 8, 122, 207, 55, 75, 96, 83, 234, 115, 231, 81, 203, 56, 191, 215, 214, 37, 82, 154, 223, 193, 16, 71, 134, 13, 146, 211, 1, 0, 1, 2, 22, 173, 182, 228, 214, 179, 238, 41, 125, 15, 129, 235, 241, 10, 116, 231, 31, 29, 158, 219, 237, 164, 238, 9, 117, 114, 149, 163, 198, 42, 92, 39, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_40(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[2] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[3] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[4] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[5] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[6] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[9] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[10] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[11] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[12] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[17] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[18] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[19] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[22] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[23] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[24] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[25] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[28] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[29] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[31] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[34] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[35] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[36] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[39] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[42] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[43] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[46] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 14;
  test.test_number =40;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9wifH4yYeHhAy8hKstRYpjupY2QJASAYtjC7E9g8K3cx",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 132, 225, 246, 210, 227, 152, 222, 97, 164, 1, 94, 122, 67, 106, 236, 254, 143, 32, 155, 136, 165, 77, 210, 243, 199, 246, 71, 74, 37, 3, 174, 141, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 115;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_41(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_account0_not_signer";
  test.test_nonce = 15;
  test.test_number =41;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "2XXbzQjV4nQ3QbGZ8a7339CTa6EQoGyfHoxEia4dpva2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 22, 173, 182, 228, 214, 179, 238, 41, 125, 15, 129, 235, 241, 10, 116, 231, 31, 29, 158, 219, 237, 164, 238, 9, 117, 114, 149, 163, 198, 42, 92, 39, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 115;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_42(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[1] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[2] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[3] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[4] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[5] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[6] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[7] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[8] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[11] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[14] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[15] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[16] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[17] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[21] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[24] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[25] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[26] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[29] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[30] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[31] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[32] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[33] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[34] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[35] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[36] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[37] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[38] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[39] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[40] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[45] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[46] = fd_feature_offset(disable_fees_sysvar);
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 17;
  test.test_number =42;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3DA91Bxf9gy6ZxaiFxUTfvGh54vkrmFPpSCgebHMkDYa",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 196, 37, 243, 111, 221, 196, 167, 227, 4, 24, 65, 50, 55, 192, 35, 223, 13, 24, 36, 249, 148, 91, 13, 255, 205, 172, 37, 234, 38, 190, 53, 205, 198, 104, 219, 105, 47, 110, 252, 45, 56, 255, 130, 239, 179, 54, 176, 124, 61, 144, 99, 115, 149, 0, 173, 77, 17, 218, 184, 2, 191, 51, 131, 21, 1, 0, 1, 2, 32, 212, 173, 8, 224, 28, 201, 228, 247, 30, 199, 187, 141, 98, 184, 82, 249, 91, 11, 3, 41, 248, 139, 78, 161, 223, 89, 41, 235, 39, 2, 207, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 293;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_43(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 19;
  test.test_number =43;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DXSpM226mZ9XzjjHnFrmMUSe7xj5CbvSsdXYZVgkccrg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 98, 249, 131, 117, 25, 233, 249, 144, 158, 13, 194, 216, 219, 25, 72, 189, 147, 44, 243, 24, 68, 63, 167, 251, 132, 246, 137, 15, 204, 170, 149, 234, 95, 112, 146, 1, 36, 44, 60, 186, 123, 5, 87, 17, 197, 107, 40, 71, 172, 144, 174, 85, 148, 135, 55, 226, 196, 176, 198, 151, 168, 212, 141, 56, 1, 0, 1, 2, 186, 24, 219, 163, 180, 151, 102, 225, 131, 3, 93, 200, 122, 147, 232, 189, 192, 17, 9, 109, 52, 24, 129, 156, 45, 144, 195, 15, 203, 29, 33, 181, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 123, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 293;
  test.expected_result = -3;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_44(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[1] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[2] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[3] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[4] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[5] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[6] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[7] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[10] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[11] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[15] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[16] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[17] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[18] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[19] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[20] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[21] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[23] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[24] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[25] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[26] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[27] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[28] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[29] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[31] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[32] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[33] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[34] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[35] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[38] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[39] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[42] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[43] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[46] = fd_feature_offset(curve25519_syscall_enabled);
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 4;
  test.test_number =44;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "3DA91Bxf9gy6ZxaiFxUTfvGh54vkrmFPpSCgebHMkDYa",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 43, 86, 73, 125, 30, 195, 155, 108, 151, 161, 19, 86, 19, 111, 37, 222, 100, 54, 36, 58, 120, 7, 151, 30, 187, 227, 222, 211, 25, 182, 232, 170, 88, 233, 94, 42, 14, 186, 97, 17, 198, 217, 114, 43, 37, 108, 162, 251, 165, 178, 129, 247, 138, 42, 159, 53, 16, 11, 180, 247, 124, 244, 21, 161, 1, 0, 1, 2, 32, 212, 173, 8, 224, 28, 201, 228, 247, 30, 199, 187, 141, 98, 184, 82, 249, 91, 11, 3, 41, 248, 139, 78, 161, 223, 89, 41, 235, 39, 2, 207, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_45(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_fail_instruction_data_too_large";
  test.test_nonce = 7;
  test.test_number =45;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DXSpM226mZ9XzjjHnFrmMUSe7xj5CbvSsdXYZVgkccrg",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 59, 126, 76, 153, 14, 153, 154, 10, 4, 32, 147, 136, 210, 101, 235, 224, 80, 108, 163, 34, 12, 182, 9, 3, 63, 130, 211, 107, 208, 167, 150, 46, 241, 67, 248, 54, 5, 238, 73, 216, 66, 189, 176, 28, 80, 146, 156, 153, 152, 164, 225, 157, 68, 226, 186, 125, 172, 54, 252, 1, 56, 219, 102, 249, 1, 0, 1, 2, 186, 24, 219, 163, 180, 151, 102, 225, 131, 3, 93, 200, 122, 147, 232, 189, 192, 17, 9, 109, 52, 24, 129, 156, 45, 144, 195, 15, 203, 29, 33, 181, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_46(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[1] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[2] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[3] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[4] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[5] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[6] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[7] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[8] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[9] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[10] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[11] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[12] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[13] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[14] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[15] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[18] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[19] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[20] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[25] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[26] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[27] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[28] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[29] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[30] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[31] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[32] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[33] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[36] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[39] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[40] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[41] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[42] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[43] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[44] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[45] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 11;
  test.test_number =46;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6FuNEtMrtDmCAaPcZ8vxFZGSARh2yTpptLFNM54EPwuM",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 215, 47, 227, 124, 150, 229, 241, 91, 104, 124, 182, 182, 139, 182, 224, 137, 223, 182, 132, 43, 85, 151, 54, 172, 188, 113, 199, 243, 128, 2, 106, 131, 209, 42, 151, 40, 57, 39, 177, 22, 124, 30, 0, 120, 69, 214, 235, 85, 194, 119, 2, 92, 170, 241, 93, 109, 184, 45, 62, 74, 232, 18, 165, 80, 1, 0, 1, 2, 78, 27, 198, 207, 168, 179, 181, 135, 201, 34, 34, 22, 68, 144, 15, 218, 16, 31, 161, 32, 148, 109, 86, 211, 123, 241, 4, 66, 80, 124, 123, 148, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_47(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 10;
  test.test_number =47;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9q5WBv6AEvPHABxvrUHCYB94C9aFEmDMsbokE7ZeNkee",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 76, 240, 71, 40, 165, 255, 156, 156, 199, 17, 206, 206, 75, 210, 17, 54, 90, 117, 103, 254, 143, 70, 6, 205, 47, 141, 1, 226, 225, 52, 239, 238, 17, 254, 158, 73, 176, 229, 31, 184, 69, 35, 190, 146, 95, 191, 28, 31, 221, 202, 60, 70, 153, 235, 77, 26, 137, 77, 59, 89, 40, 239, 97, 80, 1, 0, 1, 2, 131, 46, 119, 81, 29, 207, 93, 70, 8, 147, 99, 86, 245, 159, 99, 26, 250, 51, 173, 95, 69, 245, 180, 178, 45, 204, 122, 57, 136, 254, 215, 43, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 21, 205, 91, 7, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_48(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[1] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[2] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[3] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[4] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[5] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[8] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[9] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[11] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[12] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[13] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[14] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[15] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[16] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[17] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[18] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[19] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[22] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[23] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[24] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[25] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[26] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[27] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[28] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[29] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[31] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[32] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[33] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[34] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[35] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[36] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[37] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[38] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[39] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[42] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[43] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[44] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[45] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[46] = fd_feature_offset(zk_token_sdk_enabled);
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 22;
  test.test_number =48;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "6FuNEtMrtDmCAaPcZ8vxFZGSARh2yTpptLFNM54EPwuM",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 119, 172, 60, 161, 136, 118, 86, 179, 224, 145, 1, 100, 66, 86, 181, 206, 146, 15, 219, 111, 92, 22, 33, 44, 206, 146, 225, 93, 129, 209, 200, 109, 217, 105, 155, 9, 80, 153, 213, 56, 96, 239, 54, 4, 7, 59, 142, 92, 83, 250, 246, 65, 202, 34, 29, 119, 75, 101, 111, 243, 26, 245, 220, 248, 1, 0, 1, 2, 78, 27, 198, 207, 168, 179, 181, 135, 201, 34, 34, 22, 68, 144, 15, 218, 16, 31, 161, 32, 148, 109, 86, 211, 123, 241, 4, 66, 80, 124, 123, 148, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_49(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "config_processor::tests::test_process_store_ok";
  test.test_nonce = 22;
  test.test_number =49;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9q5WBv6AEvPHABxvrUHCYB94C9aFEmDMsbokE7ZeNkee",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 9;
static const uchar test_acc_0_data[] = {0, 21, 205, 91, 7, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 9;
static const uchar test_acc_0_result_data[] = {0, 42, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "Config1111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 224, 14, 207, 168, 152, 173, 79, 36, 129, 99, 244, 183, 144, 86, 194, 106, 83, 206, 138, 120, 197, 12, 209, 179, 65, 190, 168, 72, 118, 89, 64, 51, 225, 53, 152, 21, 158, 243, 29, 215, 30, 71, 25, 233, 111, 124, 88, 155, 55, 87, 91, 65, 175, 110, 246, 61, 122, 51, 125, 109, 13, 202, 250, 110, 1, 0, 1, 2, 131, 46, 119, 81, 29, 207, 93, 70, 8, 147, 99, 86, 245, 159, 99, 26, 250, 51, 173, 95, 69, 245, 180, 178, 45, 204, 122, 57, 136, 254, 215, 43, 3, 6, 74, 163, 0, 47, 116, 220, 200, 110, 67, 49, 15, 12, 5, 42, 248, 197, 218, 39, 246, 16, 64, 25, 163, 35, 239, 160, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 9, 0, 42, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 179;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
