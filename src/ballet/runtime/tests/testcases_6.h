int test_125(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_override::new_behavior";
  test.test_nonce = 58;
  test.test_number =125;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9KE9CYxji5WJJt6jiMfeV41zntEbNv7FZCsKB1TyZ56P",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 153, 185, 236, 125, 173, 250, 11, 228, 156, 12, 79, 156, 88, 171, 102, 194, 92, 133, 223, 178, 50, 178, 33, 199, 125, 155, 83, 145, 73, 250, 36, 145, 234, 251, 36, 2, 104, 72, 157, 183, 10, 205, 157, 25, 154, 86, 118, 92, 142, 24, 250, 104, 12, 187, 217, 222, 169, 120, 252, 247, 16, 37, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 107, 153, 185, 236, 125, 173, 250, 11, 228, 156, 12, 79, 156, 88, 171, 102, 194, 92, 133, 223, 178, 50, 178, 33, 199, 125, 155, 83, 145, 73, 250, 36, 145, 234, 251, 36, 2, 104, 72, 157, 183, 10, 205, 157, 25, 154, 86, 118, 92, 142, 24, 250, 104, 12, 187, 217, 222, 169, 120, 252, 247, 16, 37, 246, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "ApbwCvbaVcpdM9Q1x3DKFstmuisYTgWmdqV3E21buzJR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 151, 11, 228, 36, 159, 226, 93, 40, 132, 99, 195, 97, 241, 29, 229, 28, 244, 127, 223, 217, 67, 129, 21, 36, 159, 184, 222, 202, 22, 167, 28, 87, 54, 168, 129, 167, 228, 219, 235, 79, 38, 2, 77, 151, 90, 122, 255, 46, 154, 58, 196, 102, 86, 173, 159, 88, 14, 59, 130, 134, 50, 110, 7, 172, 1, 1, 2, 4, 107, 153, 185, 236, 125, 173, 250, 11, 228, 156, 12, 79, 156, 88, 171, 102, 194, 92, 133, 223, 178, 50, 178, 33, 199, 125, 155, 83, 145, 73, 250, 36, 123, 136, 207, 24, 45, 135, 61, 146, 125, 61, 158, 76, 91, 140, 113, 85, 220, 108, 245, 143, 14, 96, 244, 205, 239, 255, 20, 185, 210, 184, 3, 136, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 145, 234, 251, 36, 2, 104, 72, 157, 183, 10, 205, 157, 25, 154, 86, 118, 92, 142, 24, 250, 104, 12, 187, 217, 222, 169, 120, 252, 247, 16, 37, 246, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_126(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 36;
  test.test_number =126;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7k6qLekdxcNDgkSbpAp1Vyyk9e2WLsHPJydumjVDddzQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "6i2SHbENrUxQ9jEZoMGakJ4Jhh44DbD7jJVbjFCzeYiq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 133, 246, 165, 112, 187, 181, 192, 207, 136, 108, 121, 52, 8, 221, 98, 46, 228, 162, 185, 56, 85, 232, 63, 88, 184, 133, 225, 117, 72, 69, 5, 111, 50, 34, 183, 81, 135, 42, 86, 154, 238, 38, 195, 208, 209, 53, 67, 74, 189, 177, 104, 24, 207, 86, 205, 83, 33, 231, 232, 143, 242, 79, 55, 255, 1, 1, 2, 4, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_127(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 4;
  test.test_number =127;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7k6qLekdxcNDgkSbpAp1Vyyk9e2WLsHPJydumjVDddzQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "6i2SHbENrUxQ9jEZoMGakJ4Jhh44DbD7jJVbjFCzeYiq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 124, 225, 147, 219, 170, 150, 150, 187, 30, 84, 121, 36, 191, 104, 133, 168, 250, 16, 94, 0, 3, 85, 86, 153, 240, 252, 109, 184, 254, 15, 139, 239, 202, 37, 235, 251, 43, 242, 213, 65, 204, 201, 102, 226, 53, 33, 76, 127, 49, 255, 140, 39, 44, 164, 6, 86, 135, 142, 123, 153, 10, 91, 249, 173, 1, 0, 3, 4, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 3, 40, 1, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_128(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 48;
  test.test_number =128;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7k6qLekdxcNDgkSbpAp1Vyyk9e2WLsHPJydumjVDddzQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "6i2SHbENrUxQ9jEZoMGakJ4Jhh44DbD7jJVbjFCzeYiq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 180, 167, 239, 44, 236, 55, 26, 137, 167, 198, 182, 9, 17, 135, 240, 221, 131, 110, 177, 99, 121, 8, 110, 218, 24, 222, 95, 35, 44, 61, 49, 200, 230, 233, 176, 45, 67, 80, 192, 41, 14, 54, 212, 124, 37, 199, 123, 32, 12, 107, 35, 79, 183, 55, 158, 44, 251, 86, 37, 126, 222, 60, 24, 226, 1, 0, 3, 4, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 3, 40, 1, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_129(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 66;
  test.test_number =129;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7k6qLekdxcNDgkSbpAp1Vyyk9e2WLsHPJydumjVDddzQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "6i2SHbENrUxQ9jEZoMGakJ4Jhh44DbD7jJVbjFCzeYiq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 143, 219, 133, 6, 251, 219, 221, 73, 167, 97, 72, 6, 250, 103, 97, 128, 185, 169, 46, 158, 110, 32, 82, 72, 95, 179, 68, 122, 46, 232, 7, 170, 9, 180, 120, 215, 253, 61, 141, 74, 210, 162, 103, 131, 11, 47, 79, 42, 60, 211, 231, 241, 36, 98, 111, 189, 91, 206, 51, 9, 217, 106, 72, 113, 1, 1, 2, 4, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_130(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[17] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[26] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 2;
  test.test_number =130;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FMG1tTY6Se84bs2i3wXw4qUtKvenLy8G4UdAvJChnrbB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8hv2gVqbakMqksbysCYUen7YUcpwsyqao1XurR7yJQPW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 50, 166, 139, 157, 174, 28, 49, 211, 112, 2, 89, 178, 92, 171, 56, 133, 50, 120, 73, 149, 184, 116, 62, 221, 211, 206, 255, 244, 167, 114, 129, 68, 89, 56, 35, 136, 17, 205, 250, 178, 228, 26, 217, 141, 144, 72, 197, 237, 72, 218, 231, 152, 237, 153, 174, 81, 34, 216, 198, 213, 190, 231, 152, 98, 1, 0, 3, 4, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 3, 40, 1, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_131(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[17] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[26] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 77;
  test.test_number =131;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FMG1tTY6Se84bs2i3wXw4qUtKvenLy8G4UdAvJChnrbB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8hv2gVqbakMqksbysCYUen7YUcpwsyqao1XurR7yJQPW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 128, 62, 130, 110, 6, 35, 200, 55, 219, 100, 82, 237, 118, 216, 233, 102, 63, 122, 175, 32, 147, 90, 175, 184, 77, 224, 36, 206, 40, 109, 106, 69, 190, 97, 65, 82, 49, 175, 39, 90, 51, 164, 219, 225, 15, 208, 195, 164, 196, 219, 17, 212, 84, 73, 171, 180, 213, 109, 1, 87, 241, 179, 192, 242, 1, 1, 2, 4, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_132(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[17] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[26] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 112;
  test.test_number =132;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FMG1tTY6Se84bs2i3wXw4qUtKvenLy8G4UdAvJChnrbB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8hv2gVqbakMqksbysCYUen7YUcpwsyqao1XurR7yJQPW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 89, 180, 166, 19, 207, 103, 68, 102, 243, 12, 203, 132, 151, 163, 169, 151, 235, 129, 87, 161, 74, 234, 63, 160, 138, 111, 13, 161, 224, 134, 185, 57, 39, 128, 134, 53, 236, 247, 94, 130, 248, 255, 38, 102, 249, 204, 63, 87, 105, 166, 127, 36, 216, 191, 135, 51, 116, 199, 91, 203, 106, 237, 159, 160, 1, 1, 2, 4, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_133(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[17] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[26] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 94;
  test.test_number =133;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FMG1tTY6Se84bs2i3wXw4qUtKvenLy8G4UdAvJChnrbB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8hv2gVqbakMqksbysCYUen7YUcpwsyqao1XurR7yJQPW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 211, 185, 22, 179, 57, 208, 42, 123, 4, 202, 158, 106, 31, 31, 69, 242, 217, 38, 148, 143, 237, 203, 239, 165, 51, 197, 123, 91, 20, 121, 41, 240, 162, 120, 3, 46, 255, 88, 21, 0, 255, 71, 182, 8, 50, 42, 138, 207, 98, 11, 6, 116, 135, 111, 219, 65, 254, 161, 98, 142, 166, 247, 146, 213, 1, 0, 3, 4, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 0, 2, 3, 40, 1, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 1, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_134(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 17;
  test.test_number =134;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "7k6qLekdxcNDgkSbpAp1Vyyk9e2WLsHPJydumjVDddzQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "6i2SHbENrUxQ9jEZoMGakJ4Jhh44DbD7jJVbjFCzeYiq",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 50, 225, 46, 210, 252, 84, 110, 72, 238, 204, 45, 216, 157, 36, 177, 253, 10, 92, 172, 90, 244, 124, 84, 106, 80, 85, 225, 109, 217, 97, 97, 58, 4, 240, 53, 18, 115, 136, 182, 110, 72, 138, 168, 0, 232, 166, 60, 15, 87, 138, 189, 121, 214, 27, 89, 32, 162, 243, 43, 145, 138, 182, 114, 201, 1, 1, 2, 4, 84, 204, 223, 23, 188, 220, 9, 180, 253, 190, 86, 162, 120, 40, 174, 160, 109, 245, 220, 70, 243, 77, 23, 38, 91, 37, 50, 180, 78, 102, 61, 142, 100, 48, 177, 53, 186, 246, 223, 110, 129, 178, 104, 118, 199, 139, 95, 114, 77, 193, 191, 250, 242, 130, 178, 75, 144, 37, 197, 211, 42, 82, 102, 113, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 151, 49, 167, 61, 168, 118, 27, 247, 111, 200, 244, 135, 222, 138, 153, 133, 78, 155, 54, 130, 196, 159, 185, 23, 21, 45, 81, 183, 110, 6, 17, 28, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_135(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[1] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[2] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[5] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[8] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[13] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[14] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[15] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[16] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[17] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[18] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[24] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[25] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[26] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[27] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[30] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[31] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[34] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[35] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[36] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[37] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[39] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[40] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[41] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[46] = fd_feature_offset(blake3_syscall_enabled);
  test.test_name = "stake_instruction::tests::test_authorize_override::old_behavior";
  test.test_nonce = 47;
  test.test_number =135;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FMG1tTY6Se84bs2i3wXw4qUtKvenLy8G4UdAvJChnrbB",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8hv2gVqbakMqksbysCYUen7YUcpwsyqao1XurR7yJQPW",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 191, 62, 72, 160, 126, 112, 98, 83, 134, 217, 205, 62, 170, 164, 39, 104, 52, 173, 133, 221, 158, 136, 129, 19, 21, 184, 237, 44, 101, 33, 147, 71, 14, 225, 67, 244, 24, 163, 146, 68, 137, 68, 69, 100, 242, 191, 228, 41, 81, 3, 83, 28, 171, 0, 76, 250, 33, 241, 128, 123, 100, 7, 55, 210, 1, 1, 2, 4, 114, 125, 0, 59, 149, 52, 156, 51, 151, 249, 155, 14, 173, 38, 53, 29, 87, 113, 163, 87, 62, 56, 160, 87, 204, 201, 119, 85, 112, 63, 101, 189, 213, 52, 54, 4, 30, 89, 150, 1, 196, 224, 222, 185, 59, 138, 10, 235, 247, 102, 228, 243, 145, 237, 30, 214, 150, 92, 22, 182, 183, 125, 24, 202, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 1, 3, 0, 40, 1, 0, 0, 0, 181, 83, 24, 86, 198, 157, 119, 18, 56, 109, 136, 238, 238, 163, 222, 46, 157, 121, 7, 195, 98, 178, 148, 141, 39, 113, 58, 182, 175, 13, 168, 125, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 276;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_136(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 6;
  test.test_number =136;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DaTaGZGNqxDHAhxn2BsGChRi14ZfnjbJoJP8jam6MoBJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "GfuDkBiNrjSxjMQY2H8QXuNLArMEkmSdM2BkJcLJacsu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 62, 173, 34, 60, 125, 198, 197, 239, 33, 78, 27, 214, 107, 93, 206, 14, 17, 1, 177, 117, 189, 233, 134, 160, 73, 66, 16, 110, 81, 117, 110, 228, 52, 8, 0, 208, 57, 45, 165, 233, 63, 135, 209, 202, 109, 208, 132, 153, 1, 191, 120, 46, 159, 179, 118, 61, 170, 144, 225, 176, 58, 130, 18, 29, 152, 238, 111, 182, 112, 134, 193, 133, 117, 44, 221, 245, 112, 72, 187, 225, 227, 50, 204, 200, 30, 244, 219, 235, 4, 157, 173, 76, 104, 181, 83, 148, 192, 210, 244, 243, 144, 187, 159, 120, 20, 21, 245, 245, 180, 150, 130, 75, 146, 132, 108, 0, 203, 121, 124, 13, 240, 70, 3, 94, 100, 39, 61, 70, 2, 1, 2, 4, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 232, 214, 107, 112, 62, 104, 219, 241, 44, 109, 185, 29, 74, 58, 113, 147, 153, 117, 21, 139, 243, 121, 190, 152, 0, 194, 175, 138, 222, 74, 15, 204, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 80, 8, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 380;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_137(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 28;
  test.test_number =137;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DaTaGZGNqxDHAhxn2BsGChRi14ZfnjbJoJP8jam6MoBJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "GfuDkBiNrjSxjMQY2H8QXuNLArMEkmSdM2BkJcLJacsu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 99, 201, 39, 84, 128, 235, 145, 50, 82, 254, 97, 249, 143, 112, 151, 201, 7, 53, 226, 67, 62, 162, 71, 193, 177, 88, 182, 59, 8, 200, 199, 85, 138, 118, 59, 38, 51, 136, 60, 46, 158, 242, 47, 213, 56, 210, 162, 20, 103, 193, 55, 112, 89, 25, 159, 243, 110, 142, 192, 123, 14, 205, 248, 3, 129, 189, 174, 30, 103, 49, 14, 138, 239, 22, 242, 29, 139, 5, 242, 101, 109, 165, 108, 210, 222, 123, 130, 67, 242, 125, 206, 95, 130, 49, 89, 239, 81, 92, 121, 180, 46, 238, 73, 145, 248, 176, 122, 21, 108, 255, 46, 163, 142, 251, 216, 140, 222, 25, 163, 138, 57, 162, 183, 236, 26, 18, 230, 129, 2, 1, 2, 4, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_138(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 51;
  test.test_number =138;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DaTaGZGNqxDHAhxn2BsGChRi14ZfnjbJoJP8jam6MoBJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "GfuDkBiNrjSxjMQY2H8QXuNLArMEkmSdM2BkJcLJacsu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 81, 26, 242, 196, 62, 21, 147, 194, 47, 85, 79, 250, 216, 84, 247, 190, 239, 47, 198, 69, 27, 82, 117, 71, 85, 2, 135, 33, 236, 131, 68, 179, 59, 124, 197, 5, 137, 102, 147, 186, 177, 9, 82, 215, 143, 186, 11, 247, 249, 154, 133, 117, 227, 12, 52, 181, 159, 10, 92, 234, 128, 217, 153, 144, 227, 48, 28, 13, 192, 226, 75, 140, 98, 116, 201, 159, 158, 82, 204, 71, 159, 65, 108, 63, 61, 125, 120, 80, 75, 247, 246, 70, 77, 175, 153, 29, 165, 174, 137, 53, 140, 18, 64, 81, 184, 134, 205, 105, 26, 242, 121, 47, 155, 205, 149, 118, 76, 212, 243, 44, 108, 9, 132, 28, 47, 181, 147, 162, 2, 1, 2, 4, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 232, 214, 107, 112, 62, 104, 219, 241, 44, 109, 185, 29, 74, 58, 113, 147, 153, 117, 21, 139, 243, 121, 190, 152, 0, 194, 175, 138, 222, 74, 15, 204, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_139(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 74;
  test.test_number =139;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DaTaGZGNqxDHAhxn2BsGChRi14ZfnjbJoJP8jam6MoBJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "GfuDkBiNrjSxjMQY2H8QXuNLArMEkmSdM2BkJcLJacsu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 109, 156, 100, 164, 170, 163, 204, 159, 242, 191, 7, 110, 154, 19, 48, 12, 104, 221, 7, 160, 223, 185, 91, 99, 199, 218, 7, 130, 222, 53, 12, 166, 227, 3, 21, 99, 160, 138, 21, 11, 248, 245, 209, 47, 234, 255, 14, 92, 172, 208, 125, 54, 210, 151, 176, 254, 2, 93, 17, 222, 175, 153, 24, 237, 82, 184, 238, 224, 171, 172, 254, 162, 0, 182, 85, 213, 75, 67, 17, 210, 107, 177, 152, 151, 141, 92, 0, 187, 183, 47, 238, 128, 115, 84, 255, 117, 22, 41, 119, 200, 20, 87, 65, 106, 113, 36, 6, 247, 243, 52, 172, 228, 111, 66, 181, 57, 8, 113, 93, 222, 180, 222, 245, 247, 52, 45, 201, 153, 2, 1, 2, 4, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 232, 214, 107, 112, 62, 104, 219, 241, 44, 109, 185, 29, 74, 58, 113, 147, 153, 117, 21, 139, 243, 121, 190, 152, 0, 194, 175, 138, 222, 74, 15, 204, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_140(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 88;
  test.test_number =140;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "DaTaGZGNqxDHAhxn2BsGChRi14ZfnjbJoJP8jam6MoBJ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "GfuDkBiNrjSxjMQY2H8QXuNLArMEkmSdM2BkJcLJacsu",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 82, 209, 209, 31, 117, 95, 108, 84, 25, 119, 24, 199, 108, 28, 229, 4, 30, 95, 160, 117, 246, 193, 76, 166, 113, 169, 214, 38, 220, 21, 87, 252, 109, 53, 210, 55, 97, 210, 204, 107, 108, 174, 194, 120, 173, 29, 120, 67, 69, 206, 199, 189, 183, 213, 248, 144, 16, 227, 101, 255, 186, 71, 66, 117, 28, 152, 185, 125, 249, 13, 121, 249, 197, 17, 168, 106, 176, 44, 104, 78, 212, 82, 231, 108, 208, 47, 117, 0, 45, 87, 202, 55, 33, 121, 154, 23, 184, 240, 138, 37, 1, 101, 247, 169, 119, 123, 255, 61, 224, 100, 246, 241, 84, 83, 121, 15, 99, 35, 135, 175, 175, 103, 112, 60, 189, 218, 188, 154, 2, 1, 2, 4, 186, 222, 116, 232, 75, 185, 50, 30, 94, 78, 223, 161, 48, 135, 179, 246, 180, 31, 239, 69, 12, 187, 59, 88, 8, 103, 207, 42, 234, 61, 176, 253, 232, 214, 107, 112, 62, 104, 219, 241, 44, 109, 185, 29, 74, 58, 113, 147, 153, 117, 21, 139, 243, 121, 190, 152, 0, 194, 175, 138, 222, 74, 15, 204, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 100, 204, 138, 85, 213, 123, 164, 178, 241, 119, 152, 192, 46, 95, 123, 117, 236, 228, 64, 146, 226, 163, 113, 30, 236, 37, 214, 75, 98, 133, 21, 55, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_141(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[36] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(stake_redelegate_instruction);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 20;
  test.test_number =141;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANUK2tZFigWvhVX8ujGUftiiyyYgmUaNnN2yaXGmSsjn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DrnGrwnWCQoqSUXKnhsLeuq782VFneKHiBvtjZM7pmxr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 116, 234, 139, 61, 183, 41, 16, 86, 235, 193, 218, 114, 211, 9, 140, 85, 30, 183, 53, 160, 156, 241, 142, 112, 69, 237, 192, 212, 20, 197, 81, 50, 237, 37, 20, 244, 26, 192, 163, 183, 126, 30, 18, 85, 236, 10, 144, 165, 41, 176, 153, 119, 143, 151, 215, 72, 41, 153, 168, 95, 138, 195, 66, 132, 73, 168, 216, 41, 18, 8, 30, 99, 243, 138, 134, 185, 52, 29, 140, 29, 25, 66, 33, 229, 155, 3, 79, 126, 82, 202, 197, 76, 114, 195, 20, 178, 131, 243, 109, 15, 192, 215, 93, 2, 160, 43, 49, 97, 197, 200, 154, 24, 152, 143, 140, 12, 130, 93, 15, 162, 215, 149, 200, 62, 21, 150, 241, 96, 2, 1, 2, 4, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 191, 12, 228, 197, 46, 202, 36, 134, 15, 119, 83, 24, 37, 26, 227, 115, 219, 201, 84, 52, 188, 118, 155, 198, 165, 136, 98, 16, 170, 244, 97, 15, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 80, 8, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 380;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_142(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[36] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(stake_redelegate_instruction);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 49;
  test.test_number =142;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANUK2tZFigWvhVX8ujGUftiiyyYgmUaNnN2yaXGmSsjn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DrnGrwnWCQoqSUXKnhsLeuq782VFneKHiBvtjZM7pmxr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 18, 35, 139, 83, 19, 229, 232, 37, 195, 136, 104, 235, 119, 28, 56, 110, 94, 198, 86, 164, 39, 116, 34, 131, 174, 76, 45, 81, 235, 20, 220, 234, 54, 21, 182, 185, 5, 52, 9, 110, 59, 215, 215, 114, 248, 13, 145, 216, 136, 241, 43, 61, 198, 32, 233, 53, 25, 252, 251, 232, 228, 200, 227, 223, 182, 245, 82, 161, 58, 55, 145, 0, 96, 84, 125, 94, 218, 205, 128, 226, 51, 101, 136, 119, 149, 242, 37, 212, 253, 138, 188, 25, 74, 251, 127, 183, 106, 186, 104, 97, 157, 123, 147, 21, 127, 39, 43, 127, 68, 166, 38, 213, 79, 122, 87, 124, 217, 40, 188, 30, 91, 181, 252, 83, 255, 219, 210, 51, 2, 1, 2, 4, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_143(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[36] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(stake_redelegate_instruction);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 78;
  test.test_number =143;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANUK2tZFigWvhVX8ujGUftiiyyYgmUaNnN2yaXGmSsjn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DrnGrwnWCQoqSUXKnhsLeuq782VFneKHiBvtjZM7pmxr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 15, 49, 211, 137, 216, 204, 228, 209, 247, 93, 240, 198, 226, 44, 27, 219, 70, 2, 37, 236, 50, 128, 101, 216, 196, 149, 42, 64, 195, 233, 148, 209, 84, 68, 108, 187, 247, 163, 238, 132, 195, 102, 149, 167, 233, 38, 52, 3, 103, 235, 68, 238, 133, 180, 18, 148, 99, 100, 65, 169, 41, 88, 182, 228, 135, 146, 105, 218, 184, 133, 185, 184, 219, 136, 236, 67, 155, 116, 123, 139, 118, 87, 166, 100, 196, 203, 213, 113, 46, 232, 10, 85, 64, 101, 188, 253, 0, 38, 206, 59, 75, 10, 107, 165, 253, 56, 160, 168, 160, 187, 1, 70, 227, 83, 201, 213, 117, 57, 150, 122, 207, 38, 36, 122, 49, 252, 102, 96, 2, 1, 2, 4, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 191, 12, 228, 197, 46, 202, 36, 134, 15, 119, 83, 24, 37, 26, 227, 115, 219, 201, 84, 52, 188, 118, 155, 198, 165, 136, 98, 16, 170, 244, 97, 15, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_144(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[36] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(stake_redelegate_instruction);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 105;
  test.test_number =144;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANUK2tZFigWvhVX8ujGUftiiyyYgmUaNnN2yaXGmSsjn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DrnGrwnWCQoqSUXKnhsLeuq782VFneKHiBvtjZM7pmxr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 37, 176, 26, 209, 121, 54, 81, 222, 1, 111, 214, 181, 237, 106, 23, 243, 145, 191, 61, 84, 82, 165, 6, 213, 16, 90, 19, 70, 47, 76, 206, 103, 29, 124, 63, 243, 19, 237, 217, 64, 86, 203, 189, 57, 91, 162, 50, 33, 158, 90, 123, 194, 63, 202, 57, 235, 172, 182, 183, 236, 146, 202, 105, 154, 141, 155, 97, 214, 83, 48, 149, 40, 169, 111, 244, 114, 89, 160, 39, 179, 122, 227, 192, 96, 5, 213, 9, 167, 206, 233, 225, 86, 217, 42, 7, 253, 168, 35, 184, 69, 0, 209, 135, 110, 65, 86, 248, 120, 62, 57, 118, 208, 220, 201, 94, 240, 204, 229, 92, 51, 139, 57, 62, 250, 179, 116, 129, 160, 2, 1, 2, 4, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 191, 12, 228, 197, 46, 202, 36, 134, 15, 119, 83, 24, 37, 26, 227, 115, 219, 201, 84, 52, 188, 118, 155, 198, 165, 136, 98, 16, 170, 244, 97, 15, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_145(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[1] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[2] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[3] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[8] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[9] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[10] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[13] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[14] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[15] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[16] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[17] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[18] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[19] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[21] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[24] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[25] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[28] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[30] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[34] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[35] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[36] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[37] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[38] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[43] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[44] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[45] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[46] = fd_feature_offset(stake_redelegate_instruction);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::new_behavior";
  test.test_nonce = 121;
  test.test_number =145;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ANUK2tZFigWvhVX8ujGUftiiyyYgmUaNnN2yaXGmSsjn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DrnGrwnWCQoqSUXKnhsLeuq782VFneKHiBvtjZM7pmxr",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 63, 63, 224, 84, 28, 22, 54, 188, 5, 102, 4, 59, 20, 134, 250, 113, 193, 210, 237, 19, 160, 232, 87, 114, 134, 21, 128, 205, 218, 231, 237, 252, 240, 4, 6, 168, 25, 116, 151, 81, 213, 101, 50, 61, 183, 145, 88, 163, 201, 185, 30, 93, 14, 99, 29, 84, 151, 195, 227, 67, 33, 177, 221, 126, 229, 0, 219, 193, 186, 96, 75, 226, 175, 4, 165, 4, 193, 240, 154, 252, 7, 246, 15, 116, 103, 245, 85, 106, 82, 130, 219, 166, 179, 116, 128, 171, 147, 106, 205, 223, 224, 122, 72, 135, 254, 155, 181, 233, 46, 233, 107, 176, 236, 248, 110, 117, 81, 26, 144, 214, 10, 166, 249, 161, 116, 255, 199, 144, 2, 1, 2, 4, 139, 57, 66, 134, 181, 79, 190, 128, 82, 206, 117, 159, 4, 238, 9, 136, 15, 159, 220, 192, 217, 170, 74, 13, 71, 162, 160, 23, 148, 245, 63, 193, 191, 12, 228, 197, 46, 202, 36, 134, 15, 119, 83, 24, 37, 26, 227, 115, 219, 201, 84, 52, 188, 118, 155, 198, 165, 136, 98, 16, 170, 244, 97, 15, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 190, 98, 106, 197, 211, 175, 238, 118, 140, 165, 135, 107, 238, 31, 74, 152, 204, 149, 97, 10, 50, 250, 34, 228, 210, 93, 76, 156, 52, 154, 136, 101, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_146(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::old_behavior";
  test.test_nonce = 5;
  test.test_number =146;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JAiEgimVAdz7y1BK7piKHkebTFSQwEguN4HWVbbvDmpR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DtsXRgow2QjurBSSvceN8JKug9fvPfZ1mKHsG649q8Qn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 176, 183, 141, 171, 144, 20, 79, 156, 134, 44, 195, 213, 14, 14, 175, 192, 251, 37, 107, 168, 30, 175, 133, 170, 126, 183, 38, 202, 76, 159, 51, 209, 140, 251, 235, 180, 30, 234, 72, 231, 60, 89, 10, 153, 38, 177, 201, 216, 98, 159, 162, 32, 126, 133, 120, 114, 14, 25, 160, 169, 86, 190, 42, 114, 142, 144, 181, 157, 118, 18, 247, 166, 208, 78, 131, 178, 137, 138, 168, 12, 61, 12, 140, 26, 112, 25, 81, 141, 49, 69, 23, 247, 141, 15, 90, 82, 121, 182, 136, 119, 65, 173, 38, 164, 101, 219, 94, 141, 50, 115, 163, 5, 174, 202, 67, 216, 230, 116, 33, 158, 126, 49, 115, 74, 56, 121, 88, 255, 2, 1, 2, 4, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 191, 149, 254, 33, 209, 165, 47, 104, 164, 51, 74, 42, 83, 95, 136, 2, 132, 110, 177, 59, 173, 248, 5, 69, 151, 213, 30, 244, 204, 60, 8, 255, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 80, 8, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 380;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_147(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::old_behavior";
  test.test_nonce = 27;
  test.test_number =147;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JAiEgimVAdz7y1BK7piKHkebTFSQwEguN4HWVbbvDmpR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DtsXRgow2QjurBSSvceN8JKug9fvPfZ1mKHsG649q8Qn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 27, 215, 178, 230, 183, 200, 20, 188, 199, 92, 66, 125, 48, 34, 148, 147, 107, 143, 54, 192, 165, 55, 167, 175, 162, 47, 18, 185, 53, 107, 178, 54, 198, 140, 68, 238, 198, 46, 215, 53, 239, 40, 112, 226, 215, 53, 41, 111, 65, 56, 238, 206, 144, 138, 53, 107, 115, 136, 86, 99, 15, 246, 168, 201, 169, 154, 66, 1, 25, 194, 6, 37, 32, 159, 203, 13, 242, 77, 166, 197, 89, 243, 237, 46, 114, 28, 141, 104, 208, 176, 231, 84, 224, 124, 223, 79, 169, 249, 81, 145, 223, 18, 251, 80, 24, 132, 122, 87, 179, 9, 9, 121, 254, 239, 136, 191, 55, 148, 64, 118, 134, 89, 97, 133, 93, 217, 246, 21, 2, 1, 2, 4, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_148(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::old_behavior";
  test.test_nonce = 49;
  test.test_number =148;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JAiEgimVAdz7y1BK7piKHkebTFSQwEguN4HWVbbvDmpR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DtsXRgow2QjurBSSvceN8JKug9fvPfZ1mKHsG649q8Qn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 21, 0, 222, 229, 54, 221, 247, 118, 71, 124, 5, 203, 45, 145, 188, 70, 233, 167, 135, 97, 89, 153, 58, 64, 170, 16, 169, 80, 224, 52, 198, 3, 44, 134, 179, 29, 71, 223, 151, 123, 237, 127, 17, 43, 112, 77, 32, 254, 255, 51, 239, 74, 179, 66, 121, 103, 205, 1, 253, 213, 35, 39, 209, 51, 255, 15, 157, 15, 99, 252, 160, 182, 133, 134, 5, 35, 182, 54, 126, 156, 212, 85, 201, 198, 181, 46, 135, 29, 19, 66, 235, 190, 155, 153, 109, 53, 184, 203, 167, 183, 209, 13, 55, 51, 62, 143, 199, 116, 1, 80, 81, 195, 151, 53, 193, 172, 179, 134, 179, 58, 130, 11, 131, 10, 235, 86, 75, 122, 2, 1, 2, 4, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 191, 149, 254, 33, 209, 165, 47, 104, 164, 51, 74, 42, 83, 95, 136, 2, 132, 110, 177, 59, 173, 248, 5, 69, 151, 213, 30, 244, 204, 60, 8, 255, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_149(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_authorize_with_seed::old_behavior";
  test.test_nonce = 70;
  test.test_number =149;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "JAiEgimVAdz7y1BK7piKHkebTFSQwEguN4HWVbbvDmpR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "DtsXRgow2QjurBSSvceN8JKug9fvPfZ1mKHsG649q8Qn",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarC1ock11111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 40;
static const uchar test_acc_2_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 40;
static const uchar test_acc_2_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 237, 116, 212, 243, 113, 203, 77, 9, 122, 112, 6, 212, 115, 70, 252, 138, 34, 60, 60, 138, 197, 215, 70, 237, 18, 120, 91, 158, 115, 43, 152, 98, 174, 212, 222, 161, 88, 110, 185, 237, 121, 139, 208, 209, 197, 111, 232, 14, 28, 141, 130, 86, 44, 204, 70, 34, 169, 184, 33, 37, 238, 120, 250, 129, 201, 218, 253, 71, 192, 118, 18, 20, 166, 82, 86, 164, 219, 217, 1, 251, 160, 12, 41, 42, 192, 49, 137, 240, 190, 12, 85, 141, 254, 213, 166, 171, 254, 155, 76, 150, 29, 198, 184, 188, 177, 42, 100, 24, 205, 148, 67, 25, 241, 102, 117, 68, 254, 111, 44, 195, 158, 89, 125, 35, 117, 185, 16, 14, 2, 1, 2, 4, 255, 19, 135, 217, 114, 14, 175, 206, 99, 23, 25, 223, 189, 233, 141, 184, 77, 119, 173, 128, 168, 160, 117, 210, 113, 4, 28, 192, 9, 123, 165, 222, 191, 149, 254, 33, 209, 165, 47, 104, 164, 51, 74, 42, 83, 95, 136, 2, 132, 110, 177, 59, 173, 248, 5, 69, 151, 213, 30, 244, 204, 60, 8, 255, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 3, 0, 1, 3, 82, 8, 0, 0, 0, 156, 192, 3, 220, 65, 14, 174, 252, 223, 195, 255, 221, 215, 238, 30, 206, 117, 226, 187, 187, 71, 69, 12, 168, 131, 8, 68, 124, 27, 202, 232, 53, 1, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 52, 50, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 382;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
