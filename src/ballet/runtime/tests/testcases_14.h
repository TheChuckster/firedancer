int test_325(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 64;
  test.test_number =325;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ENyvk3wQJTk9U2LGvNCv29mtTTet7QKAfZxV4XAvYrES",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8NuCUBUQtaKUDaxv7qvhJvoziMdMqNnHnrKCW8iSYCZP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 93, 127, 53, 118, 120, 26, 249, 21, 73, 5, 225, 63, 141, 247, 253, 80, 143, 26, 71, 149, 209, 232, 47, 182, 36, 200, 211, 189, 27, 246, 10, 222, 31, 55, 20, 245, 3, 198, 184, 148, 175, 26, 108, 105, 121, 26, 29, 81, 155, 154, 128, 16, 211, 102, 185, 117, 80, 218, 157, 253, 251, 70, 42, 151, 1, 0, 1, 3, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 109, 158, 6, 144, 124, 74, 65, 113, 34, 136, 169, 107, 245, 228, 141, 102, 85, 204, 138, 43, 181, 253, 178, 143, 219, 122, 108, 220, 37, 131, 7, 42, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_326(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 87;
  test.test_number =326;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ENyvk3wQJTk9U2LGvNCv29mtTTet7QKAfZxV4XAvYrES",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8NuCUBUQtaKUDaxv7qvhJvoziMdMqNnHnrKCW8iSYCZP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 4565760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 90, 148, 16, 210, 2, 158, 58, 214, 50, 242, 185, 93, 234, 78, 176, 182, 181, 247, 109, 185, 252, 59, 22, 151, 124, 166, 151, 9, 199, 212, 7, 26, 106, 233, 197, 184, 235, 134, 221, 214, 181, 230, 51, 47, 129, 158, 201, 172, 46, 3, 11, 44, 213, 75, 180, 175, 113, 232, 220, 83, 217, 52, 143, 97, 1, 0, 1, 3, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 109, 158, 6, 144, 124, 74, 65, 113, 34, 136, 169, 107, 245, 228, 141, 102, 85, 204, 138, 43, 181, 253, 178, 143, 219, 122, 108, 220, 37, 131, 7, 42, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_327(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_100_percent_of_source_to_account_with_lamports::old_behavior";
  test.test_nonce = 93;
  test.test_number =327;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "ENyvk3wQJTk9U2LGvNCv29mtTTet7QKAfZxV4XAvYrES",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "8NuCUBUQtaKUDaxv7qvhJvoziMdMqNnHnrKCW8iSYCZP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 4565761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 89, 205, 107, 209, 137, 174, 99, 142, 119, 247, 24, 135, 172, 175, 249, 219, 139, 93, 21, 251, 118, 138, 67, 172, 254, 36, 207, 145, 99, 250, 4, 129, 94, 25, 102, 30, 186, 245, 88, 174, 46, 175, 6, 65, 198, 153, 64, 141, 105, 16, 174, 217, 9, 186, 92, 144, 42, 253, 45, 146, 68, 207, 124, 87, 1, 0, 1, 3, 198, 201, 126, 127, 150, 22, 186, 159, 219, 105, 1, 91, 249, 103, 107, 25, 200, 66, 101, 193, 46, 97, 16, 66, 243, 31, 255, 178, 104, 62, 213, 183, 109, 158, 6, 144, 124, 74, 65, 113, 34, 136, 169, 107, 245, 228, 141, 102, 85, 204, 138, 43, 181, 253, 178, 143, 219, 122, 108, 220, 37, 131, 7, 42, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 213, 34, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_328(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 104;
  test.test_number =328;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 192, 104, 165, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 156, 31, 22, 141, 129, 115, 22, 12, 28, 179, 162, 118, 78, 97, 245, 235, 32, 219, 245, 90, 49, 3, 161, 177, 138, 17, 210, 40, 49, 13, 53, 61, 179, 139, 22, 11, 92, 189, 68, 109, 216, 216, 133, 103, 81, 117, 219, 76, 177, 73, 4, 5, 105, 44, 199, 110, 178, 162, 134, 253, 252, 114, 100, 10, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_329(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 157;
  test.test_number =329;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 1005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 63, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 29, 41, 46, 32, 159, 210, 229, 217, 38, 250, 21, 144, 201, 7, 87, 12, 70, 68, 182, 127, 58, 6, 0, 9, 132, 203, 80, 117, 142, 216, 11, 44, 38, 206, 75, 174, 27, 193, 7, 252, 166, 66, 82, 0, 224, 68, 175, 230, 11, 35, 237, 77, 163, 62, 180, 96, 132, 127, 96, 211, 137, 219, 148, 202, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_330(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 202;
  test.test_number =330;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 1005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 110, 173, 54, 228, 6, 101, 145, 77, 100, 242, 141, 176, 87, 113, 24, 207, 143, 72, 127, 49, 124, 254, 148, 122, 252, 136, 138, 81, 108, 212, 67, 253, 166, 179, 66, 3, 143, 159, 127, 77, 191, 156, 23, 132, 76, 114, 176, 123, 5, 110, 149, 91, 218, 173, 27, 215, 212, 28, 158, 26, 95, 182, 192, 168, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_331(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 249;
  test.test_number =331;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 2005261759UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 80, 125, 87, 101, 89, 217, 20, 41, 123, 16, 227, 121, 204, 216, 129, 247, 11, 122, 224, 70, 66, 7, 130, 206, 95, 83, 24, 167, 181, 193, 236, 192, 151, 43, 28, 71, 60, 64, 38, 173, 101, 190, 62, 84, 134, 29, 197, 101, 207, 190, 38, 5, 142, 29, 31, 43, 47, 231, 106, 127, 35, 180, 28, 150, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_332(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 289;
  test.test_number =332;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 1002978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 2005261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 10, 172, 17, 204, 84, 131, 95, 252, 239, 176, 80, 109, 51, 122, 206, 246, 49, 187, 143, 178, 17, 155, 51, 181, 95, 100, 64, 253, 184, 96, 172, 246, 205, 242, 129, 167, 25, 208, 75, 234, 100, 138, 112, 243, 140, 190, 243, 70, 99, 118, 241, 5, 194, 40, 197, 219, 183, 58, 163, 28, 246, 37, 194, 182, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 64, 62, 200, 59, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_333(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 122;
  test.test_number =333;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 117, 147, 175, 78, 104, 113, 24, 250, 59, 139, 79, 252, 207, 102, 30, 11, 226, 105, 207, 244, 12, 215, 35, 32, 23, 190, 194, 21, 249, 156, 210, 42, 120, 120, 182, 95, 87, 149, 211, 87, 135, 227, 45, 15, 186, 254, 186, 77, 123, 216, 184, 118, 67, 28, 66, 212, 41, 72, 173, 244, 242, 40, 175, 76, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_334(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 181;
  test.test_number =334;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 100, 128, 41, 194, 178, 174, 217, 139, 86, 248, 68, 76, 227, 40, 239, 83, 55, 7, 127, 32, 206, 163, 232, 214, 209, 195, 143, 192, 60, 48, 129, 123, 53, 135, 240, 119, 58, 36, 102, 42, 183, 177, 154, 68, 63, 23, 137, 218, 96, 113, 93, 244, 222, 31, 224, 14, 212, 142, 97, 211, 115, 19, 20, 103, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_335(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 217;
  test.test_number =335;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282879UL;
test_acc->result_lamports = 1002282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 35, 155, 89, 184, 189, 106, 212, 186, 162, 142, 7, 148, 92, 162, 146, 103, 202, 2, 28, 162, 51, 80, 45, 62, 34, 109, 136, 186, 138, 245, 6, 14, 177, 134, 28, 174, 77, 208, 214, 69, 184, 217, 165, 238, 20, 113, 30, 184, 251, 24, 117, 182, 191, 30, 99, 240, 34, 84, 223, 191, 220, 44, 252, 99, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_336(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 265;
  test.test_number =336;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1002282880UL;
test_acc->result_lamports = 1002282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 196, 252, 39, 109, 5, 94, 182, 224, 135, 201, 79, 123, 149, 219, 149, 130, 229, 149, 195, 97, 26, 99, 158, 39, 29, 16, 141, 170, 210, 136, 70, 143, 67, 229, 28, 124, 127, 60, 248, 231, 118, 113, 20, 225, 224, 109, 30, 233, 159, 110, 23, 238, 52, 96, 235, 111, 172, 111, 24, 196, 92, 72, 238, 63, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_337(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::new_behavior";
  test.test_nonce = 65;
  test.test_number =337;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "FJ57JsuFVjuoJDHuwBpp7TWGCErMcBTjf3pbKpcugkYk",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2005957760UL;
test_acc->result_lamports = 2005957760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 8, 99, 119, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "HkcvgPDLL6HMQnYseNp4Lpaeb1obrdgP62onUrasgTf2",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 215, 241, 14, 135, 212, 200, 27, 55, 141, 158, 79, 249, 191, 134, 46, 94, 91, 168, 196, 43, 53, 21, 190, 62, 149, 231, 101, 253, 90, 211, 127, 172, 94, 181, 213, 233, 33, 66, 20, 47, 83, 24, 93, 253, 55, 120, 31, 29, 173, 165, 116, 106, 75, 153, 0, 222, 126, 142, 237, 102, 152, 201, 58, 161, 1, 0, 1, 3, 212, 99, 34, 242, 181, 208, 146, 147, 46, 133, 11, 158, 89, 126, 34, 195, 239, 196, 111, 209, 113, 165, 34, 26, 73, 62, 94, 148, 54, 136, 183, 53, 248, 231, 150, 50, 68, 226, 1, 40, 181, 243, 122, 143, 181, 130, 128, 189, 84, 77, 47, 163, 55, 132, 162, 183, 45, 5, 228, 177, 184, 188, 99, 221, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 129, 124, 144, 119, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_338(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 102;
  test.test_number =338;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 139, 145, 98, 78, 89, 186, 239, 114, 90, 213, 75, 33, 252, 160, 19, 237, 105, 85, 86, 106, 52, 118, 135, 220, 129, 65, 78, 150, 38, 84, 172, 74, 8, 29, 111, 109, 9, 61, 11, 73, 133, 158, 28, 122, 183, 178, 76, 227, 240, 211, 102, 174, 114, 221, 91, 238, 252, 231, 85, 160, 126, 232, 247, 151, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_339(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 160;
  test.test_number =339;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 5261760UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 175, 201, 116, 13, 196, 74, 78, 60, 234, 181, 215, 119, 236, 24, 188, 179, 9, 31, 173, 203, 190, 111, 128, 243, 175, 15, 12, 225, 92, 81, 233, 180, 246, 187, 145, 58, 188, 86, 43, 124, 237, 200, 51, 121, 177, 41, 181, 129, 36, 53, 232, 36, 100, 84, 225, 230, 242, 222, 53, 251, 69, 224, 144, 151, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_340(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 194;
  test.test_number =340;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 111, 57, 1, 206, 78, 125, 188, 125, 188, 222, 164, 52, 22, 241, 19, 211, 163, 38, 64, 235, 44, 184, 12, 195, 11, 224, 232, 196, 247, 211, 218, 250, 152, 194, 56, 128, 203, 123, 63, 83, 212, 138, 64, 243, 95, 53, 103, 132, 135, 227, 87, 86, 137, 79, 195, 137, 42, 49, 145, 80, 198, 23, 244, 79, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_341(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 234;
  test.test_number =341;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 5261761UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 212, 106, 20, 246, 222, 73, 45, 119, 197, 182, 31, 213, 132, 69, 144, 212, 56, 238, 170, 187, 19, 235, 140, 27, 63, 240, 154, 4, 173, 171, 8, 135, 96, 116, 40, 251, 255, 183, 208, 176, 122, 38, 53, 207, 104, 208, 12, 246, 176, 191, 52, 68, 179, 26, 86, 254, 3, 217, 233, 164, 245, 46, 73, 47, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_342(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 268;
  test.test_number =342;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 5261762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 71, 100, 29, 52, 121, 85, 139, 8, 36, 53, 253, 175, 211, 222, 63, 6, 62, 106, 59, 245, 229, 154, 131, 166, 73, 8, 241, 83, 106, 145, 0, 11, 208, 242, 124, 127, 167, 13, 104, 16, 54, 67, 250, 196, 83, 236, 241, 232, 245, 138, 111, 231, 237, 191, 12, 80, 32, 134, 230, 232, 128, 190, 38, 126, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_343(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 121;
  test.test_number =343;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282879UL;
test_acc->result_lamports = 2282879UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 34, 89, 243, 40, 218, 109, 12, 160, 201, 160, 40, 113, 122, 132, 76, 62, 181, 70, 0, 158, 98, 251, 24, 109, 234, 37, 191, 84, 108, 14, 91, 246, 17, 6, 231, 87, 113, 240, 52, 72, 97, 176, 23, 37, 14, 192, 209, 170, 179, 11, 130, 67, 60, 213, 80, 127, 118, 232, 250, 7, 96, 163, 249, 134, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_344(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 173;
  test.test_number =344;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 23, 52, 71, 136, 137, 179, 178, 32, 200, 95, 183, 169, 16, 247, 67, 177, 103, 117, 79, 134, 95, 192, 88, 18, 221, 155, 228, 52, 79, 156, 49, 103, 152, 134, 42, 168, 169, 211, 46, 207, 44, 26, 244, 208, 236, 20, 213, 238, 130, 227, 166, 248, 119, 221, 51, 176, 253, 81, 94, 167, 59, 147, 234, 149, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_345(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 215;
  test.test_number =345;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282880UL;
test_acc->result_lamports = 2282880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 183, 164, 39, 209, 97, 225, 98, 72, 88, 142, 38, 129, 16, 244, 23, 70, 135, 74, 29, 14, 122, 11, 140, 161, 10, 100, 20, 44, 22, 171, 87, 52, 254, 5, 229, 101, 38, 178, 44, 243, 113, 107, 153, 207, 208, 151, 205, 66, 14, 200, 98, 115, 87, 108, 32, 140, 159, 164, 175, 65, 76, 36, 114, 205, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_346(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 261;
  test.test_number =346;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2282881UL;
test_acc->result_lamports = 2282881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 52, 65, 143, 80, 57, 91, 227, 205, 116, 206, 225, 192, 141, 228, 125, 177, 119, 128, 214, 75, 217, 242, 138, 164, 82, 239, 82, 28, 253, 51, 15, 71, 151, 204, 151, 137, 0, 72, 192, 71, 155, 140, 72, 204, 218, 13, 251, 217, 24, 120, 84, 158, 186, 246, 89, 151, 136, 133, 13, 57, 68, 202, 10, 243, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_347(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 1;
  test.disable_feature = fd_alloca(1U, 1);
  test.disable_feature[0] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "stake_instruction::tests::test_split_from_larger_sized_account::old_behavior";
  test.test_nonce = 71;
  test.test_number =347;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "HRHc87rF18iGtMCoVgUHDU1NJqLBNx1J97yU4TVPfFak",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 5957762UL;
test_acc->result_lamports = 5957762UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 300;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 64, 116, 45, 0, 0, 0, 0, 0, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 66, 116, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "9J9zNapNff6DwyCpyqVEDgsfcwHf7hzfFCvVNS5iHWNS",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 200;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 169, 247, 44, 47, 189, 170, 111, 67, 250, 239, 186, 254, 63, 249, 170, 95, 27, 55, 121, 161, 72, 137, 251, 146, 133, 240, 104, 76, 35, 205, 132, 233, 43, 71, 0, 186, 166, 96, 155, 86, 242, 194, 59, 17, 57, 4, 9, 174, 202, 250, 153, 227, 237, 168, 21, 135, 133, 181, 74, 232, 7, 6, 154, 189, 1, 0, 1, 3, 243, 243, 180, 202, 58, 196, 26, 105, 120, 63, 197, 164, 240, 243, 116, 200, 231, 43, 16, 198, 41, 74, 111, 172, 184, 35, 217, 237, 104, 41, 147, 109, 123, 66, 136, 131, 137, 207, 222, 149, 69, 245, 121, 158, 144, 244, 121, 47, 116, 21, 232, 213, 17, 138, 6, 104, 201, 67, 33, 86, 215, 100, 133, 63, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 131, 232, 90, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -6;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_348(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 141;
  test.test_number =348;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9empWhp1mEaJGYhSFUUjERq1TH2tQm3P6WCZxQwkauMm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "ArC4PUiiTGkcPkUNshie6pkT5PmoGNTHr6zb5ce9g5fQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 3, 95, 121, 248, 69, 251, 241, 53, 152, 24, 189, 22, 158, 159, 51, 188, 127, 230, 221, 157, 231, 74, 41, 237, 176, 174, 208, 205, 173, 73, 36, 139, 226, 9, 137, 223, 10, 204, 189, 9, 196, 213, 216, 138, 130, 241, 176, 3, 187, 255, 208, 55, 27, 193, 159, 184, 77, 161, 178, 17, 146, 134, 103, 21, 1, 0, 1, 3, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 146, 83, 37, 80, 158, 212, 185, 118, 58, 123, 99, 18, 183, 158, 250, 228, 245, 24, 248, 220, 97, 104, 206, 233, 183, 17, 119, 210, 194, 237, 206, 187, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_349(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "stake_instruction::tests::test_split_from_smaller_sized_account::new_behavior";
  test.test_nonce = 174;
  test.test_number =349;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "9empWhp1mEaJGYhSFUUjERq1TH2tQm3P6WCZxQwkauMm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978881UL;
test_acc->result_lamports = 2978881UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 200;
static const uchar test_acc_0_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 200;
static const uchar test_acc_0_result_data[] = {2, 0, 0, 0, 128, 213, 34, 0, 0, 0, 0, 0, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 193, 158, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 208, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "ArC4PUiiTGkcPkUNshie6pkT5PmoGNTHr6zb5ce9g5fQ",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 2978880UL;
test_acc->result_lamports = 2978880UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 300;
static const uchar test_acc_1_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 300;
static const uchar test_acc_1_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "SysvarRent111111111111111111111111111111111",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "Sysvar1111111111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 17;
static const uchar test_acc_2_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 17;
static const uchar test_acc_2_result_data[] = {152, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 64, 50};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "Stake11111111111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 91, 206, 197, 211, 0, 74, 15, 16, 77, 69, 207, 170, 118, 85, 35, 240, 219, 189, 212, 71, 111, 75, 29, 57, 11, 130, 16, 174, 139, 66, 4, 98, 142, 186, 205, 22, 216, 129, 225, 137, 10, 57, 192, 40, 197, 225, 102, 56, 14, 87, 119, 58, 135, 240, 74, 112, 29, 95, 228, 247, 222, 177, 58, 251, 1, 0, 1, 3, 128, 138, 169, 156, 207, 46, 175, 173, 64, 47, 224, 58, 38, 254, 226, 168, 94, 212, 11, 212, 142, 27, 19, 99, 208, 202, 43, 132, 242, 160, 59, 220, 146, 83, 37, 80, 158, 212, 185, 118, 58, 123, 99, 18, 183, 158, 250, 228, 245, 24, 248, 220, 97, 104, 206, 233, 183, 17, 119, 210, 194, 237, 206, 187, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 12, 3, 0, 0, 0, 65, 116, 45, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 215;
  test.expected_result = -4;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
