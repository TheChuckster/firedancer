int test_1375(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_account_with_seed_separate_base_account";
  test.test_nonce = 6;
  test.test_number =1375;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 3;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WdLfRPMoakqrfpJfRkUhwxuRuTkBeDzeLFH",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "dLgf8Q3MjJi7q5xuH8kCR7c3LGYqoGi97KDKCEtV9Ri",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
fd_base58_decode_32( "1111113Wdk12NU6sU2KYdjoWmu3GT2hh6FSawEEAZd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_2_data[] = {0};
test_acc->data = test_acc_2_data;
test_acc->result_data_len = 0;
static const uchar test_acc_2_result_data[] = {0};
test_acc->result_data = test_acc_2_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 20, 0, 31, 171, 130, 98, 181, 127, 37, 1, 245, 206, 173, 128, 239, 134, 233, 142, 244, 44, 224, 249, 56, 124, 193, 42, 19, 45, 130, 13, 241, 102, 89, 205, 77, 235, 13, 94, 57, 232, 219, 171, 71, 219, 66, 93, 46, 42, 175, 63, 148, 231, 51, 149, 50, 0, 98, 194, 246, 161, 23, 75, 50, 236, 121, 214, 252, 175, 112, 202, 38, 85, 127, 8, 95, 224, 80, 24, 191, 49, 138, 169, 102, 182, 132, 133, 211, 163, 222, 223, 160, 37, 153, 66, 136, 253, 242, 138, 87, 219, 144, 110, 14, 154, 236, 227, 145, 201, 6, 238, 36, 60, 64, 26, 229, 119, 213, 49, 248, 234, 102, 17, 27, 239, 49, 162, 16, 214, 2, 1, 1, 4, 0, 0, 0, 0, 0, 0, 81, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 79, 42, 101, 128, 27, 113, 100, 30, 132, 27, 21, 49, 71, 232, 55, 11, 194, 71, 106, 101, 208, 0, 190, 248, 201, 154, 168, 35, 157, 72, 41, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 3, 3, 0, 2, 1, 104, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 115, 104, 105, 110, 121, 32, 112, 101, 112, 112, 101, 114, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 404;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1376(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[1] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[2] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[3] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[4] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[5] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[6] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[13] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[14] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[15] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[16] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[17] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[18] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[19] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[20] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[21] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[22] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[24] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[25] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[26] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[27] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[32] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[33] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[34] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[35] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[36] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[37] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[38] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[39] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[40] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[43] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[44] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[45] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[46] = fd_feature_offset(zk_token_sdk_enabled);
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 10;
  test.test_number =1376;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VFfjzRrnYB87BtV4GuQkqx5Y8qsAsTd9Pd1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VG55bQy5ptJa4hvCMvq6ASCovUNRpArjDwM",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 1;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 1;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 84, 155, 3, 245, 75, 139, 136, 130, 169, 228, 215, 153, 232, 54, 27, 62, 4, 114, 254, 134, 202, 151, 68, 176, 54, 189, 219, 63, 114, 189, 85, 229, 56, 56, 129, 19, 148, 61, 105, 175, 142, 183, 125, 144, 52, 220, 62, 76, 99, 43, 146, 177, 24, 254, 103, 254, 244, 216, 56, 90, 96, 45, 177, 10, 38, 112, 126, 233, 77, 114, 128, 13, 172, 56, 182, 214, 60, 211, 77, 184, 61, 253, 142, 39, 237, 56, 31, 132, 70, 220, 100, 190, 48, 85, 202, 101, 213, 186, 219, 218, 61, 188, 172, 242, 250, 195, 74, 81, 137, 33, 58, 71, 103, 124, 42, 100, 75, 192, 231, 136, 38, 24, 24, 200, 86, 103, 60, 44, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 81, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1377(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[1] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[2] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[3] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[4] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[7] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[8] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[9] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[10] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[11] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[13] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[14] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[15] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[16] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[17] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[18] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[19] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[20] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[21] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[22] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[23] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[24] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[27] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[28] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[29] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[30] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[31] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[32] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[33] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[34] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[37] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[38] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[39] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[40] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[41] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[42] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[43] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[44] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[45] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[46] = fd_feature_offset(check_slice_translation_size);
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 12;
  test.test_number =1377;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VFfjzRrnYB87BtV4GuQkqx5Y8qsAsTd9Pd1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VG55bQy5ptJa4hvCMvq6ASCovUNRpArjDwM",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 124, 180, 195, 237, 137, 92, 230, 208, 76, 112, 88, 168, 86, 103, 225, 72, 102, 217, 24, 98, 225, 172, 6, 87, 14, 165, 41, 218, 63, 190, 229, 30, 147, 93, 43, 151, 144, 250, 29, 4, 235, 74, 113, 45, 81, 18, 161, 60, 72, 164, 237, 184, 115, 37, 84, 139, 73, 50, 241, 121, 216, 181, 153, 188, 105, 164, 53, 10, 127, 86, 127, 99, 96, 221, 24, 38, 141, 28, 252, 193, 195, 189, 24, 66, 136, 208, 25, 204, 173, 33, 230, 218, 205, 117, 3, 131, 65, 61, 191, 43, 57, 218, 105, 172, 152, 253, 169, 19, 245, 43, 114, 50, 231, 141, 23, 102, 245, 173, 6, 237, 1, 16, 55, 62, 160, 135, 143, 40, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 81, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1378(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[3] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[6] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[7] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[8] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[9] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[10] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[11] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[12] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[13] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[14] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[15] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[16] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[17] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[18] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[19] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[20] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[21] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[24] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[25] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[26] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[27] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[28] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[29] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[30] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[31] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[32] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[33] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[34] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[35] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[36] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[37] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[38] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[39] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[40] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[41] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[42] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[43] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[44] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[45] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[46] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 7;
  test.test_number =1378;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VFfjzRrnYB87BtV4GuQkqx5Y8qsAsTd9Pd1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VG55bQy5ptJa4hvCMvq6ASCovUNRpArjDwM",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "LbUiWL3xVV8hTFYBVdbTNrpDo41NKS6o3LHHuDzjfcY",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 198, 76, 167, 9, 90, 201, 105, 171, 13, 149, 100, 39, 227, 118, 34, 199, 239, 86, 14, 244, 28, 217, 246, 87, 54, 96, 100, 47, 94, 49, 191, 239, 107, 50, 106, 29, 134, 158, 21, 229, 158, 104, 224, 245, 0, 149, 163, 179, 160, 211, 193, 105, 232, 183, 5, 42, 124, 62, 222, 227, 149, 214, 192, 170, 225, 80, 85, 153, 16, 165, 139, 85, 80, 236, 171, 24, 32, 23, 168, 84, 217, 124, 8, 245, 103, 96, 229, 243, 192, 161, 217, 121, 130, 21, 86, 82, 201, 77, 230, 103, 204, 37, 8, 172, 221, 235, 242, 21, 21, 177, 157, 221, 237, 35, 247, 47, 181, 208, 40, 201, 18, 141, 73, 102, 151, 100, 175, 148, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 81, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1379(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 15;
  test.test_number =1379;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WhN3TESnTreVRze4Hzg38pA9mknm5LLUfQj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WhmP4DZ5kZpxJp5CP26NTJHRZPJ223a4Vj5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "LbUiWL3xVV8hTFYBVdbTNrpDo41NKS6o3LHHuDzjfcY",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 150, 32, 119, 232, 36, 74, 120, 116, 208, 17, 235, 42, 199, 64, 122, 156, 255, 207, 216, 68, 237, 72, 218, 230, 172, 227, 129, 162, 226, 234, 62, 201, 153, 56, 62, 179, 45, 95, 26, 60, 36, 203, 38, 255, 220, 180, 151, 57, 120, 77, 176, 5, 241, 193, 105, 12, 127, 82, 68, 225, 88, 116, 3, 94, 48, 119, 180, 121, 122, 98, 24, 133, 227, 32, 8, 25, 237, 134, 115, 156, 185, 172, 217, 219, 57, 54, 140, 235, 73, 128, 140, 83, 34, 30, 187, 57, 21, 126, 227, 224, 23, 48, 224, 206, 49, 157, 241, 48, 17, 128, 213, 115, 49, 50, 205, 166, 86, 29, 14, 174, 225, 199, 24, 216, 59, 100, 117, 46, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 82, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1380(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 16;
  test.test_number =1380;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WhN3TESnTreVRze4Hzg38pA9mknm5LLUfQj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WhmP4DZ5kZpxJp5CP26NTJHRZPJ223a4Vj5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 1;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 1;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 200, 72, 237, 103, 160, 250, 235, 158, 102, 132, 98, 15, 200, 154, 20, 239, 62, 72, 164, 211, 92, 150, 126, 2, 229, 227, 254, 73, 82, 24, 27, 191, 82, 87, 217, 108, 87, 56, 176, 128, 99, 14, 178, 123, 133, 124, 191, 8, 57, 148, 238, 15, 179, 174, 182, 252, 98, 38, 205, 115, 53, 181, 108, 198, 242, 84, 45, 207, 254, 224, 116, 115, 208, 66, 194, 83, 192, 182, 14, 112, 202, 245, 35, 219, 231, 140, 121, 43, 100, 53, 40, 224, 80, 23, 127, 29, 184, 19, 219, 184, 2, 110, 48, 199, 236, 202, 87, 138, 118, 180, 210, 203, 226, 211, 87, 12, 228, 27, 45, 89, 161, 168, 137, 139, 246, 221, 142, 132, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 82, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1381(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_already_in_use";
  test.test_nonce = 17;
  test.test_number =1381;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WhN3TESnTreVRze4Hzg38pA9mknm5LLUfQj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WhmP4DZ5kZpxJp5CP26NTJHRZPJ223a4Vj5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1UL;
test_acc->result_lamports = 1UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 129, 60, 37, 230, 100, 246, 192, 75, 173, 154, 223, 30, 48, 51, 69, 96, 198, 72, 178, 76, 89, 67, 36, 98, 231, 29, 147, 241, 149, 175, 217, 25, 217, 5, 159, 227, 0, 135, 67, 60, 120, 228, 132, 170, 0, 225, 181, 29, 97, 37, 72, 179, 251, 11, 83, 111, 134, 244, 25, 195, 167, 155, 235, 181, 68, 40, 53, 208, 31, 208, 138, 55, 79, 7, 203, 173, 118, 214, 29, 85, 99, 157, 14, 219, 181, 205, 111, 139, 3, 12, 155, 195, 208, 122, 199, 66, 1, 65, 106, 34, 204, 206, 86, 89, 173, 160, 133, 45, 28, 95, 116, 187, 70, 30, 245, 167, 100, 178, 243, 149, 102, 236, 127, 12, 37, 34, 96, 228, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 82, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1382(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[1] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[2] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[3] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[4] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[5] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[6] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[7] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[8] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[9] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[10] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[11] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[12] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[13] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[14] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[15] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[16] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[17] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[18] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[19] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[20] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[21] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[22] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[23] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[24] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[25] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[26] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[27] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[28] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[29] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[30] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[31] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[32] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[33] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[34] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[35] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[36] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[37] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[38] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[40] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[46] = fd_feature_offset(keep_merkle_shreds);
  test.test_name = "system_instruction_processor::tests::test_create_data_populated";
  test.test_nonce = 22;
  test.test_number =1382;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VN79eBbZ9Y1XCyRHfJ85wi5tiuwHxqNUigX",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VNWVFAhrSFBz5nrRkKYRGCDAWYSYuYc4Yzs",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 4;
static const uchar test_acc_1_data[] = {0, 1, 2, 3};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 4;
static const uchar test_acc_1_result_data[] = {0, 1, 2, 3};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 72, 6, 113, 72, 75, 45, 242, 250, 11, 69, 172, 34, 204, 148, 132, 201, 199, 3, 158, 217, 104, 243, 120, 199, 79, 173, 210, 196, 61, 128, 147, 100, 180, 74, 108, 1, 60, 56, 22, 200, 199, 97, 28, 99, 71, 71, 161, 169, 5, 48, 137, 155, 46, 46, 235, 158, 129, 129, 138, 44, 206, 197, 255, 185, 118, 92, 65, 8, 49, 237, 154, 38, 213, 213, 21, 186, 155, 43, 180, 86, 96, 72, 215, 50, 81, 182, 215, 182, 176, 86, 110, 230, 103, 3, 174, 113, 204, 94, 247, 32, 184, 112, 69, 191, 41, 192, 76, 73, 236, 184, 70, 115, 153, 129, 140, 82, 163, 206, 118, 119, 227, 193, 156, 144, 191, 28, 48, 246, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 81, 73, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 74, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1383(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_data_populated";
  test.test_nonce = 11;
  test.test_number =1383;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WiAifCfP3H1RBdWLU3WhmnQhM1oGxkoeL3R",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113Wia4GBmgKzBt4SwUZ4w36GXy8eJXuU3EAMm",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 4;
static const uchar test_acc_1_data[] = {0, 1, 2, 3};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 4;
static const uchar test_acc_1_result_data[] = {0, 1, 2, 3};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 155, 224, 181, 210, 22, 234, 17, 39, 100, 75, 245, 160, 68, 61, 96, 117, 123, 77, 229, 8, 7, 59, 161, 186, 119, 242, 60, 169, 54, 110, 251, 192, 2, 36, 171, 141, 7, 83, 241, 165, 121, 102, 201, 238, 208, 92, 104, 39, 84, 219, 52, 23, 136, 180, 217, 46, 151, 240, 41, 91, 251, 214, 200, 89, 231, 70, 56, 228, 137, 161, 174, 114, 170, 197, 158, 67, 208, 47, 126, 89, 0, 47, 49, 212, 15, 190, 117, 114, 101, 251, 154, 21, 22, 189, 220, 27, 90, 227, 244, 49, 216, 52, 25, 81, 93, 155, 38, 159, 95, 80, 75, 204, 208, 149, 217, 83, 240, 169, 52, 15, 110, 63, 97, 58, 160, 237, 112, 48, 2, 2, 1, 3, 0, 0, 0, 0, 0, 0, 82, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1384(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[2] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[5] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[8] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[9] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[10] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[11] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[12] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[13] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[14] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[15] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[16] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[17] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[18] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[19] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[20] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[21] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[22] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[24] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[25] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[26] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[27] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[29] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[30] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[31] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[32] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[33] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[34] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[35] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[36] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[37] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[38] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[40] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[41] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[42] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[43] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[44] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[45] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[46] = fd_feature_offset(compact_vote_state_updates);
  test.test_name = "system_instruction_processor::tests::test_create_from_account_is_nonce_fail";
  test.test_nonce = 9;
  test.test_number =1384;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VHgS1MQGyj2RZyeki2WRSNhu4zPTb1o4ZCj",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 80;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 80;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VKh82GwmRGvjx4pT99c62oLG18ukJZxyinT",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 69, 52, 31, 142, 193, 112, 124, 26, 140, 56, 67, 152, 150, 105, 83, 6, 212, 225, 252, 105, 103, 238, 103, 110, 84, 238, 23, 220, 157, 203, 216, 97, 205, 202, 157, 129, 45, 8, 73, 26, 43, 2, 188, 185, 12, 218, 11, 181, 124, 138, 33, 244, 253, 110, 146, 237, 2, 249, 78, 255, 61, 229, 178, 54, 11, 98, 121, 43, 227, 10, 243, 65, 84, 114, 20, 72, 132, 156, 113, 206, 42, 108, 142, 235, 179, 218, 20, 57, 163, 86, 82, 46, 103, 104, 174, 8, 88, 239, 72, 103, 192, 81, 190, 208, 109, 210, 220, 186, 43, 247, 177, 33, 211, 230, 4, 170, 50, 31, 226, 71, 17, 206, 222, 61, 221, 31, 87, 114, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 81, 67, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 62, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 52, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 68, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1385(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_from_account_is_nonce_fail";
  test.test_nonce = 8;
  test.test_number =1385;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113We9LdMaQABCnRTAwboKNaw9yUikhXeTozsy",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 42UL;
test_acc->result_lamports = 42UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 80;
static const uchar test_acc_0_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 80;
static const uchar test_acc_0_result_data[] = {1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WeYgELghStPFJGc5gpjhuRHFGMFxUMhPqCK",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 150, 182, 40, 16, 136, 167, 158, 161, 244, 48, 20, 183, 12, 59, 38, 211, 164, 145, 3, 150, 50, 101, 35, 139, 233, 69, 46, 154, 128, 140, 180, 68, 14, 122, 95, 114, 203, 71, 73, 181, 151, 215, 181, 34, 6, 70, 243, 51, 249, 109, 38, 224, 114, 151, 124, 152, 76, 210, 121, 59, 24, 12, 200, 44, 202, 56, 57, 34, 233, 201, 105, 195, 142, 75, 124, 176, 89, 236, 130, 158, 60, 101, 148, 21, 38, 133, 88, 151, 80, 108, 53, 145, 0, 176, 124, 245, 212, 201, 116, 51, 168, 147, 232, 36, 245, 40, 164, 47, 60, 157, 67, 151, 21, 243, 102, 153, 125, 11, 125, 253, 149, 158, 123, 29, 43, 146, 3, 181, 2, 1, 1, 3, 0, 0, 0, 0, 0, 0, 82, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 1, 0, 52, 0, 0, 0, 0, 42, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -2;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1386(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[1] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[2] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[3] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[4] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[5] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[6] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[7] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[8] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[9] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[10] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[11] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[12] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[13] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[14] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[15] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[16] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[17] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[18] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[21] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[22] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[23] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[24] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[25] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[26] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[27] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[28] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[29] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[30] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[31] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[32] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[33] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[34] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[35] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[36] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[37] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[38] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[39] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[40] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[41] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[42] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[43] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[44] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[45] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[46] = fd_feature_offset(keep_merkle_shreds);
  test.test_name = "system_instruction_processor::tests::test_create_negative_lamports";
  test.test_nonce = 8;
  test.test_number =1386;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VJV7DKcsZ9PMKcX2t5M65LxSeFPyUSGEDqR",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113VJtSpJjAqrZpCRxAy6mRPq5iRsuER9Vp49m",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VKHnRHqU8ZkH5FPK48BkiKCzDWQVMrjPtU7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 15, 189, 237, 73, 79, 235, 230, 34, 214, 11, 43, 79, 192, 227, 88, 12, 85, 189, 252, 208, 132, 244, 231, 159, 11, 217, 230, 42, 102, 249, 13, 127, 55, 212, 82, 204, 238, 219, 246, 142, 103, 183, 68, 109, 201, 254, 82, 82, 19, 119, 109, 152, 80, 42, 59, 81, 97, 182, 102, 237, 64, 70, 2, 33, 188, 144, 83, 68, 181, 57, 22, 240, 27, 164, 141, 200, 206, 89, 81, 194, 159, 160, 61, 203, 207, 55, 142, 197, 100, 248, 37, 90, 38, 143, 212, 96, 79, 231, 10, 216, 181, 158, 89, 136, 61, 107, 245, 29, 125, 57, 236, 35, 13, 0, 215, 68, 48, 77, 225, 23, 183, 161, 124, 18, 191, 158, 3, 101, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 81, 64, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 66, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 1;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1387(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_negative_lamports";
  test.test_nonce = 14;
  test.test_number =1387;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WfMMSJuJ2JkB3uUMrsaNYPXnqcGUMnAZVq1",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113Wfkh3J1bK1vdviuVwtzhrsf4dEmjJVQ9L9M",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WgA2eH7tbj76oYLe2vR3BMnLQsGzFCdjATh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 28, 70, 61, 58, 206, 16, 179, 195, 191, 108, 162, 209, 224, 17, 60, 67, 165, 69, 47, 94, 165, 83, 107, 207, 20, 174, 40, 204, 6, 195, 201, 131, 152, 221, 68, 25, 73, 21, 30, 179, 234, 131, 253, 76, 228, 6, 40, 140, 23, 120, 24, 126, 111, 151, 214, 120, 190, 152, 170, 53, 30, 50, 86, 129, 246, 10, 67, 128, 254, 17, 85, 100, 56, 118, 73, 85, 117, 152, 66, 91, 17, 87, 75, 221, 245, 194, 56, 188, 107, 219, 251, 12, 149, 110, 33, 47, 153, 211, 44, 109, 13, 85, 58, 120, 124, 22, 138, 11, 66, 156, 103, 168, 18, 163, 174, 134, 89, 236, 233, 57, 64, 228, 36, 238, 56, 77, 189, 55, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 82, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 150, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = -26;
  test.custom_err = 1;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1388(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[1] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[2] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[3] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[4] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[5] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[6] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[7] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[8] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[9] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[10] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[11] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[12] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[13] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[14] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[15] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[16] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[17] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[18] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[19] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[20] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[21] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[22] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[23] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[24] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[25] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[26] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[27] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[28] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[29] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[30] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[31] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[32] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[33] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[34] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[35] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[36] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[37] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[38] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[39] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[40] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[41] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[42] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[43] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[44] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[45] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[46] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.test_name = "system_instruction_processor::tests::test_create_sysvar_invalid_id_with_feature";
  test.test_nonce = 11;
  test.test_number =1388;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VGURCQ5P7bV2wXMLSxFRUvL5i6sgkt6K4Fh",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VGskoPBgQJfVpLnUXyfkoQTMVjNwhbKtta3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 208, 241, 227, 43, 218, 101, 144, 89, 255, 28, 178, 88, 92, 133, 43, 187, 229, 104, 113, 95, 32, 191, 152, 74, 87, 31, 245, 241, 127, 130, 156, 245, 34, 148, 176, 172, 111, 140, 84, 106, 68, 115, 130, 137, 242, 120, 244, 33, 203, 95, 237, 123, 166, 130, 9, 2, 209, 231, 66, 58, 41, 2, 90, 97, 227, 188, 162, 102, 93, 14, 82, 120, 25, 43, 211, 104, 59, 78, 25, 106, 182, 129, 83, 98, 117, 43, 200, 27, 161, 19, 206, 95, 79, 178, 95, 131, 216, 82, 211, 196, 225, 218, 157, 255, 195, 182, 15, 78, 75, 136, 225, 139, 91, 232, 7, 23, 246, 112, 212, 37, 12, 58, 182, 1, 142, 32, 199, 195, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 81, 59, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 60, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 167, 213, 23, 24, 117, 247, 41, 199, 61, 147, 64, 143, 33, 97, 32, 6, 126, 216, 140, 118, 224, 140, 40, 127, 193, 148, 96, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1389(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_sysvar_invalid_id_with_feature";
  test.test_nonce = 18;
  test.test_number =1389;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WkBQg8CsUpujZig2uAcNND34HAKZgJyZVd9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WkakH7KAmY6CSY7AzC2hghAL4nppd2D9KwV",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 50UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 189, 40, 179, 196, 43, 106, 16, 41, 54, 124, 165, 160, 31, 24, 163, 89, 84, 166, 96, 115, 113, 103, 57, 42, 160, 225, 0, 181, 99, 156, 206, 238, 14, 228, 190, 53, 9, 76, 153, 207, 174, 92, 204, 12, 5, 189, 5, 45, 26, 48, 229, 112, 90, 76, 179, 115, 173, 123, 28, 108, 196, 254, 209, 158, 141, 212, 172, 52, 56, 223, 95, 112, 113, 197, 118, 132, 122, 186, 118, 248, 204, 117, 8, 100, 68, 222, 3, 155, 44, 185, 183, 183, 208, 76, 3, 132, 248, 15, 164, 54, 167, 122, 127, 23, 48, 190, 199, 121, 70, 154, 22, 67, 182, 176, 25, 210, 7, 11, 240, 227, 38, 16, 174, 84, 43, 152, 60, 39, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 82, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 17, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 6, 167, 213, 23, 24, 117, 247, 41, 199, 61, 147, 64, 143, 33, 97, 32, 6, 126, 216, 140, 118, 224, 140, 40, 127, 193, 148, 96, 0, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1390(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[1] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[2] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[3] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[4] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[5] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[6] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[9] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[10] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[11] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[12] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[13] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[14] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[15] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[16] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[17] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[18] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[19] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[20] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[21] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[22] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[23] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[24] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[25] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[26] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[27] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[28] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[29] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[30] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[31] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[32] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[33] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[34] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[35] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[36] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[37] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[38] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[40] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[41] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[42] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[43] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[44] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[45] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[46] = fd_feature_offset(increase_tx_account_lock_limit);
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 15;
  test.test_number =1390;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VHH6QNHyh1qxhADcd1667tadHMtCeJZUitP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VJ5mcLWaGSCtSo5to3vkkrqArctiXj2ePX5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 191;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1391(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[1] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[2] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[3] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[4] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[5] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[6] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[7] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[8] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[9] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[10] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[11] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[12] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[13] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[14] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[15] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[16] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[17] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[18] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[19] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[20] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[21] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[22] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[23] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[24] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[25] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[26] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[27] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[28] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[29] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[30] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[31] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[32] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[33] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[34] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[35] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[36] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[37] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[38] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[39] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[40] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[41] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[42] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[43] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[44] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[45] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[46] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 17;
  test.test_number =1391;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VHH6QNHyh1qxhADcd1667tadHMtCeJZUitP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VJ5mcLWaGSCtSo5to3vkkrqArctiXj2ePX5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 191;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1392(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[1] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[2] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[3] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[4] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[5] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[6] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[7] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[8] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[9] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[10] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[11] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[12] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[13] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[14] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[15] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[16] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[17] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[18] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[19] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[20] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[21] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[22] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[23] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[24] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[25] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[26] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[27] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[28] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[29] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[30] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[31] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[32] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[33] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[34] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[35] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[36] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[37] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[38] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[39] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[40] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[41] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[42] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[43] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[44] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[45] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[46] = fd_feature_offset(keep_merkle_shreds);
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 16;
  test.test_number =1392;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VHH6QNHyh1qxhADcd1667tadHMtCeJZUitP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VJ5mcLWaGSCtSo5to3vkkrqArctiXj2ePX5",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 26, 247, 253, 141, 190, 5, 63, 249, 116, 63, 172, 62, 24, 36, 116, 3, 24, 219, 98, 132, 205, 14, 150, 122, 128, 160, 108, 239, 82, 150, 246, 205, 52, 88, 179, 41, 251, 170, 135, 8, 13, 184, 242, 192, 219, 28, 18, 88, 149, 143, 146, 0, 7, 188, 209, 241, 159, 44, 118, 244, 228, 193, 251, 179, 1, 1, 2, 3, 0, 0, 0, 0, 0, 0, 81, 61, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 63, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1393(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 10;
  test.test_number =1393;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WgZNFGEBtSHZgMmn7wqNVqucCVnFBusJzn3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WgxhrFLVB9U2ZBCvCyFhpL2sz8HW8d6tq6P",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {1, 183, 87, 68, 35, 91, 129, 8, 4, 155, 145, 27, 131, 204, 150, 195, 97, 120, 173, 227, 83, 25, 175, 179, 111, 255, 6, 179, 50, 173, 55, 13, 132, 145, 147, 178, 200, 120, 253, 178, 31, 249, 62, 52, 133, 130, 87, 69, 222, 111, 7, 7, 62, 178, 90, 225, 9, 72, 26, 6, 239, 83, 221, 225, 60, 1, 1, 2, 3, 0, 0, 0, 0, 0, 0, 82, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 0, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 255;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1394(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 12;
  test.test_number =1394;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WgZNFGEBtSHZgMmn7wqNVqucCVnFBusJzn3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WgxhrFLVB9U2ZBCvCyFhpL2sz8HW8d6tq6P",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 191;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1395(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_unsigned";
  test.test_nonce = 9;
  test.test_number =1395;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WgZNFGEBtSHZgMmn7wqNVqucCVnFBusJzn3",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113WgxhrFLVB9U2ZBCvCyFhpL2sz8HW8d6tq6P",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 0;
static const uchar test_acc_1_result_data[] = {0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 2, 1, 2, 52, 0, 0, 0, 0, 50, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 191;
  test.expected_result = -8;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1396(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[1] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[2] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[3] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[4] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[5] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[6] = fd_feature_offset(concurrent_replay_of_forks);
  test.disable_feature[7] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[8] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[9] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[10] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[11] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[12] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[13] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[14] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[15] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[16] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[17] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[18] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[19] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[20] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[21] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[22] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[23] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[24] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[25] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[26] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[27] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[28] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[29] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[30] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[31] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[32] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[33] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[34] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[35] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[36] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[37] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[38] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[39] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[40] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[41] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[42] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[43] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[44] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[45] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[46] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.test_name = "system_instruction_processor::tests::test_create_with_zero_lamports";
  test.test_nonce = 13;
  test.test_number =1396;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VLVoEFAMzhHfhhgjKCSkfmaoaPvGBzS9PR9",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113VLu8qEGfHQU8aX7sQDs5zFi5N2RX8hfjDjV",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113VMJUSDNxa7ebTLZ1VFHRJjqM9evn5QuK43q",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 236, 233, 72, 27, 71, 74, 193, 10, 224, 55, 157, 26, 64, 198, 193, 236, 101, 220, 94, 128, 170, 83, 153, 193, 165, 170, 161, 161, 243, 96, 140, 77, 224, 21, 106, 227, 29, 139, 183, 241, 53, 135, 238, 251, 255, 131, 61, 139, 93, 233, 181, 69, 231, 51, 20, 223, 213, 17, 223, 214, 178, 202, 75, 26, 145, 239, 39, 131, 206, 196, 187, 64, 63, 174, 18, 114, 175, 17, 150, 66, 143, 206, 56, 210, 146, 36, 36, 93, 119, 72, 46, 15, 131, 149, 18, 93, 163, 123, 214, 144, 217, 173, 42, 135, 176, 219, 111, 11, 247, 224, 90, 4, 229, 174, 251, 78, 128, 29, 53, 67, 166, 108, 214, 118, 144, 138, 27, 46, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 81, 69, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1397(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_create_with_zero_lamports";
  test.test_nonce = 13;
  test.test_number =1397;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 2;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113WiyPsAsychNLwGNce6MNQkfEvGonrBGozg7",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113WjNjU9zGuQYop5okj7mhjEnWhuK3ntWPpzT",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 100UL;
test_acc->result_lamports = 100UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_0_data[] = {0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 0;
static const uchar test_acc_0_result_data[] = {0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
fd_base58_decode_32( "1111113Wjn5596aC7jGguEtp9C33iunVXpJjbjyfJo",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 0UL;
test_acc->result_lamports = 0UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 0;
static const uchar test_acc_1_data[] = {0};
test_acc->data = test_acc_1_data;
test_acc->result_data_len = 2;
static const uchar test_acc_1_result_data[] = {0, 0};
test_acc->result_data = test_acc_1_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {2, 155, 117, 102, 53, 101, 189, 167, 237, 152, 228, 104, 112, 98, 59, 172, 122, 14, 131, 9, 232, 64, 184, 20, 255, 93, 83, 152, 49, 177, 138, 49, 49, 248, 117, 52, 204, 214, 119, 148, 67, 195, 105, 205, 59, 185, 71, 103, 230, 163, 90, 123, 255, 100, 52, 99, 94, 7, 25, 70, 246, 73, 148, 115, 146, 184, 51, 245, 19, 181, 134, 92, 194, 59, 1, 46, 10, 201, 172, 8, 117, 234, 19, 84, 233, 172, 190, 184, 147, 247, 64, 247, 255, 125, 173, 59, 48, 178, 162, 160, 217, 209, 84, 101, 131, 33, 63, 129, 209, 182, 188, 159, 55, 58, 181, 215, 203, 234, 64, 239, 238, 51, 162, 235, 83, 61, 57, 198, 19, 2, 0, 1, 3, 0, 0, 0, 0, 0, 0, 82, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 82, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 0, 1, 52, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 319;
  test.expected_result = 0;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1398(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 47;
  test.disable_feature = fd_alloca(1U, 47);
  test.disable_feature[0] = fd_feature_offset(increase_tx_account_lock_limit);
  test.disable_feature[1] = fd_feature_offset(use_default_units_in_fee_calculation);
  test.disable_feature[2] = fd_feature_offset(error_on_syscall_bpf_function_hash_collisions);
  test.disable_feature[3] = fd_feature_offset(move_serialized_len_ptr_in_cpi);
  test.disable_feature[4] = fd_feature_offset(compact_vote_state_updates);
  test.disable_feature[5] = fd_feature_offset(enable_bpf_loader_extend_program_ix);
  test.disable_feature[6] = fd_feature_offset(incremental_snapshot_only_incremental_hash_calculation);
  test.disable_feature[7] = fd_feature_offset(clean_up_delegation_errors);
  test.disable_feature[8] = fd_feature_offset(disable_fees_sysvar);
  test.disable_feature[9] = fd_feature_offset(full_inflation_devnet_and_testnet);
  test.disable_feature[10] = fd_feature_offset(fix_recent_blockhashes);
  test.disable_feature[11] = fd_feature_offset(allow_votes_to_directly_update_vote_state);
  test.disable_feature[12] = fd_feature_offset(cap_accounts_data_size_per_block);
  test.disable_feature[13] = fd_feature_offset(curve25519_syscall_enabled);
  test.disable_feature[14] = fd_feature_offset(cap_accounts_data_len);
  test.disable_feature[15] = fd_feature_offset(stake_redelegate_instruction);
  test.disable_feature[16] = fd_feature_offset(commission_updates_only_allowed_in_first_half_of_epoch);
  test.disable_feature[17] = fd_feature_offset(disable_builtin_loader_ownership_chains);
  test.disable_feature[18] = fd_feature_offset(reject_callx_r10);
  test.disable_feature[19] = fd_feature_offset(libsecp256k1_fail_on_bad_count);
  test.disable_feature[20] = fd_feature_offset(check_slice_translation_size);
  test.disable_feature[21] = fd_feature_offset(enable_request_heap_frame_ix);
  test.disable_feature[22] = fd_feature_offset(update_rewards_from_cached_accounts);
  test.disable_feature[23] = fd_feature_offset(drop_merkle_shreds);
  test.disable_feature[24] = fd_feature_offset(disable_turbine_fanout_experiments);
  test.disable_feature[25] = fd_feature_offset(vote_state_update_root_fix);
  test.disable_feature[26] = fd_feature_offset(enable_early_verification_of_account_modifications);
  test.disable_feature[27] = fd_feature_offset(stake_deactivate_delinquent_instruction);
  test.disable_feature[28] = fd_feature_offset(cap_bpf_program_instruction_accounts);
  test.disable_feature[29] = fd_feature_offset(on_load_preserve_rent_epoch_for_rent_exempt_accounts);
  test.disable_feature[30] = fd_feature_offset(stake_minimum_delegation_for_rewards);
  test.disable_feature[31] = fd_feature_offset(stake_raise_minimum_delegation_to_1_sol);
  test.disable_feature[32] = fd_feature_offset(stake_allow_zero_undelegated_amount);
  test.disable_feature[33] = fd_feature_offset(add_get_minimum_delegation_instruction_to_stake_program);
  test.disable_feature[34] = fd_feature_offset(disable_rehash_for_rent_epoch);
  test.disable_feature[35] = fd_feature_offset(loosen_cpi_size_restriction);
  test.disable_feature[36] = fd_feature_offset(zk_token_sdk_enabled);
  test.disable_feature[37] = fd_feature_offset(enable_turbine_fanout_experiments);
  test.disable_feature[38] = fd_feature_offset(vote_state_update_credit_per_dequeue);
  test.disable_feature[39] = fd_feature_offset(credits_auto_rewind);
  test.disable_feature[40] = fd_feature_offset(keep_merkle_shreds);
  test.disable_feature[41] = fd_feature_offset(stake_split_uses_rent_sysvar);
  test.disable_feature[42] = fd_feature_offset(drop_redundant_turbine_path);
  test.disable_feature[43] = fd_feature_offset(libsecp256k1_fail_on_bad_count2);
  test.disable_feature[44] = fd_feature_offset(disable_deploy_of_alloc_free_syscall);
  test.disable_feature[45] = fd_feature_offset(blake3_syscall_enabled);
  test.disable_feature[46] = fd_feature_offset(concurrent_replay_of_forks);
  test.test_name = "system_instruction_processor::tests::test_nonce_account_upgrade_check_owner";
  test.test_nonce = 18;
  test.test_number =1398;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113VRjC53aEjvdh6LKYSWu5p5DLoaUcTEUjDXd",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113VS8Xg2gY2dp9y9kgXYKR8ZLcbCysPwiK3qy",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1000000UL;
test_acc->result_lamports = 1000000UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 8;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 8;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 81, 82, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 12, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
int test_1399(fd_executor_test_suite_t *suite) {
  fd_executor_test_t test;
  fd_memset( &test, 0, FD_EXECUTOR_TEST_FOOTPRINT );
  test.disable_cnt = 0;
  test.test_name = "system_instruction_processor::tests::test_nonce_account_upgrade_check_owner";
  test.test_nonce = 24;
  test.test_number =1399;
  if (fd_executor_test_suite_check_filter(suite, &test)) return -9999;
ulong test_accs_len = 1;
fd_executor_test_acc_t* test_accs = fd_alloca( 1UL, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_memset( test_accs, 0, FD_EXECUTOR_TEST_ACC_FOOTPRINT * test_accs_len );
fd_executor_test_acc_t* test_acc = test_accs;
fd_base58_decode_32( "1111113XVdupTw4bWPnC3V6FovLnaaTF8oPZ6GZTnP",  (unsigned char *) &test_acc->pubkey);
fd_base58_decode_32( "1111113XW3FRT3MtDaF4rvELqLg74hj2mJeVoW9J6j",  (unsigned char *) &test_acc->owner);
test_acc->lamports = 1000000UL;
test_acc->result_lamports = 1000000UL;
test_acc->executable = 0;
test_acc->rent_epoch = 0;
test_acc->data_len = 8;
static const uchar test_acc_0_data[] = {0, 0, 0, 0, 0, 0, 0, 0};
test_acc->data = test_acc_0_data;
test_acc->result_data_len = 8;
static const uchar test_acc_0_result_data[] = {0, 0, 0, 0, 0, 0, 0, 0};
test_acc->result_data = test_acc_0_result_data;
test_acc++;
  fd_base58_decode_32( "11111111111111111111111111111111",  (unsigned char *) &test.program_id);
  static const uchar raw_tx[] = {0, 0, 0, 1, 2, 0, 0, 0, 0, 0, 0, 82, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 4, 12, 0, 0, 0};
  test.raw_tx = raw_tx;
  test.raw_tx_len = 110;
  test.expected_result = -47;
  test.custom_err = 0;

  test.accs_len = test_accs_len;
  test.accs = test_accs;

  return fd_executor_run_test( &test, suite );
}
