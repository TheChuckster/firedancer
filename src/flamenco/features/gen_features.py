# solana feature status -u mainnet-beta --output json --display-all > mainnet-beta.json
# solana feature status -u devnet --output json --display-all > devnet.json
# solana feature status -u testnet --output json --display-all > testnet.json

# python3.8 gen_features.py fd_features.h fd_features.c
# uncrustify  -c /home/jsiegel/repos/firedancer/lint.cfg --no-backup --replace fd_features.c

import json
import sys
from base58 import b58decode

with open("feature_map.json", "r") as json_file:
    feature_map = json.load(json_file)

with open("../features/devnet.json", "r") as json_file:
    devnet = json.load(json_file)

with open("../features/testnet.json", "r") as json_file:
    testnet = json.load(json_file)

with open("../features/mainnet-beta.json", "r") as json_file:
    mainnet = json.load(json_file)

with open("../features/v13.json", "r") as json_file:
    v13 = json.load(json_file)

with open("../features/v14.json", "r") as json_file:
    v14 = json.load(json_file)

with open("../features/v16.json", "r") as json_file:
    v16 = json.load(json_file)

with open("../features/v17.json", "r") as json_file:
    v17 = json.load(json_file)

header = open(sys.argv[1], "w")
body = open(sys.argv[2], "w")

# Generate struct body of fd_features_t.
fd_features_t_params = []
rmap = {}
fm = feature_map
for x in fm:
    fd_features_t_params.append(f"  ulong {x['name']};")
    rmap[x["pubkey"]] = x["name"]
fd_features_t_params = "\n".join(fd_features_t_params)

# Write header file.
print(
    f"""#ifndef HEADER_fd_src_flamenco_features_fd_features_h
#define HEADER_fd_src_flamenco_features_fd_features_h

/* Code generated by gen_features.py. DO NOT EDIT. */

#include "../fd_flamenco_base.h"

/* fd_features_t is the current set of enabled feature flags.

   Each feature has a corresponding account in the account database,
   which are used to control activation.  This structure tracks all
   features implemented for convenience.  Parameters of this structure
   change over time, as activated features become default, and as new
   pending feature activations get added. */

struct fd_features {{
{fd_features_t_params}
}};
typedef struct fd_features fd_features_t;

/* fd_feature_id_t maps a feature ID (account address) to the byte
   byte offset in fd_features_t. */

struct fd_feature_id {{
  ulong       offset;  /* offset of feature in fd_features_t
                          ULONG_MAX is sentinel */
  fd_pubkey_t id;      /* pubkey of feature */
}};
typedef struct fd_feature_id fd_feature_id_t;

FD_PROTOTYPES_BEGIN

/* fd_feature_ids is the list of known feature IDs.
   The last element has offset==ULONG_MAX. */
extern fd_feature_id_t const ids[];

/* fd_features_enable_{{...}} enables a specific set of features. */

void fd_features_enable_testnet( fd_features_t * );
void fd_features_enable_devnet ( fd_features_t * );
void fd_features_enable_mainnet ( fd_features_t * );
void fd_features_enable_v13    ( fd_features_t * );
void fd_features_enable_v14    ( fd_features_t * );
void fd_features_enable_v16    ( fd_features_t * );
void fd_features_enable_v17    ( fd_features_t * );
void fd_features_enable_all    ( fd_features_t * );

/* fd_feature_iter_{...} is an iterator-style API over all supported
   features in this version of Firedancer.  Usage:

     for( fd_feature_id_t const * id = fd_feature_iter_init();
                                      !fd_feature_iter_done( id );
                                  id = fd_feature_iter_next( id ) ) {{
       ...
     }} */

static inline fd_feature_id_t const *
fd_feature_iter_init( void ) {{
  return ids;
}}

static inline int
fd_feature_iter_done( fd_feature_id_t const * id ) {{
  return id->offset == ULONG_MAX;
}}

static inline fd_feature_id_t const *
fd_feature_iter_next( fd_feature_id_t const * id ) {{
  return id+1;
}}

static inline ulong *
fd_features_ptr( fd_features_t *         features,
                 fd_feature_id_t const * id ) {{
  return (ulong *)( (ulong)features + id->offset );
}}

static inline ulong const *
fd_features_ptr_const( fd_features_t const *   features,
                       fd_feature_id_t const * id ) {{
  return (ulong const *)( (ulong)features + id->offset );
}}

FD_PROTOTYPES_END

#endif /* HEADER_fd_src_flamenco_features_fd_features_h */
""",
    file=header,
)


def gen_feature_activations_procedure(network):
    lines = []
    for x in network["features"]:
        if x["status"] == "active":
            if x["id"] not in rmap:
                continue
            lines.append(
                "  f->{} = {}; // {}".format(
                    rmap[x["id"]], x["sinceSlot"], x["description"]
                )
            )
    return "\n".join(lines)

def pubkey_to_c_array(pubkey):
    raw = b58decode(pubkey)
    return '"' + "".join([f"\\x{byte:02x}" for byte in raw]) + '"'


print(
    f"""/* Code generated by gen_features.py. DO NOT EDIT. */

#include "fd_features.h"
#include <stddef.h>

void
fd_features_enable_testnet( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(testnet)}
}}

void
fd_features_enable_devnet( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(devnet)}
}}

void
fd_features_enable_mainnet( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(mainnet)}
}}

void
fd_features_enable_v13( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(v13)}
}}

void
fd_features_enable_v14( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(v14)}
}}

void
fd_features_enable_v16( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(v16)}
}}

void
fd_features_enable_v17( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {gen_feature_activations_procedure(v17)}
}}

void
fd_features_enable_all( fd_features_t * f ) {{
  memset( f, 0xff, sizeof(fd_features_t) );
  {chr(0xa).join([f'  f->{x["name"]} = 0;' for x in fm])}
}}

fd_feature_id_t const ids[] = {{
  {
    chr(0xa).join([
      f'''  /* {x["pubkey"]} */
  {{ .offset = offsetof(fd_features_t, {x["name"]}),
     .id     = {{{pubkey_to_c_array(x["pubkey"])}}} }},
'''
      for x in fm
    ])
  }
  {{ .offset = ULONG_MAX }}
}};
""",
    file=body,
)
