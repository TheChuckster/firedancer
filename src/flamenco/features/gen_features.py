#!/usr/bin/env python3

"""
gen_features.py auto-generates fd_features_generated.{h,c} from
feature_map.json.
"""

import argparse
import json
from pathlib import Path
import struct
from base58 import b58decode

# The list of all feature names whose implementation has been removed from the Solana source code, and which therefore should default to enabled
REMOVED_FEATURES = [
    'account_hash_ignore_slot',
    'enable_early_verification_of_account_modifications',
    'cap_bpf_program_instruction_accounts',
    'disable_builtin_loader_ownership_chains',
    'limit_max_instruction_trace_length',
    'delay_visibility_of_program_deployment',
    'check_slice_translation_size',
    'move_serialized_len_ptr_in_cpi',
    'enable_program_redeployment_cooldown',
    'libsecp256k1_0_5_upgrade_enabled',
    'dedupe_config_program_signers',
    'system_transfer_zero_check',
    'disable_cpi_setting_executable_and_rent_epoch',
    'require_custodian_for_locked_stake_authorize',
    'vote_stake_checked_instructions',
    'no_overflow_rent_distribution',
    'stake_merge_with_unmatched_credits_observed',
    'remove_deprecated_request_unit_ix',
    'cap_transaction_accounts_data_size',
    'epoch_accounts_hash',
    'checked_arithmetic_in_fee_validation',
    'prevent_rent_paying_rent_recipients',
    'add_set_tx_loaded_accounts_data_size_instruction',
    'native_programs_consume_cu',
    'stop_sibling_instruction_search_at_parent',
    'remove_bpf_loader_incorrect_program_id',
    'stop_truncating_strings_in_syscalls'
]

def generate(feature_map_path, header_path, body_path):
    with open(feature_map_path, "r") as json_file:
        feature_map = json.load(json_file)

    header = open(header_path, "w")
    body = open(body_path, "w")

    # Generate struct body of fd_features_t.
    fd_features_t_params = []
    rmap = {}
    fm = feature_map
    for x in fm:
        fd_features_t_params.append(f"    ulong {x['name']};")
        rmap[x["pubkey"]] = x["name"]
    fd_features_t_params = "\n".join(fd_features_t_params)

    # Write header file.
    print(
        f"""/* Code generated by gen_features.py. DO NOT EDIT. */

#ifndef HEADER_fd_src_flamenco_features_fd_features_h
#error "Include fd_features.h instead of this file."
#endif

/* FEATURE_ID_CNT is the number of features in ids */

#define FD_FEATURE_ID_CNT ({len(fm)}UL)

union fd_features {{

  ulong f[ FD_FEATURE_ID_CNT ];

  struct {{
{fd_features_t_params}
  }};

}};""",
        file=header,
    )

    def pubkey_to_c_array(pubkey):
        raw = b58decode(pubkey)
        return '"' + "".join([f"\\x{byte:02x}" for byte in raw]) + '"'

    print(
        f"""/* Code generated by gen_features.py. DO NOT EDIT. */

#include "fd_features.h"
#include <stddef.h>

void
fd_features_enable_all( fd_features_t * f ) {{
  for( fd_feature_id_t const * id = fd_feature_iter_init();
    !fd_feature_iter_done( id );
    id = fd_feature_iter_next( id ) ) {{
    fd_features_set( f, id, 0UL );
  }}
}}

void
fd_features_disable_all( fd_features_t * f ) {{
  for( fd_feature_id_t const * id = fd_feature_iter_init();
    !fd_feature_iter_done( id );
    id = fd_feature_iter_next( id ) ) {{
    fd_features_set( f, id, FD_FEATURE_DISABLED );
  }}
}}

void
fd_features_enable_defaults( fd_features_t * f ) {{
  for( fd_feature_id_t const * id = fd_feature_iter_init();
    !fd_feature_iter_done( id );
    id = fd_feature_iter_next( id ) ) {{
      if ( id->default_activated == 1) {{
        fd_features_set( f, id, 0UL );
      }}
    }}
}}

fd_feature_id_t const ids[] = {{
{
    chr(0xa).join([
    f'''  {{ .index  = offsetof(fd_features_t, {x["name"]})>>3,
    .id     = {{{pubkey_to_c_array(x["pubkey"])}}}
              /* {x["pubkey"]} */ ,
    .default_activated = {1 if x["name"] in REMOVED_FEATURES else 0}
              }},
'''
    for x in fm
    ])
}
  {{ .index = ULONG_MAX }}
}};

/* TODO replace this with fd_map_perfect */

FD_FN_CONST fd_feature_id_t const *
fd_feature_id_query( ulong prefix ) {{

  switch( prefix ) {{
{
    chr(0xa).join([
    f'''  case {"0x%016x" % struct.unpack("<Q", b58decode(x["pubkey"])[:8])}: return &ids[{"% 4d" % (i)} ];'''
    for i, x in enumerate(fm)
    ])
}
  default: break;
  }}

  return NULL;
}}

/* Verify that offset calculations are correct */

{
    chr(0xa).join([
    'FD_STATIC_ASSERT( offsetof( fd_features_t, %-55s )>>3==%3dUL, layout );' % (x["name"], i)
    for i, x in enumerate(fm)
    ])
}

FD_STATIC_ASSERT( sizeof( fd_features_t )>>3==FD_FEATURE_ID_CNT, layout );""",
        file=body,
    )


def main():
    script_dir = Path(__file__).parent
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--feature_map",
        help="feature map file",
        type=Path,
        default=script_dir / "feature_map.json",
    )
    parser.add_argument(
        "--header",
        help="header file to write",
        type=Path,
        default=script_dir / "fd_features_generated.h",
    )
    parser.add_argument(
        "--body",
        help="body file to write",
        type=Path,
        default=script_dir / "fd_features_generated.c",
    )
    args = parser.parse_args()

    generate(
        feature_map_path=args.feature_map,
        header_path=args.header,
        body_path=args.body,
    )


if __name__ == "__main__":
    main()
